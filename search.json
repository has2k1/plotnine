[
  {
    "objectID": "reference/ylim.html",
    "href": "reference/ylim.html",
    "title": " plotnine.ylim",
    "section": "",
    "text": "ylim(limits=())"
  },
  {
    "objectID": "reference/ylim.html#parameters",
    "href": "reference/ylim.html#parameters",
    "title": " plotnine.ylim",
    "section": "Parameters",
    "text": "Parameters\n\n\n*limits = ()\n\nMin and max limits. Must be of size 2. You can also pass two values e.g ylim(40, 100)"
  },
  {
    "objectID": "reference/ylim.html#notes",
    "href": "reference/ylim.html#notes",
    "title": " plotnine.ylim",
    "section": "Notes",
    "text": "Notes\nIf the 2nd value of limits is less than the first, a reversed scale will be created."
  },
  {
    "objectID": "reference/xlim.html",
    "href": "reference/xlim.html",
    "title": " plotnine.xlim",
    "section": "",
    "text": "xlim(limits=())"
  },
  {
    "objectID": "reference/xlim.html#parameters",
    "href": "reference/xlim.html#parameters",
    "title": " plotnine.xlim",
    "section": "Parameters",
    "text": "Parameters\n\n\n*limits = ()\n\nMin and max limits. Must be of size 2. You can also pass two values e.g xlim(40, 100)"
  },
  {
    "objectID": "reference/watermark.html",
    "href": "reference/watermark.html",
    "title": " plotnine.watermark",
    "section": "",
    "text": "watermark(filename, xo=0, yo=0, alpha=None, kwargs={})"
  },
  {
    "objectID": "reference/watermark.html#parameters",
    "href": "reference/watermark.html#parameters",
    "title": " plotnine.watermark",
    "section": "Parameters",
    "text": "Parameters\n\n\nfilename : str | pathlib.Path\n\nImage file\n\nxo : int = 0\n\nx position offset in pixels.\n\nyo : int = 0\n\ny position offset in pixels.\n\nalpha : Optional[float] = None\n\nAlpha blending value.\n\nkwargs : Any = {}\n\nAdditional parameters passed to figimage"
  },
  {
    "objectID": "reference/watermark.html#notes",
    "href": "reference/watermark.html#notes",
    "title": " plotnine.watermark",
    "section": "Notes",
    "text": "Notes\nYou can add more than one watermark to a plot."
  },
  {
    "objectID": "reference/watermark.html#methods",
    "href": "reference/watermark.html#methods",
    "title": " plotnine.watermark",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\ndraw\nDraw watermark\n\n\n\n\n draw\n\ndraw(figure)\n\n\nDraw watermark\n\n\nParameters\n\n\nfigure : matplotlib.figure.Figure\n\nMatplolib figure on which to draw"
  },
  {
    "objectID": "reference/title.html",
    "href": "reference/title.html",
    "title": " plotnine.themes.themeable.title",
    "section": "",
    "text": "title(theme_element)"
  },
  {
    "objectID": "reference/title.html#parameters",
    "href": "reference/title.html#parameters",
    "title": " plotnine.themes.themeable.title",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/theme_xkcd.html",
    "href": "reference/theme_xkcd.html",
    "title": " plotnine.theme_xkcd",
    "section": "",
    "text": "theme_xkcd(\n    base_size=12,\n    scale=1,\n    length=100,\n    randomness=2,\n    stroke_size=3,\n    stroke_color=\"white\"\n)"
  },
  {
    "objectID": "reference/theme_xkcd.html#parameters",
    "href": "reference/theme_xkcd.html#parameters",
    "title": " plotnine.theme_xkcd",
    "section": "Parameters",
    "text": "Parameters\n\n\nbase_size : int = 12\n\nBase font size. All text sizes are a scaled versions of the base font size.\n\nscale : float = 1\n\nThe amplitude of the wiggle perpendicular to the line (in pixels)\n\nlength : float = 100\n\nThe length of the wiggle along the line (in pixels).\n\nrandomness : float = 2\n\nThe factor by which the length is randomly scaled. Default is 2.\n\nstroke_size : float = 3\n\nSize of the stroke to apply to the lines and text paths.\n\nstroke_color : str | tuple = \"white\"\n\nColor of the strokes. Use \"none\" for no color."
  },
  {
    "objectID": "reference/theme_update.html",
    "href": "reference/theme_update.html",
    "title": " plotnine.theme_update",
    "section": "",
    "text": "theme_update(kwargs={})"
  },
  {
    "objectID": "reference/theme_update.html#parameters",
    "href": "reference/theme_update.html#parameters",
    "title": " plotnine.theme_update",
    "section": "Parameters",
    "text": "Parameters\n\n\nkwargs : dict = {}\n\nTheme elements"
  },
  {
    "objectID": "reference/theme_set.html",
    "href": "reference/theme_set.html",
    "title": " plotnine.theme_set",
    "section": "",
    "text": "theme_set(new)"
  },
  {
    "objectID": "reference/theme_set.html#parameters",
    "href": "reference/theme_set.html#parameters",
    "title": " plotnine.theme_set",
    "section": "Parameters",
    "text": "Parameters\n\n\nnew : theme\n\nNew default theme"
  },
  {
    "objectID": "reference/theme_set.html#returns",
    "href": "reference/theme_set.html#returns",
    "title": " plotnine.theme_set",
    "section": "Returns",
    "text": "Returns\n\n\nout : theme\n\nPrevious theme"
  },
  {
    "objectID": "reference/theme_minimal.html",
    "href": "reference/theme_minimal.html",
    "title": " plotnine.theme_minimal",
    "section": "",
    "text": "theme_minimal(base_size=11, base_family=None)"
  },
  {
    "objectID": "reference/theme_minimal.html#parameters",
    "href": "reference/theme_minimal.html#parameters",
    "title": " plotnine.theme_minimal",
    "section": "Parameters",
    "text": "Parameters\n\n\nbase_size : int = 11\n\nBase font size. All text sizes are a scaled versions of the base font size.\n\nbase_family : str = None\n\nBase font family. If None, use plotnine.options.base_family."
  },
  {
    "objectID": "reference/theme_linedraw.html",
    "href": "reference/theme_linedraw.html",
    "title": " plotnine.theme_linedraw",
    "section": "",
    "text": "theme_linedraw(base_size=11, base_family=None)"
  },
  {
    "objectID": "reference/theme_linedraw.html#parameters",
    "href": "reference/theme_linedraw.html#parameters",
    "title": " plotnine.theme_linedraw",
    "section": "Parameters",
    "text": "Parameters\n\n\nbase_size : int = 11\n\nBase font size. All text sizes are a scaled versions of the base font size.\n\nbase_family : str = None\n\nBase font family. If None, use plotnine.options.base_family."
  },
  {
    "objectID": "reference/theme_grey.html",
    "href": "reference/theme_grey.html",
    "title": " plotnine.theme_grey",
    "section": "",
    "text": "theme_grey(base_size=11, base_family=None)\n\n\nalias of theme_gray"
  },
  {
    "objectID": "reference/theme_get.html",
    "href": "reference/theme_get.html",
    "title": " plotnine.theme_get",
    "section": "",
    "text": "theme_get()\n\n\nReturn the default theme\nThe default theme is the one set (using theme_set) by the user. If none has been set, then theme_gray is the default."
  },
  {
    "objectID": "reference/theme_classic.html",
    "href": "reference/theme_classic.html",
    "title": " plotnine.theme_classic",
    "section": "",
    "text": "theme_classic(base_size=11, base_family=None)"
  },
  {
    "objectID": "reference/theme_classic.html#parameters",
    "href": "reference/theme_classic.html#parameters",
    "title": " plotnine.theme_classic",
    "section": "Parameters",
    "text": "Parameters\n\n\nbase_size : int = 11\n\nBase font size. All text sizes are a scaled versions of the base font size.\n\nbase_family : str = None\n\nBase font family. If None, use plotnine.options.base_family."
  },
  {
    "objectID": "reference/theme_538.html",
    "href": "reference/theme_538.html",
    "title": " plotnine.theme_538",
    "section": "",
    "text": "theme_538(base_size=11, base_family=\"DejaVu Sans\")"
  },
  {
    "objectID": "reference/theme_538.html#parameters",
    "href": "reference/theme_538.html#parameters",
    "title": " plotnine.theme_538",
    "section": "Parameters",
    "text": "Parameters\n\n\nbase_size : int = 11\n\nBase font size. All text sizes are a scaled versions of the base font size.\n\nbase_family : str = \"DejaVu Sans\"\n\nBase font family."
  },
  {
    "objectID": "reference/text.html",
    "href": "reference/text.html",
    "title": " plotnine.themes.themeable.text",
    "section": "",
    "text": "text(theme_element)"
  },
  {
    "objectID": "reference/text.html#parameters",
    "href": "reference/text.html#parameters",
    "title": " plotnine.themes.themeable.text",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/subplots_adjust.html",
    "href": "reference/subplots_adjust.html",
    "title": " plotnine.themes.themeable.subplots_adjust",
    "section": "",
    "text": "subplots_adjust(theme_element)"
  },
  {
    "objectID": "reference/strip_text_x.html",
    "href": "reference/strip_text_x.html",
    "title": " plotnine.themes.themeable.strip_text_x",
    "section": "",
    "text": "strip_text_x(theme_element)"
  },
  {
    "objectID": "reference/strip_text_x.html#parameters",
    "href": "reference/strip_text_x.html#parameters",
    "title": " plotnine.themes.themeable.strip_text_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/strip_background_y.html",
    "href": "reference/strip_background_y.html",
    "title": " plotnine.themes.themeable.strip_background_y",
    "section": "",
    "text": "strip_background_y(theme_element)"
  },
  {
    "objectID": "reference/strip_background_y.html#parameters",
    "href": "reference/strip_background_y.html#parameters",
    "title": " plotnine.themes.themeable.strip_background_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_rect"
  },
  {
    "objectID": "reference/strip_background.html",
    "href": "reference/strip_background.html",
    "title": " plotnine.themes.themeable.strip_background",
    "section": "",
    "text": "strip_background(theme_element)"
  },
  {
    "objectID": "reference/strip_background.html#parameters",
    "href": "reference/strip_background.html#parameters",
    "title": " plotnine.themes.themeable.strip_background",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_rect"
  },
  {
    "objectID": "reference/strip_align_x.html",
    "href": "reference/strip_align_x.html",
    "title": " plotnine.themes.themeable.strip_align_x",
    "section": "",
    "text": "strip_align_x(theme_element)"
  },
  {
    "objectID": "reference/strip_align_x.html#parameters",
    "href": "reference/strip_align_x.html#parameters",
    "title": " plotnine.themes.themeable.strip_align_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nValue as a proportion of the strip size. A good value should be the range [-1, 0.5]. A negative value puts the strip inside the axes. A positive value creates a margin between the strip and the axes. 0 puts the strip on top of the panels."
  },
  {
    "objectID": "reference/stat_ydensity.html",
    "href": "reference/stat_ydensity.html",
    "title": " plotnine.stat_ydensity",
    "section": "",
    "text": "stat_ydensity(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"violin\",\n    position=\"dodge\",\n    na_rm=False,\n    adjust=1,\n    kernel=\"gaussian\",\n    n=1024,\n    trim=True,\n    bw=\"nrd0\",\n    scale=\"area\",\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_ydensity.html#parameters",
    "href": "reference/stat_ydensity.html#parameters",
    "title": " plotnine.stat_ydensity",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nweight\nNone\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"width\"        # Maximum width of density, [0, 1] range.\n\"violinwidth\"  # Shape of the violin\nCalculated aesthetics are accessed using the after_stat function. e.g. after_stat('width').\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"violin\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"dodge\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\nkernel : str = \"gaussian\"\n\nKernel used for density estimation. One of:\n\"biweight\"\n\"cosine\"\n\"cosine2\"\n\"epanechnikov\"\n\"gaussian\"\n\"triangular\"\n\"triweight\"\n\"uniform\"\n\nadjust : float = 1\n\nAn adjustment factor for the bw. Bandwidth becomes bw * adjust. Adjustment of the bandwidth.\n\ntrim : bool = False\n\nThis parameter only matters if you are displaying multiple densities in one plot. If False, the default, each density is computed on the full range of the data. If True, each density is computed over the range of that group; this typically means the estimated x values will not line-up, and hence you won’t be able to stack density values.\n\nn : int = 1024\n\nNumber of equally spaced points at which the density is to be estimated. For efficient computation, it should be a power of two.\n\nbw : str | float = \"nrd0\"\n\nThe bandwidth to use, If a float is given, it is the bandwidth. The str choices are:\n\"nrd0\"\n\"normal_reference\"\n\"scott\"\n\"silverman\"\nnrd0 is a port of stats::bw.nrd0 in R; it is eqiuvalent to silverman when there is more than 1 value in a group.\n\nscale : Literal[area, count, width] = \"area\"\n\nHow to scale the violins. The options are: If area all violins have the same area, before trimming the tails. If count the areas are scaled proportionally to the number of observations. If width all violins have the same maximum width.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_ydensity.html#see-also",
    "href": "reference/stat_ydensity.html#see-also",
    "title": " plotnine.stat_ydensity",
    "section": "See Also",
    "text": "See Also\n\ngeom_violin\n\n\n\nKDEUnivariate\n\n\n\nfit"
  },
  {
    "objectID": "reference/stat_summary_bin.html",
    "href": "reference/stat_summary_bin.html",
    "title": " plotnine.stat_summary_bin",
    "section": "",
    "text": "stat_summary_bin(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"pointrange\",\n    position=\"identity\",\n    na_rm=False,\n    bins=30,\n    breaks=None,\n    binwidth=None,\n    boundary=None,\n    fun_data=None,\n    fun_y=None,\n    fun_ymin=None,\n    fun_ymax=None,\n    fun_args=None,\n    random_state=None,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_summary_bin.html#parameters",
    "href": "reference/stat_summary_bin.html#parameters",
    "title": " plotnine.stat_summary_bin",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"bin\"    # bin identifier\n\"width\"  # bin width\n\"ymin\"   # ymin computed by the summary function\n\"ymax\"   # ymax computed by the summary function\nCalculated aesthetics are accessed using the after_stat function. e.g. after_stat('ymin').\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"pointrange\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\nbinwidth : float | tuple = None\n\nThe width of the bins. The default is to use bins bins that cover the range of the data. You should always override this value, exploring multiple widths to find the best to illustrate the stories in your data.\n\nbins : int | tuple = 30\n\nNumber of bins. Overridden by binwidth.\n\nbreaks : array_like | tuple[array_like, array_like] = None\n\nBin boundaries. This supersedes the binwidth, bins and boundary arguments.\n\nboundary : float | tuple = None\n\nA boundary between two bins. As with center, things are shifted when boundary is outside the range of the data. For example, to center on integers, use width=1 and boundary=0.5, even if 1 is outside the range of the data. At most one of center and boundary may be specified.\n\nfun_data : str | callable = \"mean_se\"\n\nIf a string, should be one of mean_cl_boot, mean_cl_normal, mean_sdl, median_hilow, mean_se. If a function, it should that takes an array and return a dataframe with three rows indexed as y, ymin and ymax.\n\nfun_y : callable = None\n\nA function that takes an array_like and returns a single value\n\nfun_ymax : callable = None\n\nA function that takes an array_like and returns a single value\n\nfun_args : dict = None\n\nArguments to any of the functions. Provided the names of the arguments of the different functions are in not conflict, the arguments will be assigned to the right functions. If there is a conflict, create a wrapper function that resolves the ambiguity in the argument names.\n\nrandom_state : int | RandomState = None\n\nSeed or Random number generator to use. If None, then numpy global generator numpy.random is used.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_summary_bin.html#notes",
    "href": "reference/stat_summary_bin.html#notes",
    "title": " plotnine.stat_summary_bin",
    "section": "Notes",
    "text": "Notes\nThe binwidth, bins, breaks and boundary arguments can be a tuples with two values (xaxis-value, yaxis-value) of the required type."
  },
  {
    "objectID": "reference/stat_summary_bin.html#see-also",
    "href": "reference/stat_summary_bin.html#see-also",
    "title": " plotnine.stat_summary_bin",
    "section": "See Also",
    "text": "See Also\n\ngeom_pointrange"
  },
  {
    "objectID": "reference/stat_sum.html",
    "href": "reference/stat_sum.html",
    "title": " plotnine.stat_sum",
    "section": "",
    "text": "stat_sum(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"point\",\n    position=\"identity\",\n    na_rm=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_sum.html#parameters",
    "href": "reference/stat_sum.html#parameters",
    "title": " plotnine.stat_sum",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nsize\nafter_stat('n')\n\n\nweight\n1\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"n\"     # Number of observations at a position\n\"prop\"  # Ratio of points in that panel at a position\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"point\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_sina.html",
    "href": "reference/stat_sina.html",
    "title": " plotnine.stat_sina",
    "section": "",
    "text": "stat_sina(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"sina\",\n    position=\"dodge\",\n    na_rm=False,\n    binwidth=None,\n    bins=None,\n    method=\"density\",\n    bw=\"nrd0\",\n    maxwidth=None,\n    adjust=1,\n    bin_limit=1,\n    random_state=None,\n    scale=\"area\",\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_sina.html#parameters",
    "href": "reference/stat_sina.html#parameters",
    "title": " plotnine.stat_sina",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"quantile\"  # quantile\n\"group\"     # group identifier\nCalculated aesthetics are accessed using the after_stat function. e.g. after_stat('quantile').\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"sina\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"dodge\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\nbinwidth : float = None\n\nThe width of the bins. The default is to use bins that cover the range of the data. You should always override this value, exploring multiple widths to find the best to illustrate the stories in your data.\n\nbins : int = 50\n\nNumber of bins. Overridden by binwidth.\n\nmethod : Literal[density, counts] = \"density\"\n\nChoose the method to spread the samples within the same bin along the x-axis. Available methods: “density”, “counts” (can be abbreviated, e.g. “d”). See Details.\n\nmaxwidth : float = None\n\nControl the maximum width the points can spread into. Values should be in the range (0, 1).\n\nadjust : float = 1\n\nAdjusts the bandwidth of the density kernel when method=\"density\". see stat_density.\n\nbw : str | float = \"nrd0\"\n\nThe bandwidth to use, If a float is given, it is the bandwidth. The str choices are: \"nrd0\", \"normal_reference\", \"scott\", \"silverman\"\nnrd0 is a port of stats::bw.nrd0 in R; it is eqiuvalent to silverman when there is more than 1 value in a group.\n\nbin_limit : int = 1\n\nIf the samples within the same y-axis bin are more than bin_limit, the samples’s X coordinates will be adjusted. This parameter is effective only when method=\"counts\"\n\nrandom_state : int | RandomState = None\n\nSeed or Random number generator to use. If None, then numpy global generator numpy.random is used.\n\nscale : Literal[area, count, width] = \"area\"\n\nHow to scale the sina groups.\n\narea - Scale by the largest density/bin among the different sinas\ncount - areas are scaled proportionally to the number of points\nwidth - Only scale according to the maxwidth parameter.\n\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_sina.html#see-also",
    "href": "reference/stat_sina.html#see-also",
    "title": " plotnine.stat_sina",
    "section": "See Also",
    "text": "See Also\n\ngeom_sina"
  },
  {
    "objectID": "reference/stat_qq_line.html",
    "href": "reference/stat_qq_line.html",
    "title": " plotnine.stat_qq_line",
    "section": "",
    "text": "stat_qq_line(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"qq_line\",\n    position=\"identity\",\n    na_rm=False,\n    distribution=\"norm\",\n    dparams={},\n    quantiles=None,\n    alpha_beta=(0.375, 0.375),\n    line_p=(0.25, 0.75),\n    fullrange=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_qq_line.html#parameters",
    "href": "reference/stat_qq_line.html#parameters",
    "title": " plotnine.stat_qq_line",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nsample\n\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"qq_line\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ndistribution : str = \"norm\"\n\nDistribution or distribution function name. The default is norm for a normal probability plot. Objects that look enough like a stats.distributions instance (i.e. they have a ppf method) are also accepted. See scipy stats for available distributions.\n\ndparams : dict = None\n\nDistribution-specific shape parameters (shape parameters plus location and scale).\n\nquantiles : array_like = None\n\nProbability points at which to calculate the theoretical quantile values. If provided, must be the same number as as the sample data points. The default is to use calculated theoretical points, use to alpha_beta control how these points are generated.\n\nalpha_beta : tuple = (3/8, 3/8)\n\nParameter values to use when calculating the quantiles.\n\nline_p : tuple = (0.25, 0.75)\n\nQuantiles to use when fitting a Q-Q line. Must be 2 values.\n\nfullrange : bool = False\n\nIf True the fit will span the full range of the plot.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_qq_line.html#see-also",
    "href": "reference/stat_qq_line.html#see-also",
    "title": " plotnine.stat_qq_line",
    "section": "See Also",
    "text": "See Also\n\nplotting_positions\n\nUses alpha_beta to calculate the quantiles."
  },
  {
    "objectID": "reference/stat_identity.html",
    "href": "reference/stat_identity.html",
    "title": " plotnine.stat_identity",
    "section": "",
    "text": "stat_identity(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"point\",\n    position=\"identity\",\n    na_rm=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_identity.html#parameters",
    "href": "reference/stat_identity.html#parameters",
    "title": " plotnine.stat_identity",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\n\n\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"point\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_function.html",
    "href": "reference/stat_function.html",
    "title": " plotnine.stat_function",
    "section": "",
    "text": "stat_function(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"path\",\n    position=\"identity\",\n    na_rm=False,\n    fun=None,\n    n=101,\n    args=None,\n    xlim=None,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_function.html#parameters",
    "href": "reference/stat_function.html#parameters",
    "title": " plotnine.stat_function",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\ny\nafter_stat('fx')\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"x\"   # x points at which the function is evaluated\n\"fx\"  # points evaluated at each x\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"path\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\nfun : callable\n\nFunction to evaluate.\n\nn : int = 101\n\nNumber of points at which to evaluate the function.\n\nxlim : tuple = None\n\nx limits for the range. The default depends on the x aesthetic. There is not an x aesthetic then the xlim must be provided.\n\nargs : Optional[tuple[Any] | dict[str, Any]] = None\n\nArguments to pass to fun.\n\n**kwargs = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_ecdf.html",
    "href": "reference/stat_ecdf.html",
    "title": " plotnine.stat_ecdf",
    "section": "",
    "text": "stat_ecdf(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"step\",\n    position=\"identity\",\n    na_rm=False,\n    n=None,\n    pad=True,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_ecdf.html#parameters",
    "href": "reference/stat_ecdf.html#parameters",
    "title": " plotnine.stat_ecdf",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\nafter_stat('ecdf')\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"x\"     # x in the data\n\"ecdf\"  # cumulative density corresponding to x\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"step\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\nn\n\nThis is the number of points to interpolate with. If None, do not interpolate.\n\npad : bool = True\n\nIf True, pad the domain with -inf and +inf so that ECDF does not have discontinuities at the extremes.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_ecdf.html#see-also",
    "href": "reference/stat_ecdf.html#see-also",
    "title": " plotnine.stat_ecdf",
    "section": "See Also",
    "text": "See Also\n\ngeom_step"
  },
  {
    "objectID": "reference/stat_density.html",
    "href": "reference/stat_density.html",
    "title": " plotnine.stat_density",
    "section": "",
    "text": "stat_density(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"density\",\n    position=\"stack\",\n    na_rm=False,\n    kernel=\"gaussian\",\n    adjust=1,\n    trim=False,\n    n=1024,\n    gridsize=None,\n    bw=\"nrd0\",\n    cut=3,\n    clip=(-inf, inf),\n    bounds=(-inf, inf),\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_density.html#parameters",
    "href": "reference/stat_density.html#parameters",
    "title": " plotnine.stat_density",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\nafter_stat('density')\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n'density'   # density estimate\n\n'count'     # density * number of points,\n            # useful for stacked density plots\n\n'scaled'    # density estimate, scaled to maximum of 1\n'n'         # Number of observations at a position\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"density\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"stack\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\nkernel : str = \"gaussian\"\n\nKernel used for density estimation. One of:\n\"biweight\"\n\"cosine\"\n\"cosine2\"\n\"epanechnikov\"\n\"gaussian\"\n\"triangular\"\n\"triweight\"\n\"uniform\"\n\nadjust : float = 1\n\nAn adjustment factor for the bw. Bandwidth becomes bw * adjust. Adjustment of the bandwidth.\n\ntrim : bool = False\n\nThis parameter only matters if you are displaying multiple densities in one plot. If False, the default, each density is computed on the full range of the data. If True, each density is computed over the range of that group; this typically means the estimated x values will not line-up, and hence you won’t be able to stack density values.\n\nn : int = 1024\n\nNumber of equally spaced points at which the density is to be estimated. For efficient computation, it should be a power of two.\n\ngridsize : int = None\n\nIf gridsize is None, max(len(x), 50) is used.\n\nbw : str | float = \"nrd0\"\n\nThe bandwidth to use, If a float is given, it is the bandwidth. The options are:\n\"nrd0\"\n\"normal_reference\"\n\"scott\"\n\"silverman\"\nnrd0 is a port of stats::bw.nrd0 in R; it is eqiuvalent to silverman when there is more than 1 value in a group.\n\ncut : float = 3\n\nDefines the length of the grid past the lowest and highest values of x so that the kernel goes to zero. The end points are -/+ cut*bw*{min(x) or max(x)}.\n\nclip : tuple[float, float] = (-inf, inf)\n\nValues in x that are outside of the range given by clip are dropped. The number of values in x is then shortened.\n\nbounds\n\nThe domain boundaries of the data. When the domain is finite the estimated density will be corrected to remove asymptotic boundary effects that are usually biased away from the probability density function being estimated.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_density.html#see-also",
    "href": "reference/stat_density.html#see-also",
    "title": " plotnine.stat_density",
    "section": "See Also",
    "text": "See Also\n\ngeom_density\n\n\n\nKDEUnivariate\n\n\n\nfit"
  },
  {
    "objectID": "reference/stat_boxplot.html",
    "href": "reference/stat_boxplot.html",
    "title": " plotnine.stat_boxplot",
    "section": "",
    "text": "stat_boxplot(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"boxplot\",\n    position=\"dodge\",\n    na_rm=False,\n    coef=1.5,\n    width=None,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_boxplot.html#parameters",
    "href": "reference/stat_boxplot.html#parameters",
    "title": " plotnine.stat_boxplot",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"width\"  # width of boxplot\n\"lower\"  # lower hinge, 25% quantile\n\"middle\" # median, 50% quantile\n\"upper\"  # upper hinge, 75% quantile\n\n# lower edge of notch, computed as;\n# median - 1.58 * IQR / sqrt(n)\n\"notchlower\"\n\n# upper edge of notch, computed as;\n# median + 1.58 * IQR / sqrt(n)\n\"notchupper\"\n\n# lower whisker, computed as; smallest observation\n# greater than or equal to lower hinge - 1.5 * IQR\n\"ymin\"\n\n# upper whisker, computed as; largest observation\n# less than or equal to upper hinge + 1.5 * IQR\n\"ymax\"\n'n'     # Number of observations at a position\nCalculated aesthetics are accessed using the after_stat function. e.g. after_stat('width').\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"boxplot\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"dodge\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ncoef : float = 1.5\n\nLength of the whiskers as a multiple of the Interquartile Range.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_boxplot.html#see-also",
    "href": "reference/stat_boxplot.html#see-also",
    "title": " plotnine.stat_boxplot",
    "section": "See Also",
    "text": "See Also\n\ngeom_boxplot"
  },
  {
    "objectID": "reference/stat_bin_2d.html",
    "href": "reference/stat_bin_2d.html",
    "title": " plotnine.stat_bin_2d",
    "section": "",
    "text": "stat_bin_2d(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"rect\",\n    position=\"identity\",\n    na_rm=False,\n    bins=30,\n    breaks=None,\n    binwidth=None,\n    drop=True,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_bin_2d.html#parameters",
    "href": "reference/stat_bin_2d.html#parameters",
    "title": " plotnine.stat_bin_2d",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nfill\nafter_stat('count')\n\n\nweight\nNone\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"xmin\"    # x lower bound for the bin\n\"xmax\"    # x upper bound for the bin\n\"ymin\"    # y lower bound for the bin\n\"ymax\"    # y upper bound for the bin\n\"count\"   # number of points in bin\n\"density\" # density of points in bin, scaled to integrate to 1\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"rect\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\nbins : int = 30\n\nNumber of bins. Overridden by binwidth.\n\nbreaks : array_like | tuple[array_like, array_like] = None\n\nBin boundaries. This supersedes the binwidth, bins, center and boundary. It can be an array_like or a list of two array_likes to provide distinct breaks for the x and y axes.\n\nbinwidth : float = None\n\nThe width of the bins. The default is to use bins bins that cover the range of the data. You should always override this value, exploring multiple widths to find the best to illustrate the stories in your data.\n\ndrop : bool = False\n\nIf True, removes all cells with zero counts.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat.html",
    "href": "reference/stat.html",
    "title": " plotnine.stats.stat.stat",
    "section": "",
    "text": "stat(mapping=None, data=None, kwargs={})"
  },
  {
    "objectID": "reference/stat.html#attributes",
    "href": "reference/stat.html#attributes",
    "title": " plotnine.stats.stat.stat",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\nCREATES\nset() -&gt; new empty set object\n\n\nDEFAULT_AES\ndict() -&gt; new empty dictionary\n\n\nDEFAULT_PARAMS\ndict() -&gt; new empty dictionary\n\n\nNON_MISSING_AES\nset() -&gt; new empty set object\n\n\nREQUIRED_AES\nset() -&gt; new empty set object\n\n\n\n\n CREATES\n\nCREATES : set[str] = set()\n\n\nset() -&gt; new empty set object set(iterable) -&gt; new set object\nBuild an unordered collection of unique elements.\n\n\n\n DEFAULT_AES\n\nDEFAULT_AES : dict[str, Any] = aes(**self.DEFAULT_AES)\n\n\ndict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object’s (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2)\n\n\n\n DEFAULT_PARAMS\n\nDEFAULT_PARAMS : dict[str, Any] = {}\n\n\ndict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object’s (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2)\n\n\n\n NON_MISSING_AES\n\nNON_MISSING_AES : set[str] = set()\n\n\nset() -&gt; new empty set object set(iterable) -&gt; new set object\nBuild an unordered collection of unique elements.\n\n\n\n REQUIRED_AES\n\nREQUIRED_AES : set[str] = set()\n\n\nset() -&gt; new empty set object set(iterable) -&gt; new set object\nBuild an unordered collection of unique elements."
  },
  {
    "objectID": "reference/stat.html#methods",
    "href": "reference/stat.html#methods",
    "title": " plotnine.stats.stat.stat",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\naesthetics\nReturn a set of all non-computed aesthetics for this stat.\n\n\ncompute_group\nCalculate statistics for the group\n\n\ncompute_layer\nCalculate statistics for this layers\n\n\ncompute_panel\nCalculate the statistics for all the groups\n\n\nfinish_layer\nModify data after the aesthetics have been mapped\n\n\nfrom_geom\nReturn an instantiated stat object\n\n\nsetup_data\nOverride to modify data before compute_layer is called\n\n\nsetup_params\nOverride this to verify or adjust parameters\n\n\nto_layer\nMake a layer that represents this stat\n\n\nuse_defaults\nCombine data with defaults and set aesthetics from parameters\n\n\n\n\n aesthetics \n\naesthetics()\n\n\nReturn a set of all non-computed aesthetics for this stat.\nstats should not override this method.\n\n\n\n compute_group \n\ncompute_group(data, scales, params={})\n\n\nCalculate statistics for the group\nAll stats should implement this method\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nData for a group\n\nscales : pos_scales\n\nx (scales.x) and y (scales.y) scale objects. The most likely reason to use scale information is to find out the physical size of a scale. e.g.\nrange_x = scales.x.dimension()\n\nparams : Any = {}\n\nParameters\n\n\n\n\n\n\n compute_layer \n\ncompute_layer(data, params, layout)\n\n\nCalculate statistics for this layers\nThis is the top-most computation method for the stat. It does not do any computations, but it knows how to verify the data, partition it call the next computation method and merge results.\nstats should not override this method.\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nData points for all objects in a layer.\n\nparams : dict[str, Any]\n\nStat parameters\n\nlayout : Layout\n\nPanel layout information\n\n\n\n\n\n\n compute_panel \n\ncompute_panel(data, scales, params={})\n\n\nCalculate the statistics for all the groups\nReturn the results in a single dataframe.\nThis is a default function that can be overridden by individual stats\n\n\nParameters\n\n\ndata : pd.DataFrame\n\ndata for the computing\n\nscales : pos_scales\n\nx (scales.x) and y (scales.y) scale objects. The most likely reason to use scale information is to find out the physical size of a scale. e.g.\nrange_x = scales.x.dimension()\n\nparams : Any = {}\n\nThe parameters for the stat. It includes default values if user did not set a particular parameter.\n\n\n\n\n\n\n finish_layer\n\nfinish_layer(data, params)\n\n\nModify data after the aesthetics have been mapped\nThis can be used by stats that require access to the mapped values of the computed aesthetics, part 3 as shown below.\n1. stat computes and creates variables\n2. variables mapped to aesthetics\n3. stat sees and modifies data according to the\n   aesthetic values\nThe default to is to do nothing.\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nData for the layer\n\nparams : dict[str, Any]\n\nParameters\n\n\n\n\n\nReturns\n\n\ndata : pd.DataFrame\n\nModified data\n\n\n\n\n\n\n from_geom \n\nfrom_geom(geom)\n\n\nReturn an instantiated stat object\nstats should not override this method.\n\n\nParameters\n\n\ngeom : geom\n\nA geom object\n\n\n\n\n\nReturns\n\n\nstat\n\nA stat object\n\n\n\n\n\nRaises\n\n\nPlotnineError if unable to create a stat.\n\n\n\n\n\n\n\n\n setup_data\n\nsetup_data(data)\n\n\nOverride to modify data before compute_layer is called\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nData\n\n\n\n\n\nReturns\n\n\nout : pd.DataFrame\n\nData\n\n\n\n\n\n\n setup_params\n\nsetup_params(data)\n\n\nOverride this to verify or adjust parameters\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nData\n\n\n\n\n\nReturns\n\n\nout : dict[str, Any]\n\nParameters used by the stats.\n\n\n\n\n\n\n to_layer\n\nto_layer()\n\n\nMake a layer that represents this stat\n\n\nReturns\n\n\nout : layer\n\nLayer\n\n\n\n\n\n\n use_defaults\n\nuse_defaults(data)\n\n\nCombine data with defaults and set aesthetics from parameters\nstats should not override this method.\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nData used for drawing the geom.\n\n\n\n\n\nReturns\n\n\nout : pd.DataFrame\n\nData used for drawing the geom."
  },
  {
    "objectID": "reference/set_option.html",
    "href": "reference/set_option.html",
    "title": " plotnine.options.set_option",
    "section": "",
    "text": "set_option(name, value)"
  },
  {
    "objectID": "reference/set_option.html#parameters",
    "href": "reference/set_option.html#parameters",
    "title": " plotnine.options.set_option",
    "section": "Parameters",
    "text": "Parameters\n\n\nname : str\n\nName of the option\n\nvalue : Any\n\nNew value of the option"
  },
  {
    "objectID": "reference/set_option.html#returns",
    "href": "reference/set_option.html#returns",
    "title": " plotnine.options.set_option",
    "section": "Returns",
    "text": "Returns\n\n\nAny\n\nOld value of the option"
  },
  {
    "objectID": "reference/scale_y_timedelta.html",
    "href": "reference/scale_y_timedelta.html",
    "title": " plotnine.scale_y_timedelta",
    "section": "",
    "text": "scale_y_timedelta(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"pd_timedelta\"\n)"
  },
  {
    "objectID": "reference/scale_y_timedelta.html#parameter-attributes",
    "href": "reference/scale_y_timedelta.html#parameter-attributes",
    "title": " plotnine.scale_y_timedelta",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"pd_timedelta\""
  },
  {
    "objectID": "reference/scale_y_sqrt.html",
    "href": "reference/scale_y_sqrt.html",
    "title": " plotnine.scale_y_sqrt",
    "section": "",
    "text": "scale_y_sqrt(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"sqrt\"\n)"
  },
  {
    "objectID": "reference/scale_y_sqrt.html#parameter-attributes",
    "href": "reference/scale_y_sqrt.html#parameter-attributes",
    "title": " plotnine.scale_y_sqrt",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"sqrt\""
  },
  {
    "objectID": "reference/scale_y_log10.html",
    "href": "reference/scale_y_log10.html",
    "title": " plotnine.scale_y_log10",
    "section": "",
    "text": "scale_y_log10(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"log10\"\n)"
  },
  {
    "objectID": "reference/scale_y_log10.html#parameter-attributes",
    "href": "reference/scale_y_log10.html#parameter-attributes",
    "title": " plotnine.scale_y_log10",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"log10\""
  },
  {
    "objectID": "reference/scale_y_datetime.html",
    "href": "reference/scale_y_datetime.html",
    "title": " plotnine.scale_y_datetime",
    "section": "",
    "text": "scale_y_datetime(\n    date_breaks=None,\n    date_labels=None,\n    date_minor_breaks=None,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"datetime\"\n)"
  },
  {
    "objectID": "reference/scale_y_datetime.html#init-parameters",
    "href": "reference/scale_y_datetime.html#init-parameters",
    "title": " plotnine.scale_y_datetime",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ndate_breaks: str | None = None\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\ndate_labels: str | None = None\n\nFormat string for the labels. See strftime. If specified, date_labels takes precedence over labels.\n\ndate_minor_breaks: str | None = None\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks."
  },
  {
    "objectID": "reference/scale_y_datetime.html#parameter-attributes",
    "href": "reference/scale_y_datetime.html#parameter-attributes",
    "title": " plotnine.scale_y_datetime",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"datetime\""
  },
  {
    "objectID": "reference/scale_y_continuous.html",
    "href": "reference/scale_y_continuous.html",
    "title": " plotnine.scale_y_continuous",
    "section": "",
    "text": "scale_y_continuous(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_y_continuous.html#parameter-attributes",
    "href": "reference/scale_y_continuous.html#parameter-attributes",
    "title": " plotnine.scale_y_continuous",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_x_symlog.html",
    "href": "reference/scale_x_symlog.html",
    "title": " plotnine.scale_x_symlog",
    "section": "",
    "text": "scale_x_symlog(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"symlog\"\n)"
  },
  {
    "objectID": "reference/scale_x_symlog.html#parameter-attributes",
    "href": "reference/scale_x_symlog.html#parameter-attributes",
    "title": " plotnine.scale_x_symlog",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"symlog\""
  },
  {
    "objectID": "reference/scale_x_reverse.html",
    "href": "reference/scale_x_reverse.html",
    "title": " plotnine.scale_x_reverse",
    "section": "",
    "text": "scale_x_reverse(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"reverse\"\n)"
  },
  {
    "objectID": "reference/scale_x_reverse.html#parameter-attributes",
    "href": "reference/scale_x_reverse.html#parameter-attributes",
    "title": " plotnine.scale_x_reverse",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"reverse\""
  },
  {
    "objectID": "reference/scale_x_discrete.html",
    "href": "reference/scale_x_discrete.html",
    "title": " plotnine.scale_x_discrete",
    "section": "",
    "text": "scale_x_discrete(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_x_discrete.html#parameter-attributes",
    "href": "reference/scale_x_discrete.html#parameter-attributes",
    "title": " plotnine.scale_x_discrete",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_x_date.html",
    "href": "reference/scale_x_date.html",
    "title": " plotnine.scale_x_date",
    "section": "",
    "text": "scale_x_date(\n    date_breaks=None,\n    date_labels=None,\n    date_minor_breaks=None,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"datetime\"\n)"
  },
  {
    "objectID": "reference/scale_x_date.html#init-parameters",
    "href": "reference/scale_x_date.html#init-parameters",
    "title": " plotnine.scale_x_date",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ndate_breaks: str | None = None\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\ndate_labels: str | None = None\n\nFormat string for the labels. See strftime. If specified, date_labels takes precedence over labels.\n\ndate_minor_breaks: str | None = None\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks."
  },
  {
    "objectID": "reference/scale_x_date.html#parameter-attributes",
    "href": "reference/scale_x_date.html#parameter-attributes",
    "title": " plotnine.scale_x_date",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"datetime\""
  },
  {
    "objectID": "reference/scale_size_radius.html",
    "href": "reference/scale_size_radius.html",
    "title": " plotnine.scale_size_radius",
    "section": "",
    "text": "scale_size_radius(\n    range=(1, 6),\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_size_radius.html#init-parameters",
    "href": "reference/scale_size_radius.html#init-parameters",
    "title": " plotnine.scale_size_radius",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nrange: tuple[float, float] = (1, 6)\n\nRange ([Minimum, Maximum]) of the size."
  },
  {
    "objectID": "reference/scale_size_radius.html#parameter-attributes",
    "href": "reference/scale_size_radius.html#parameter-attributes",
    "title": " plotnine.scale_size_radius",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_size_identity.html",
    "href": "reference/scale_size_identity.html",
    "title": " plotnine.scale_size_identity",
    "section": "",
    "text": "scale_size_identity(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_size_identity.html#parameter-attributes",
    "href": "reference/scale_size_identity.html#parameter-attributes",
    "title": " plotnine.scale_size_identity",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_size_datetime.html",
    "href": "reference/scale_size_datetime.html",
    "title": " plotnine.scale_size_datetime",
    "section": "",
    "text": "scale_size_datetime(\n    date_breaks=None,\n    date_labels=None,\n    date_minor_breaks=None,\n    range=(1, 6),\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"datetime\"\n)"
  },
  {
    "objectID": "reference/scale_size_datetime.html#init-parameters",
    "href": "reference/scale_size_datetime.html#init-parameters",
    "title": " plotnine.scale_size_datetime",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ndate_breaks: str | None = None\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\ndate_labels: str | None = None\n\nFormat string for the labels. See strftime. If specified, date_labels takes precedence over labels.\n\ndate_minor_breaks: str | None = None\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\nrange: tuple[float, float] = (1, 6)\n\nRange ([Minimum, Maximum]) of the size."
  },
  {
    "objectID": "reference/scale_size_datetime.html#parameter-attributes",
    "href": "reference/scale_size_datetime.html#parameter-attributes",
    "title": " plotnine.scale_size_datetime",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"datetime\""
  },
  {
    "objectID": "reference/scale_size_area.html",
    "href": "reference/scale_size_area.html",
    "title": " plotnine.scale_size_area",
    "section": "",
    "text": "scale_size_area(\n    max_size=6,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_size_area.html#init-parameters",
    "href": "reference/scale_size_area.html#init-parameters",
    "title": " plotnine.scale_size_area",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nmax_size: float = 6\n\nMaximum size of the plotting symbol."
  },
  {
    "objectID": "reference/scale_size_area.html#parameter-attributes",
    "href": "reference/scale_size_area.html#parameter-attributes",
    "title": " plotnine.scale_size_area",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler = rescale_max\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_shape_manual.html",
    "href": "reference/scale_shape_manual.html",
    "title": " plotnine.scale_shape_manual",
    "section": "",
    "text": "scale_shape_manual(\n    values,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_shape_manual.html#init-parameters",
    "href": "reference/scale_shape_manual.html#init-parameters",
    "title": " plotnine.scale_shape_manual",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nvalues: Sequence[Any] | dict[Any, Any] \n\nShapes that make up the palette. See matplotlib.markers for list of all possible shapes. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to shapes."
  },
  {
    "objectID": "reference/scale_shape_manual.html#parameter-attributes",
    "href": "reference/scale_shape_manual.html#parameter-attributes",
    "title": " plotnine.scale_shape_manual",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_shape_manual.html#see-also",
    "href": "reference/scale_shape_manual.html#see-also",
    "title": " plotnine.scale_shape_manual",
    "section": "See Also",
    "text": "See Also\n\nmatplotlib.markers"
  },
  {
    "objectID": "reference/scale_shape_discrete.html",
    "href": "reference/scale_shape_discrete.html",
    "title": " plotnine.scale_shape_discrete",
    "section": "",
    "text": "scale_shape_discrete(\n    unfilled=False,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_shape_discrete.html#init-parameters",
    "href": "reference/scale_shape_discrete.html#init-parameters",
    "title": " plotnine.scale_shape_discrete",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nunfilled: bool = False\n\nIf True, then all shapes will have no interiors that can be a filled."
  },
  {
    "objectID": "reference/scale_shape_discrete.html#parameter-attributes",
    "href": "reference/scale_shape_discrete.html#parameter-attributes",
    "title": " plotnine.scale_shape_discrete",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_linetype_manual.html",
    "href": "reference/scale_linetype_manual.html",
    "title": " plotnine.scale_linetype_manual",
    "section": "",
    "text": "scale_linetype_manual(\n    values,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_linetype_manual.html#init-parameters",
    "href": "reference/scale_linetype_manual.html#init-parameters",
    "title": " plotnine.scale_linetype_manual",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nvalues: Sequence[Any] | dict[Any, Any] \n\nLinetypes that make up the palette. Possible values of the list are:\n\nStrings like\n\n'solid'                # solid line\n'dashed'               # dashed line\n'dashdot'              # dash-dotted line\n'dotted'               # dotted line\n'None' or ' ' or ''    # draw nothing\n\nTuples of the form (offset, (on, off, on, off, ….)) e.g. (0, (1, 1)), (1, (2, 2)), (2, (5, 3, 1, 3))\n\nThe values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to linetypes."
  },
  {
    "objectID": "reference/scale_linetype_manual.html#parameter-attributes",
    "href": "reference/scale_linetype_manual.html#parameter-attributes",
    "title": " plotnine.scale_linetype_manual",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_linetype_manual.html#see-also",
    "href": "reference/scale_linetype_manual.html#see-also",
    "title": " plotnine.scale_linetype_manual",
    "section": "See Also",
    "text": "See Also\n\nmatplotlib.markers"
  },
  {
    "objectID": "reference/scale_linetype_discrete.html",
    "href": "reference/scale_linetype_discrete.html",
    "title": " plotnine.scale_linetype_discrete",
    "section": "",
    "text": "scale_linetype_discrete(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_linetype_discrete.html#parameter-attributes",
    "href": "reference/scale_linetype_discrete.html#parameter-attributes",
    "title": " plotnine.scale_linetype_discrete",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_fill_manual.html",
    "href": "reference/scale_fill_manual.html",
    "title": " plotnine.scale_fill_manual",
    "section": "",
    "text": "scale_fill_manual(\n    values,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_fill_manual.html#init-parameters",
    "href": "reference/scale_fill_manual.html#init-parameters",
    "title": " plotnine.scale_fill_manual",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nvalues: Sequence[Any] | dict[Any, Any] \n\nColors that make up the palette. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to colors."
  },
  {
    "objectID": "reference/scale_fill_manual.html#parameter-attributes",
    "href": "reference/scale_fill_manual.html#parameter-attributes",
    "title": " plotnine.scale_fill_manual",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\n\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_fill_hue.html",
    "href": "reference/scale_fill_hue.html",
    "title": " plotnine.scale_fill_hue",
    "section": "",
    "text": "scale_fill_hue(\n    h=0.01,\n    l=0.6,\n    s=0.65,\n    color_space=\"hls\",\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_fill_hue.html#init-parameters",
    "href": "reference/scale_fill_hue.html#init-parameters",
    "title": " plotnine.scale_fill_hue",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nh: float = 0.01\n\nHue. Must be in the range [0, 1]\n\nl: float = 0.6\n\nLightness. Must be in the range [0, 1]\n\ns: float = 0.65\n\nSaturation. Must be in the range [0, 1]\n\ncolor_space: Literal['hls', 'hsluv'] = 'hls'\n\nColor space to use. Should be one of hls or hsluv. https://www.hsluv.org/"
  },
  {
    "objectID": "reference/scale_fill_hue.html#parameter-attributes",
    "href": "reference/scale_fill_hue.html#parameter-attributes",
    "title": " plotnine.scale_fill_hue",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_fill_gray.html",
    "href": "reference/scale_fill_gray.html",
    "title": " plotnine.scale_fill_gray",
    "section": "",
    "text": "scale_fill_gray(\n    start=0.2,\n    end=0.8,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_fill_gray.html#init-parameters",
    "href": "reference/scale_fill_gray.html#init-parameters",
    "title": " plotnine.scale_fill_gray",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nstart: float = 0.2\n\nGrey value at low end of palette.\n\nend: float = 0.8\n\nGrey value at high end of palette"
  },
  {
    "objectID": "reference/scale_fill_gray.html#parameter-attributes",
    "href": "reference/scale_fill_gray.html#parameter-attributes",
    "title": " plotnine.scale_fill_gray",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_fill_gradient2.html",
    "href": "reference/scale_fill_gradient2.html",
    "title": " plotnine.scale_fill_gradient2",
    "section": "",
    "text": "scale_fill_gradient2(\n    low=\"#832424\",\n    mid=\"#FFFFFF\",\n    high=\"#3A3A98\",\n    midpoint=0,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_fill_gradient2.html#init-parameters",
    "href": "reference/scale_fill_gradient2.html#init-parameters",
    "title": " plotnine.scale_fill_gradient2",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nlow: str = '#832424'\n\nLow color.\n\nmid: str = '#FFFFFF'\n\nMid-point color.\n\nhigh: str = '#3A3A98'\n\nHigh color.\n\nmidpoint: float = 0\n\nMid point of the input data range."
  },
  {
    "objectID": "reference/scale_fill_gradient2.html#parameter-attributes",
    "href": "reference/scale_fill_gradient2.html#parameter-attributes",
    "title": " plotnine.scale_fill_gradient2",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_fill_distiller.html",
    "href": "reference/scale_fill_distiller.html",
    "title": " plotnine.scale_fill_distiller",
    "section": "",
    "text": "scale_fill_distiller(\n    type=\"seq\",\n    palette=1,\n    values=None,\n    direction=1,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_fill_distiller.html#init-parameters",
    "href": "reference/scale_fill_distiller.html#init-parameters",
    "title": " plotnine.scale_fill_distiller",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ntype: Literal['diverging', 'qualitative', 'sequential', 'div', 'qual', 'seq'] = 'seq'\n\nType of data\n\npalette: int | str = 1\n\nIf a string, will use that named palette. If a number, will index into the list of palettes of appropriate type.\n\nvalues: Sequence[float] | None = None\n\nList of points in the range [0, 1] at which to place each color. Must be the same size as colors. Default to evenly space the colors\n\ndirection: Literal[1, -1] = 1\n\nSets the order of colors in the scale. If 1, colors are as output brewer_pal. If -1, the order of colors is reversed."
  },
  {
    "objectID": "reference/scale_fill_distiller.html#parameter-attributes",
    "href": "reference/scale_fill_distiller.html#parameter-attributes",
    "title": " plotnine.scale_fill_distiller",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_fill_desaturate.html",
    "href": "reference/scale_fill_desaturate.html",
    "title": " plotnine.scale_fill_desaturate",
    "section": "",
    "text": "scale_fill_desaturate(\n    color=\"red\",\n    prop=0,\n    reverse=False,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_fill_desaturate.html#init-parameters",
    "href": "reference/scale_fill_desaturate.html#init-parameters",
    "title": " plotnine.scale_fill_desaturate",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ncolor: str = 'red'\n\nColor to desaturate\n\nprop: float = 0\n\nSaturation channel of color will be multiplied by this value.\n\nreverse: bool = False\n\nWhether to go from color to desaturated color or desaturated color to color."
  },
  {
    "objectID": "reference/scale_fill_desaturate.html#parameter-attributes",
    "href": "reference/scale_fill_desaturate.html#parameter-attributes",
    "title": " plotnine.scale_fill_desaturate",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_fill_continuous.html",
    "href": "reference/scale_fill_continuous.html",
    "title": " plotnine.scale_fill_continuous",
    "section": "",
    "text": "scale_fill_continuous(\n    cmap_name=\"viridis\",\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_fill_continuous.html#init-parameters",
    "href": "reference/scale_fill_continuous.html#init-parameters",
    "title": " plotnine.scale_fill_continuous",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ncmap_name: str = 'viridis'\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see colormaps."
  },
  {
    "objectID": "reference/scale_fill_continuous.html#parameter-attributes",
    "href": "reference/scale_fill_continuous.html#parameter-attributes",
    "title": " plotnine.scale_fill_continuous",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_fill_brewer.html",
    "href": "reference/scale_fill_brewer.html",
    "title": " plotnine.scale_fill_brewer",
    "section": "",
    "text": "scale_fill_brewer(\n    type=\"seq\",\n    palette=1,\n    direction=1,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_fill_brewer.html#init-parameters",
    "href": "reference/scale_fill_brewer.html#init-parameters",
    "title": " plotnine.scale_fill_brewer",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ntype: Literal['diverging', 'qualitative', 'sequential', 'div', 'qual', 'seq'] = 'seq'\n\nType of data\n\npalette: int | str = 1\n\nIf a string, will use that named palette. If a number, will index into the list of palettes of appropriate type.\n\ndirection: Literal[1, -1] = 1\n\nSets the order of colors in the scale. If 1, colors are as output brewer_pal. If -1, the order of colors is reversed."
  },
  {
    "objectID": "reference/scale_fill_brewer.html#parameter-attributes",
    "href": "reference/scale_fill_brewer.html#parameter-attributes",
    "title": " plotnine.scale_fill_brewer",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_datetime.html",
    "href": "reference/scale_datetime.html",
    "title": " plotnine.scales.scale_datetime.scale_datetime",
    "section": "",
    "text": "scale_datetime(\n    date_breaks=None,\n    date_labels=None,\n    date_minor_breaks=None,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"datetime\"\n)"
  },
  {
    "objectID": "reference/scale_datetime.html#init-parameters",
    "href": "reference/scale_datetime.html#init-parameters",
    "title": " plotnine.scales.scale_datetime.scale_datetime",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ndate_breaks: str | None = None\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\ndate_labels: str | None = None\n\nFormat string for the labels. See strftime. If specified, date_labels takes precedence over labels.\n\ndate_minor_breaks: str | None = None\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks."
  },
  {
    "objectID": "reference/scale_datetime.html#parameter-attributes",
    "href": "reference/scale_datetime.html#parameter-attributes",
    "title": " plotnine.scales.scale_datetime.scale_datetime",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: GuideTypeT\n\nWhether to include a legend\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"datetime\""
  },
  {
    "objectID": "reference/scale_colour_manual.html",
    "href": "reference/scale_colour_manual.html",
    "title": " plotnine.scale_colour_manual",
    "section": "",
    "text": "scale_colour_manual(\n    values,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_colour_manual.html#init-parameters",
    "href": "reference/scale_colour_manual.html#init-parameters",
    "title": " plotnine.scale_colour_manual",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nvalues: Sequence[Any] | dict[Any, Any] \n\nColors that make up the palette. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to colors."
  },
  {
    "objectID": "reference/scale_colour_manual.html#parameter-attributes",
    "href": "reference/scale_colour_manual.html#parameter-attributes",
    "title": " plotnine.scale_colour_manual",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\n\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_color_manual.html",
    "href": "reference/scale_color_manual.html",
    "title": " plotnine.scale_color_manual",
    "section": "",
    "text": "scale_color_manual(\n    values,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_color_manual.html#init-parameters",
    "href": "reference/scale_color_manual.html#init-parameters",
    "title": " plotnine.scale_color_manual",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nvalues: Sequence[Any] | dict[Any, Any] \n\nColors that make up the palette. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to colors."
  },
  {
    "objectID": "reference/scale_color_manual.html#parameter-attributes",
    "href": "reference/scale_color_manual.html#parameter-attributes",
    "title": " plotnine.scale_color_manual",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\n\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_color_hue.html",
    "href": "reference/scale_color_hue.html",
    "title": " plotnine.scale_color_hue",
    "section": "",
    "text": "scale_color_hue(\n    h=0.01,\n    l=0.6,\n    s=0.65,\n    color_space=\"hls\",\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_color_hue.html#init-parameters",
    "href": "reference/scale_color_hue.html#init-parameters",
    "title": " plotnine.scale_color_hue",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nh: float = 0.01\n\nHue. Must be in the range [0, 1]\n\nl: float = 0.6\n\nLightness. Must be in the range [0, 1]\n\ns: float = 0.65\n\nSaturation. Must be in the range [0, 1]\n\ncolor_space: Literal['hls', 'hsluv'] = 'hls'\n\nColor space to use. Should be one of hls or hsluv. https://www.hsluv.org/"
  },
  {
    "objectID": "reference/scale_color_hue.html#parameter-attributes",
    "href": "reference/scale_color_hue.html#parameter-attributes",
    "title": " plotnine.scale_color_hue",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_color_gray.html",
    "href": "reference/scale_color_gray.html",
    "title": " plotnine.scale_color_gray",
    "section": "",
    "text": "scale_color_gray(\n    start=0.2,\n    end=0.8,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_color_gray.html#init-parameters",
    "href": "reference/scale_color_gray.html#init-parameters",
    "title": " plotnine.scale_color_gray",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nstart: float = 0.2\n\nGrey value at low end of palette.\n\nend: float = 0.8\n\nGrey value at high end of palette"
  },
  {
    "objectID": "reference/scale_color_gray.html#parameter-attributes",
    "href": "reference/scale_color_gray.html#parameter-attributes",
    "title": " plotnine.scale_color_gray",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_color_gradient2.html",
    "href": "reference/scale_color_gradient2.html",
    "title": " plotnine.scale_color_gradient2",
    "section": "",
    "text": "scale_color_gradient2(\n    low=\"#832424\",\n    mid=\"#FFFFFF\",\n    high=\"#3A3A98\",\n    midpoint=0,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_color_gradient2.html#init-parameters",
    "href": "reference/scale_color_gradient2.html#init-parameters",
    "title": " plotnine.scale_color_gradient2",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nlow: str = '#832424'\n\nLow color.\n\nmid: str = '#FFFFFF'\n\nMid-point color.\n\nhigh: str = '#3A3A98'\n\nHigh color.\n\nmidpoint: float = 0\n\nMid point of the input data range."
  },
  {
    "objectID": "reference/scale_color_gradient2.html#parameter-attributes",
    "href": "reference/scale_color_gradient2.html#parameter-attributes",
    "title": " plotnine.scale_color_gradient2",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_color_gradient2.html#see-also",
    "href": "reference/scale_color_gradient2.html#see-also",
    "title": " plotnine.scale_color_gradient2",
    "section": "See Also",
    "text": "See Also\n\nscale_color_gradient\n\n\n\nscale_color_gradientn"
  },
  {
    "objectID": "reference/scale_color_distiller.html",
    "href": "reference/scale_color_distiller.html",
    "title": " plotnine.scale_color_distiller",
    "section": "",
    "text": "scale_color_distiller(\n    type=\"seq\",\n    palette=1,\n    values=None,\n    direction=1,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_color_distiller.html#init-parameters",
    "href": "reference/scale_color_distiller.html#init-parameters",
    "title": " plotnine.scale_color_distiller",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ntype: Literal['diverging', 'qualitative', 'sequential', 'div', 'qual', 'seq'] = 'seq'\n\nType of data\n\npalette: int | str = 1\n\nIf a string, will use that named palette. If a number, will index into the list of palettes of appropriate type.\n\nvalues: Sequence[float] | None = None\n\nList of points in the range [0, 1] at which to place each color. Must be the same size as colors. Default to evenly space the colors\n\ndirection: Literal[1, -1] = 1\n\nSets the order of colors in the scale. If 1, colors are as output brewer_pal. If -1, the order of colors is reversed."
  },
  {
    "objectID": "reference/scale_color_distiller.html#parameter-attributes",
    "href": "reference/scale_color_distiller.html#parameter-attributes",
    "title": " plotnine.scale_color_distiller",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_color_desaturate.html",
    "href": "reference/scale_color_desaturate.html",
    "title": " plotnine.scale_color_desaturate",
    "section": "",
    "text": "scale_color_desaturate(\n    color=\"red\",\n    prop=0,\n    reverse=False,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_color_desaturate.html#init-parameters",
    "href": "reference/scale_color_desaturate.html#init-parameters",
    "title": " plotnine.scale_color_desaturate",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ncolor: str = 'red'\n\nColor to desaturate\n\nprop: float = 0\n\nSaturation channel of color will be multiplied by this value.\n\nreverse: bool = False\n\nWhether to go from color to desaturated color or desaturated color to color."
  },
  {
    "objectID": "reference/scale_color_desaturate.html#parameter-attributes",
    "href": "reference/scale_color_desaturate.html#parameter-attributes",
    "title": " plotnine.scale_color_desaturate",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_color_continuous.html",
    "href": "reference/scale_color_continuous.html",
    "title": " plotnine.scale_color_continuous",
    "section": "",
    "text": "scale_color_continuous(\n    cmap_name=\"viridis\",\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_color_continuous.html#init-parameters",
    "href": "reference/scale_color_continuous.html#init-parameters",
    "title": " plotnine.scale_color_continuous",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ncmap_name: str = 'viridis'\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see colormaps."
  },
  {
    "objectID": "reference/scale_color_continuous.html#parameter-attributes",
    "href": "reference/scale_color_continuous.html#parameter-attributes",
    "title": " plotnine.scale_color_continuous",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_color_brewer.html",
    "href": "reference/scale_color_brewer.html",
    "title": " plotnine.scale_color_brewer",
    "section": "",
    "text": "scale_color_brewer(\n    type=\"seq\",\n    palette=1,\n    direction=1,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_color_brewer.html#init-parameters",
    "href": "reference/scale_color_brewer.html#init-parameters",
    "title": " plotnine.scale_color_brewer",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ntype: Literal['diverging', 'qualitative', 'sequential', 'div', 'qual', 'seq'] = 'seq'\n\nType of data\n\npalette: int | str = 1\n\nIf a string, will use that named palette. If a number, will index into the list of palettes of appropriate type.\n\ndirection: Literal[1, -1] = 1\n\nSets the order of colors in the scale. If 1, colors are as output brewer_pal. If -1, the order of colors is reversed."
  },
  {
    "objectID": "reference/scale_color_brewer.html#parameter-attributes",
    "href": "reference/scale_color_brewer.html#parameter-attributes",
    "title": " plotnine.scale_color_brewer",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_alpha_identity.html",
    "href": "reference/scale_alpha_identity.html",
    "title": " plotnine.scale_alpha_identity",
    "section": "",
    "text": "scale_alpha_identity(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_alpha_identity.html#parameter-attributes",
    "href": "reference/scale_alpha_identity.html#parameter-attributes",
    "title": " plotnine.scale_alpha_identity",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_alpha_datetime.html",
    "href": "reference/scale_alpha_datetime.html",
    "title": " plotnine.scale_alpha_datetime",
    "section": "",
    "text": "scale_alpha_datetime(\n    date_breaks=None,\n    date_labels=None,\n    date_minor_breaks=None,\n    range=(0.1, 1),\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"datetime\"\n)"
  },
  {
    "objectID": "reference/scale_alpha_datetime.html#init-parameters",
    "href": "reference/scale_alpha_datetime.html#init-parameters",
    "title": " plotnine.scale_alpha_datetime",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ndate_breaks: str | None = None\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\ndate_labels: str | None = None\n\nFormat string for the labels. See strftime. If specified, date_labels takes precedence over labels.\n\ndate_minor_breaks: str | None = None\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\nrange: tuple[float, float] = (0.1, 1)\n\nRange ([Minimum, Maximum]) of output alpha values. Should be between 0 and 1."
  },
  {
    "objectID": "reference/scale_alpha_datetime.html#parameter-attributes",
    "href": "reference/scale_alpha_datetime.html#parameter-attributes",
    "title": " plotnine.scale_alpha_datetime",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"datetime\""
  },
  {
    "objectID": "reference/scale_alpha.html",
    "href": "reference/scale_alpha.html",
    "title": " plotnine.scale_alpha",
    "section": "",
    "text": "scale_alpha(\n    range=(0.1, 1),\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_alpha.html#init-parameters",
    "href": "reference/scale_alpha.html#init-parameters",
    "title": " plotnine.scale_alpha",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nrange: tuple[float, float] = (0.1, 1)\n\nRange ([Minimum, Maximum]) of output alpha values. Should be between 0 and 1."
  },
  {
    "objectID": "reference/scale_alpha.html#parameter-attributes",
    "href": "reference/scale_alpha.html#parameter-attributes",
    "title": " plotnine.scale_alpha",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/save_as_pdf_pages.html",
    "href": "reference/save_as_pdf_pages.html",
    "title": " plotnine.save_as_pdf_pages",
    "section": "",
    "text": "save_as_pdf_pages(plots, filename=None, path=None, verbose=True, kwargs={})"
  },
  {
    "objectID": "reference/save_as_pdf_pages.html#parameters",
    "href": "reference/save_as_pdf_pages.html#parameters",
    "title": " plotnine.save_as_pdf_pages",
    "section": "Parameters",
    "text": "Parameters\n\n\nplots : Iterable[ggplot]\n\nPlot objects to write to file. plots may be either a collection such as a list or set\nbase_plot = ggplot(…)\nplots = [base_plot + ggtitle('%d of 3' % i) for i in range(1, 3)]\nsave_as_pdf_pages(plots)\nor, a generator that yields ggplot objects:\ndef myplots():\n    for i in range(1, 3):\n        yield ggplot(…) + ggtitle('%d of 3' % i)\nsave_as_pdf_pages(myplots())\n\nfilename : Optional[str | Path] = None\n\nFile name to write the plot to. If not specified, a name like “plotnine-save-.pdf” is used.\n\npath : str | None = None\n\nPath to save plot to (if you just want to set path and not filename).\n\nverbose : bool = True\n\nIf True, print the saving information.\n\nkwargs : Any = {}\n\nAdditional arguments to pass to savefig."
  },
  {
    "objectID": "reference/save_as_pdf_pages.html#notes",
    "href": "reference/save_as_pdf_pages.html#notes",
    "title": " plotnine.save_as_pdf_pages",
    "section": "Notes",
    "text": "Notes\nUsing pandas groupby methods, tidy data can be “faceted” across pages:\nfrom plotnine.data import mtcars\n\ndef facet_pages(column)\n    base_plot = [\n        aes(x=\"wt\", y=\"mpg\", label=\"name\"),\n        geom_text(),\n    ]\n    for label, group_data in mtcars.groupby(column):\n        yield ggplot(group_data) + base_plot + ggtitle(label)\n\nsave_as_pdf_pages(facet_pages('cyl'))\nUnlike save, save_as_pdf_pages does not process arguments for height or width. To set the figure size, add figure_size to the theme for some or all of the objects in plots:\nplot = ggplot(…)\n# The following are equivalent\nplot.save('filename.pdf', height=6, width=8)\nsave_as_pdf_pages([plot + theme(figure_size=(8, 6))])"
  },
  {
    "objectID": "reference/qplot.html",
    "href": "reference/qplot.html",
    "title": " plotnine.qplot",
    "section": "",
    "text": "qplot(\n    x=None,\n    y=None,\n    data=None,\n    facets=\"\",\n    margins=False,\n    geom=\"auto\",\n    xlim=None,\n    ylim=None,\n    log=None,\n    main=None,\n    xlab=None,\n    ylab=None,\n    asp=None,\n    kwargs={}\n)"
  },
  {
    "objectID": "reference/qplot.html#parameters",
    "href": "reference/qplot.html#parameters",
    "title": " plotnine.qplot",
    "section": "Parameters",
    "text": "Parameters\n\n\nx : Optional[str | Iterable[Any] | range] = None\n\nx aesthetic\n\ny : Optional[str | Iterable[Any] | range] = None\n\ny aesthetic\n\ndata : Optional[DataLike] = None\n\nData frame to use (optional). If not specified, will create one, extracting arrays from the current environment.\n\ngeom : str | list[str] | tuple[str] = \"auto\"\n\ngeom(s) to do the drawing. If auto, defaults to ‘point’ if x and y are specified or ‘histogram’ if only x is specified.\n\nfacets : str = \"\"\n\nFacets\n\nmargins : bool | list[str] = False\n\nvariable names to compute margins for. True will compute all possible margins. Depends on the facetting.\n\nxlim : Optional[tuple[float, float]] = None\n\nx-axis limits\n\nylim : Optional[tuple[float, float]] = None\n\ny-axis limits\n\nlog : Optional[Literal[\"x\", \"y\", \"xy\"]] = None\n\nWhich (if any) variables to log transform.\n\nmain : Optional[str] = None\n\nPlot title\n\nxlab : Optional[str] = None\n\nx-axis label\n\nylab : Optional[str] = None\n\ny-axis label\n\nasp : Optional[float] = None\n\nThe y/x aspect ratio.\n\n**kwargs : Any = {}\n\nArguments passed on to the geom."
  },
  {
    "objectID": "reference/qplot.html#returns",
    "href": "reference/qplot.html#returns",
    "title": " plotnine.qplot",
    "section": "Returns",
    "text": "Returns\n\n\nggplot\n\nggplot object"
  },
  {
    "objectID": "reference/position_stack.html",
    "href": "reference/position_stack.html",
    "title": " plotnine.position_stack",
    "section": "",
    "text": "position_stack(vjust=1, reverse=False)"
  },
  {
    "objectID": "reference/position_stack.html#parameters",
    "href": "reference/position_stack.html#parameters",
    "title": " plotnine.position_stack",
    "section": "Parameters",
    "text": "Parameters\n\n\nvjust : float = 1\n\nBy what fraction to avoid overlapping the lower object, where 0 gives a complete overlap and 1 gives no overlap.\n\nreverse : bool = False\n\nReverse the order of the stacked groups if true."
  },
  {
    "objectID": "reference/position_jitterdodge.html",
    "href": "reference/position_jitterdodge.html",
    "title": " plotnine.position_jitterdodge",
    "section": "",
    "text": "position_jitterdodge(\n    jitter_width=None, jitter_height=0, dodge_width=0.75, random_state=None\n)"
  },
  {
    "objectID": "reference/position_jitterdodge.html#parameters",
    "href": "reference/position_jitterdodge.html#parameters",
    "title": " plotnine.position_jitterdodge",
    "section": "Parameters",
    "text": "Parameters\n\n\njitter_width : Optional[float] = None\n\nProportion to jitter in horizontal direction. If None, 0.4 of the resolution of the data.\n\njitter_height : float = 0\n\nProportion to jitter in vertical direction.\n\ndodge_width : float = 0.75\n\nAmount to dodge in horizontal direction.\n\nrandom_state : Optional[int | np.random.RandomState] = None\n\nSeed or Random number generator to use. If None, then numpy global generator numpy.random is used."
  },
  {
    "objectID": "reference/position_identity.html",
    "href": "reference/position_identity.html",
    "title": " plotnine.position_identity",
    "section": "",
    "text": "position_identity()\n\n\nDo not adjust the position"
  },
  {
    "objectID": "reference/position_dodge2.html",
    "href": "reference/position_dodge2.html",
    "title": " plotnine.position_dodge2",
    "section": "",
    "text": "position_dodge2(width=None, preserve=\"total\", padding=0.1, reverse=False)"
  },
  {
    "objectID": "reference/position_dodge2.html#parameters",
    "href": "reference/position_dodge2.html#parameters",
    "title": " plotnine.position_dodge2",
    "section": "Parameters",
    "text": "Parameters\n\n\nwidth : Optional[float] = None\n\nDodging width, when different to the width of the individual elements. This is useful when you want to align narrow geoms with wider geoms\n\npreserve : Literal[\"total\", \"single\"] = \"total\"\n\nShould dodging preserve the total width of all elements at a position, or the width of a single element?\n\npadding : float = 0.1\n\nPadding between elements at the same position. Elements are shrunk by this proportion to allow space between them.\n\nreverse : bool = False\n\nReverse the default ordering of the groups. This is useful if you’re rotating both the plot and legend."
  },
  {
    "objectID": "reference/position.html",
    "href": "reference/position.html",
    "title": " plotnine.positions.position.position",
    "section": "",
    "text": "position()"
  },
  {
    "objectID": "reference/position.html#methods",
    "href": "reference/position.html#methods",
    "title": " plotnine.positions.position.position",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\ncollide\nCalculate boundaries of geometry object\n\n\ncollide2\nCalculate boundaries of geometry object\n\n\ncompute_layer\nCompute position for the layer in all panels\n\n\ncompute_panel\nPositions must override this function\n\n\nfrom_geom\nCreate and return a position object for the geom\n\n\nsetup_data\nVerify & return data\n\n\nsetup_params\nVerify, modify & return a copy of the params.\n\n\nstrategy\nCalculate boundaries of geometry object\n\n\ntransform_position\nTransform all the variables that map onto the x and y scales.\n\n\n\n\n collide \n\ncollide(data, params)\n\n\nCalculate boundaries of geometry object\nUses Strategy\n\n\n\n collide2 \n\ncollide2(data, params)\n\n\nCalculate boundaries of geometry object\nUses Strategy\n\n\n\n compute_layer \n\ncompute_layer(data, params, layout)\n\n\nCompute position for the layer in all panels\nPositions can override this function instead of compute_panel if the position computations are independent of the panel. i.e when not colliding\n\n\n\n compute_panel \n\ncompute_panel(data, scales, params)\n\n\nPositions must override this function\n\n\nNotes\nMake necessary adjustments to the columns in the dataframe.\nCreate the position transformation functions and use self.transform_position() do the rest.\n\n\nSee Also\n\ncompute_panel\n\n\n\n\n\n\n\n from_geom \n\nfrom_geom(geom)\n\n\nCreate and return a position object for the geom\n\n\nParameters\n\n\ngeom : geom\n\nAn instantiated geom object.\n\n\n\n\n\nReturns\n\n\nout : position\n\nA position object\n\n\n\n\n\nRaises\n\n\nPlotnineError\n\nIf unable to create a position.\n\n\n\n\n\n\n setup_data\n\nsetup_data(data, params)\n\n\nVerify & return data\n\n\n\n setup_params\n\nsetup_params(data)\n\n\nVerify, modify & return a copy of the params.\n\n\n\n strategy \n\nstrategy(data, params)\n\n\nCalculate boundaries of geometry object\n\n\n\n transform_position \n\ntransform_position(data, trans_x=None, trans_y=None)\n\n\nTransform all the variables that map onto the x and y scales.\n\n\nParameters\n\n\ndata : dataframe\n\nData to transform\n\ntrans_x : callable = None\n\nTransforms x scale mappings Takes one argument, either a scalar or an array-type\n\ntrans_y : callable = None\n\nTransforms y scale mappings Takes one argument, either a scalar or an array-type"
  },
  {
    "objectID": "reference/plot_subtitle.html",
    "href": "reference/plot_subtitle.html",
    "title": " plotnine.themes.themeable.plot_subtitle",
    "section": "",
    "text": "plot_subtitle(theme_element)"
  },
  {
    "objectID": "reference/plot_subtitle.html#parameters",
    "href": "reference/plot_subtitle.html#parameters",
    "title": " plotnine.themes.themeable.plot_subtitle",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/plot_subtitle.html#notes",
    "href": "reference/plot_subtitle.html#notes",
    "title": " plotnine.themes.themeable.plot_subtitle",
    "section": "Notes",
    "text": "Notes\nThe default horizontal alignment for the subtitle is left. And when it is present, by default it drags the title to the left. The subtitle drags the title to the left only if none of the two has their horizontal alignment are set."
  },
  {
    "objectID": "reference/plot_margin_right.html",
    "href": "reference/plot_margin_right.html",
    "title": " plotnine.themes.themeable.plot_margin_right",
    "section": "",
    "text": "plot_margin_right(theme_element)"
  },
  {
    "objectID": "reference/plot_margin_right.html#parameters",
    "href": "reference/plot_margin_right.html#parameters",
    "title": " plotnine.themes.themeable.plot_margin_right",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nMust be in the [0, 1] range. It is specified as a fraction of the figure width and figure height."
  },
  {
    "objectID": "reference/plot_margin_bottom.html",
    "href": "reference/plot_margin_bottom.html",
    "title": " plotnine.themes.themeable.plot_margin_bottom",
    "section": "",
    "text": "plot_margin_bottom(theme_element)"
  },
  {
    "objectID": "reference/plot_margin_bottom.html#parameters",
    "href": "reference/plot_margin_bottom.html#parameters",
    "title": " plotnine.themes.themeable.plot_margin_bottom",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nMust be in the [0, 1] range. It is specified as a fraction of the figure width and figure height."
  },
  {
    "objectID": "reference/plot_caption.html",
    "href": "reference/plot_caption.html",
    "title": " plotnine.themes.themeable.plot_caption",
    "section": "",
    "text": "plot_caption(theme_element)"
  },
  {
    "objectID": "reference/plot_caption.html#parameters",
    "href": "reference/plot_caption.html#parameters",
    "title": " plotnine.themes.themeable.plot_caption",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/panel_spacing_y.html",
    "href": "reference/panel_spacing_y.html",
    "title": " plotnine.themes.themeable.panel_spacing_y",
    "section": "",
    "text": "panel_spacing_y(theme_element)"
  },
  {
    "objectID": "reference/panel_spacing_y.html#parameters",
    "href": "reference/panel_spacing_y.html#parameters",
    "title": " plotnine.themes.themeable.panel_spacing_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nSize as a fraction of the figure width."
  },
  {
    "objectID": "reference/panel_spacing_y.html#notes",
    "href": "reference/panel_spacing_y.html#notes",
    "title": " plotnine.themes.themeable.panel_spacing_y",
    "section": "Notes",
    "text": "Notes\nIt is deliberate to have the vertical spacing be a fraction of the width. That means that when panel_spacing_x is the equal panel_spacing_x, the spaces in both directions will be equal."
  },
  {
    "objectID": "reference/panel_spacing.html",
    "href": "reference/panel_spacing.html",
    "title": " plotnine.themes.themeable.panel_spacing",
    "section": "",
    "text": "panel_spacing(theme_element)"
  },
  {
    "objectID": "reference/panel_spacing.html#parameters",
    "href": "reference/panel_spacing.html#parameters",
    "title": " plotnine.themes.themeable.panel_spacing",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nSize as a fraction of the figure’s dimension."
  },
  {
    "objectID": "reference/panel_grid_minor_y.html",
    "href": "reference/panel_grid_minor_y.html",
    "title": " plotnine.themes.themeable.panel_grid_minor_y",
    "section": "",
    "text": "panel_grid_minor_y(theme_element)"
  },
  {
    "objectID": "reference/panel_grid_minor_y.html#parameters",
    "href": "reference/panel_grid_minor_y.html#parameters",
    "title": " plotnine.themes.themeable.panel_grid_minor_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/panel_grid_minor.html",
    "href": "reference/panel_grid_minor.html",
    "title": " plotnine.themes.themeable.panel_grid_minor",
    "section": "",
    "text": "panel_grid_minor(theme_element)"
  },
  {
    "objectID": "reference/panel_grid_minor.html#parameters",
    "href": "reference/panel_grid_minor.html#parameters",
    "title": " plotnine.themes.themeable.panel_grid_minor",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/panel_grid_major_x.html",
    "href": "reference/panel_grid_major_x.html",
    "title": " plotnine.themes.themeable.panel_grid_major_x",
    "section": "",
    "text": "panel_grid_major_x(theme_element)"
  },
  {
    "objectID": "reference/panel_grid_major_x.html#parameters",
    "href": "reference/panel_grid_major_x.html#parameters",
    "title": " plotnine.themes.themeable.panel_grid_major_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/panel_grid.html",
    "href": "reference/panel_grid.html",
    "title": " plotnine.themes.themeable.panel_grid",
    "section": "",
    "text": "panel_grid(theme_element)"
  },
  {
    "objectID": "reference/panel_grid.html#parameters",
    "href": "reference/panel_grid.html#parameters",
    "title": " plotnine.themes.themeable.panel_grid",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/panel_background.html",
    "href": "reference/panel_background.html",
    "title": " plotnine.themes.themeable.panel_background",
    "section": "",
    "text": "panel_background(theme_element)"
  },
  {
    "objectID": "reference/panel_background.html#parameters",
    "href": "reference/panel_background.html#parameters",
    "title": " plotnine.themes.themeable.panel_background",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_rect"
  },
  {
    "objectID": "reference/mtcars.html",
    "href": "reference/mtcars.html",
    "title": " plotnine.data.mtcars",
    "section": "",
    "text": "mtcars = pd.read_csv(DATA_DIR / \"mtcars.csv\")"
  },
  {
    "objectID": "reference/mtcars.html#description",
    "href": "reference/mtcars.html#description",
    "title": " plotnine.data.mtcars",
    "section": "Description",
    "text": "Description\nThe data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models)."
  },
  {
    "objectID": "reference/mtcars.html#format",
    "href": "reference/mtcars.html#format",
    "title": " plotnine.data.mtcars",
    "section": "Format",
    "text": "Format\nA data frame with 32 observations on 11 variables.\n\n\n\nColumn\nDescription\n\n\n\n\nmpg\nMiles/(US) gallon\n\n\ncyl\nNumber of cylinders\n\n\ndisp\nDisplacement (cu.in.)\n\n\nhp\nGross horsepower\n\n\ndrat\nRear axle ratio\n\n\nwt\nWeight (1000 lbs)\n\n\nqsec\n1/4 mile time\n\n\nvs\nV/S\n\n\nam\nTransmission (0 = automatic, 1 = manual)\n\n\ngear\nNumber of forward gears\n\n\ncarb\nNumber of carburetors"
  },
  {
    "objectID": "reference/mtcars.html#source",
    "href": "reference/mtcars.html#source",
    "title": " plotnine.data.mtcars",
    "section": "Source",
    "text": "Source\nHenderson and Velleman (1981), Building multiple regression models interactively. Biometrics, 37, 391–411."
  },
  {
    "objectID": "reference/mpg.html",
    "href": "reference/mpg.html",
    "title": " plotnine.data.mpg",
    "section": "",
    "text": "mpg = pd.read_csv(DATA_DIR / \"mpg.csv\")"
  },
  {
    "objectID": "reference/mpg.html#description",
    "href": "reference/mpg.html#description",
    "title": " plotnine.data.mpg",
    "section": "Description",
    "text": "Description\nThis dataset contains a subset of the fuel economy data that the EPA makes available on http://fueleconomy.gov. It contains only models which had a new release every year between 1999 and 2008 - this was used as a proxy for the popularity of the car."
  },
  {
    "objectID": "reference/mpg.html#format",
    "href": "reference/mpg.html#format",
    "title": " plotnine.data.mpg",
    "section": "Format",
    "text": "Format\nA data frame with 234 rows and 11 variables\n\n\n\n\n\n\n\nColumn\nDescription\n\n\n\n\nmanufacturer\n\n\n\nmodel\n\n\n\ndispl\nengine displacement, in litres\n\n\nyear\n\n\n\ncyl\nnumber of cylinders\n\n\ntrans\ntype of transmission\n\n\ndrv\nf = front-wheel drive r = rear wheel drive 4 = 4wd\n\n\ncty\ncity miles per gallon\n\n\nhwy\nhighway miles per gallon\n\n\nfl\n\n\n\nclass"
  },
  {
    "objectID": "reference/meat.html",
    "href": "reference/meat.html",
    "title": " plotnine.data.meat",
    "section": "",
    "text": "meat = pd.read_csv(DATA_DIR / \"meat.csv\", parse_dates=[0])"
  },
  {
    "objectID": "reference/meat.html#source",
    "href": "reference/meat.html#source",
    "title": " plotnine.data.meat",
    "section": "Source",
    "text": "Source\nLivestock and Meat Dosmestic Data from the Economic Research Service of the U.S. DEPARTMENT OF AGRICULTURE."
  },
  {
    "objectID": "reference/line.html",
    "href": "reference/line.html",
    "title": " plotnine.themes.themeable.line",
    "section": "",
    "text": "line(theme_element)"
  },
  {
    "objectID": "reference/line.html#parameters",
    "href": "reference/line.html#parameters",
    "title": " plotnine.themes.themeable.line",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/legend_title_position.html",
    "href": "reference/legend_title_position.html",
    "title": " plotnine.themes.themeable.legend_title_position",
    "section": "",
    "text": "legend_title_position(theme_element)"
  },
  {
    "objectID": "reference/legend_title_position.html#parameters",
    "href": "reference/legend_title_position.html#parameters",
    "title": " plotnine.themes.themeable.legend_title_position",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : Literal[\"top\", \"bottom\", \"left\", \"right\"] | None\n\nPosition of the legend title. The default depends on the position of the legend."
  },
  {
    "objectID": "reference/legend_ticks_length.html",
    "href": "reference/legend_ticks_length.html",
    "title": " plotnine.themes.themeable.legend_ticks_length",
    "section": "",
    "text": "legend_ticks_length(theme_element)"
  },
  {
    "objectID": "reference/legend_ticks_length.html#parameters",
    "href": "reference/legend_ticks_length.html#parameters",
    "title": " plotnine.themes.themeable.legend_ticks_length",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nA good value should be in the range [0, 0.5]."
  },
  {
    "objectID": "reference/legend_text_legend.html",
    "href": "reference/legend_text_legend.html",
    "title": " plotnine.themes.themeable.legend_text_legend",
    "section": "",
    "text": "legend_text_legend(theme_element)"
  },
  {
    "objectID": "reference/legend_text_legend.html#parameters",
    "href": "reference/legend_text_legend.html#parameters",
    "title": " plotnine.themes.themeable.legend_text_legend",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/legend_text_legend.html#notes",
    "href": "reference/legend_text_legend.html#notes",
    "title": " plotnine.themes.themeable.legend_text_legend",
    "section": "Notes",
    "text": "Notes\nHorizontal alignment ha has no effect when the text is to the left or to the right. Likewise vertical alignment va has no effect when the text at the top or the bottom."
  },
  {
    "objectID": "reference/legend_text.html",
    "href": "reference/legend_text.html",
    "title": " plotnine.themes.themeable.legend_text",
    "section": "",
    "text": "legend_text(theme_element)"
  },
  {
    "objectID": "reference/legend_text.html#parameters",
    "href": "reference/legend_text.html#parameters",
    "title": " plotnine.themes.themeable.legend_text",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/legend_position_inside.html",
    "href": "reference/legend_position_inside.html",
    "title": " plotnine.themes.themeable.legend_position_inside",
    "section": "",
    "text": "legend_position_inside(theme_element)"
  },
  {
    "objectID": "reference/legend_position_inside.html#parameters",
    "href": "reference/legend_position_inside.html#parameters",
    "title": " plotnine.themes.themeable.legend_position_inside",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : tuple[float, float]\n\nWhere to place legends that are inside the panels / facets area. The values should be in the range [0, 1]. The default is to put it in the center ((.5, .5)) of the panels area."
  },
  {
    "objectID": "reference/legend_margin.html",
    "href": "reference/legend_margin.html",
    "title": " plotnine.themes.themeable.legend_margin",
    "section": "",
    "text": "legend_margin(theme_element)"
  },
  {
    "objectID": "reference/legend_margin.html#parameters",
    "href": "reference/legend_margin.html#parameters",
    "title": " plotnine.themes.themeable.legend_margin",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nValue in points"
  },
  {
    "objectID": "reference/legend_key_spacing_y.html",
    "href": "reference/legend_key_spacing_y.html",
    "title": " plotnine.themes.themeable.legend_key_spacing_y",
    "section": "",
    "text": "legend_key_spacing_y(theme_element)"
  },
  {
    "objectID": "reference/legend_key_spacing_y.html#parameters",
    "href": "reference/legend_key_spacing_y.html#parameters",
    "title": " plotnine.themes.themeable.legend_key_spacing_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : int\n\nSize in points"
  },
  {
    "objectID": "reference/legend_key_spacing.html",
    "href": "reference/legend_key_spacing.html",
    "title": " plotnine.themes.themeable.legend_key_spacing",
    "section": "",
    "text": "legend_key_spacing(theme_element)"
  },
  {
    "objectID": "reference/legend_key_spacing.html#parameters",
    "href": "reference/legend_key_spacing.html#parameters",
    "title": " plotnine.themes.themeable.legend_key_spacing",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : int\n\nSize in points"
  },
  {
    "objectID": "reference/legend_key_height.html",
    "href": "reference/legend_key_height.html",
    "title": " plotnine.themes.themeable.legend_key_height",
    "section": "",
    "text": "legend_key_height(theme_element)"
  },
  {
    "objectID": "reference/legend_key_height.html#parameters",
    "href": "reference/legend_key_height.html#parameters",
    "title": " plotnine.themes.themeable.legend_key_height",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nValue in points."
  },
  {
    "objectID": "reference/legend_justification_top.html",
    "href": "reference/legend_justification_top.html",
    "title": " plotnine.themes.themeable.legend_justification_top",
    "section": "",
    "text": "legend_justification_top(theme_element)"
  },
  {
    "objectID": "reference/legend_justification_top.html#parameters",
    "href": "reference/legend_justification_top.html#parameters",
    "title": " plotnine.themes.themeable.legend_justification_top",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : Literal[\"left\", \"center\", \"right\"] | float\n\nHow to justify the entire group with 1 or more guides. i.e. How to slide the legend along the top row. If a float, it should be in the range [0, 1], where 0 is \"left\" and 1 is \"right\"."
  },
  {
    "objectID": "reference/legend_justification_left.html",
    "href": "reference/legend_justification_left.html",
    "title": " plotnine.themes.themeable.legend_justification_left",
    "section": "",
    "text": "legend_justification_left(theme_element)"
  },
  {
    "objectID": "reference/legend_justification_left.html#parameters",
    "href": "reference/legend_justification_left.html#parameters",
    "title": " plotnine.themes.themeable.legend_justification_left",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : Literal[\"bottom\", \"center\", \"top\"] | float\n\nHow to justify the entire group with 1 or more guides. i.e. How to slide the legend along the left column. If a float, it should be in the range [0, 1], where 0 is \"bottom\" and 1 is \"top\"."
  },
  {
    "objectID": "reference/legend_justification_bottom.html",
    "href": "reference/legend_justification_bottom.html",
    "title": " plotnine.themes.themeable.legend_justification_bottom",
    "section": "",
    "text": "legend_justification_bottom(theme_element)"
  },
  {
    "objectID": "reference/legend_justification_bottom.html#parameters",
    "href": "reference/legend_justification_bottom.html#parameters",
    "title": " plotnine.themes.themeable.legend_justification_bottom",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : Literal[\"left\", \"center\", \"right\"] | float\n\nHow to justify the entire group with 1 or more guides. i.e. How to slide the legend along the bottom row. If a float, it should be in the range [0, 1], where 0 is \"left\" and 1 is \"right\"."
  },
  {
    "objectID": "reference/legend_frame.html",
    "href": "reference/legend_frame.html",
    "title": " plotnine.themes.themeable.legend_frame",
    "section": "",
    "text": "legend_frame(theme_element)"
  },
  {
    "objectID": "reference/legend_frame.html#parameters",
    "href": "reference/legend_frame.html#parameters",
    "title": " plotnine.themes.themeable.legend_frame",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_rect"
  },
  {
    "objectID": "reference/legend_box_spacing.html",
    "href": "reference/legend_box_spacing.html",
    "title": " plotnine.themes.themeable.legend_box_spacing",
    "section": "",
    "text": "legend_box_spacing(theme_element)"
  },
  {
    "objectID": "reference/legend_box_spacing.html#parameters",
    "href": "reference/legend_box_spacing.html#parameters",
    "title": " plotnine.themes.themeable.legend_box_spacing",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nValue in points."
  },
  {
    "objectID": "reference/legend_box_just.html",
    "href": "reference/legend_box_just.html",
    "title": " plotnine.themes.themeable.legend_box_just",
    "section": "",
    "text": "legend_box_just(theme_element)"
  },
  {
    "objectID": "reference/legend_box_just.html#parameters",
    "href": "reference/legend_box_just.html#parameters",
    "title": " plotnine.themes.themeable.legend_box_just",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : Literal[\"left\", \"right\", \"center\", \"top\", \"bottom\", \"baseline\"] = None\n\nIf None, the value that will apply depends on legend_box."
  },
  {
    "objectID": "reference/legend_box.html",
    "href": "reference/legend_box.html",
    "title": " plotnine.themes.themeable.legend_box",
    "section": "",
    "text": "legend_box(theme_element)"
  },
  {
    "objectID": "reference/legend_box.html#parameters",
    "href": "reference/legend_box.html#parameters",
    "title": " plotnine.themes.themeable.legend_box",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : Literal[\"vertical\", \"horizontal\"]\n\nWhether to stack up the legends vertically or horizontally."
  },
  {
    "objectID": "reference/layer.html",
    "href": "reference/layer.html",
    "title": " plotnine.layer.layer",
    "section": "",
    "text": "layer(\n    geom,\n    stat,\n    *,\n    mapping,\n    data,\n    position,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False\n)"
  },
  {
    "objectID": "reference/layer.html#parameters",
    "href": "reference/layer.html#parameters",
    "title": " plotnine.layer.layer",
    "section": "Parameters",
    "text": "Parameters\n\n\ngeom : geom\n\ngeom to used to draw this layer.\n\nstat : stat\n\nstat used for the statistical transformation of data in this layer\n\nmapping : aes\n\nAesthetic mappings.\n\ndata : Optional[LayerDataLike]\n\nData plotted in this layer. If None, the data from the ggplot object will be used.\n\nposition : position\n\nPosition object to adjust the geometries in this layer.\n\ninherit_aes : bool = True\n\nIf True inherit from the aesthetic mappings of the ggplot object.\n\nshow_legend : bool | dict[str, bool] | None = None\n\nWhether to make up and show a legend for the mappings of this layer. If None then an automatic/good choice is made\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even if the final image format is vector."
  },
  {
    "objectID": "reference/layer.html#notes",
    "href": "reference/layer.html#notes",
    "title": " plotnine.layer.layer",
    "section": "Notes",
    "text": "Notes\nThere is no benefit to manually creating a layer. You should always use a geom or stat."
  },
  {
    "objectID": "reference/layer.html#methods",
    "href": "reference/layer.html#methods",
    "title": " plotnine.layer.layer",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\ncompute_aesthetics\nReturn a dataframe where the columns match the aesthetic mappings\n\n\ncompute_position\nCompute the position of each geometric object\n\n\ncompute_statistic\nCompute & return statistics for this layer\n\n\ndraw\nDraw geom\n\n\nfinish_statistics\nPrepare/modify data for plotting\n\n\nfrom_geom\nCreate a layer given a geom\n\n\nmap_statistic\nMapping aesthetics to computed statistics\n\n\nsetup\nPrepare layer for the plot building\n\n\nsetup_data\nPrepare/modify data for plotting\n\n\nuse_defaults\nPrepare/modify data for plotting\n\n\n\n\n compute_aesthetics\n\ncompute_aesthetics(plot)\n\n\nReturn a dataframe where the columns match the aesthetic mappings\nTransformations like ‘factor(cyl)’ and other expression evaluation are made in here\n\n\n\n compute_position\n\ncompute_position(layout)\n\n\nCompute the position of each geometric object\nThis is in concert with the other objects in the panel depending on the position class of the geom\n\n\n\n compute_statistic\n\ncompute_statistic(layout)\n\n\nCompute & return statistics for this layer\n\n\n\n draw\n\ndraw(layout, coord)\n\n\nDraw geom\n\n\nParameters\n\n\nlayout : Layout\n\nLayout object created when the plot is getting built\n\ncoord : coord\n\nType of coordinate axes\n\n\n\n\n\n\n finish_statistics\n\nfinish_statistics()\n\n\nPrepare/modify data for plotting\n\n\n\n from_geom \n\nfrom_geom(geom)\n\n\nCreate a layer given a geom\n\n\nParameters\n\n\ngeom : geom\n\ngeom from which a layer will be created\n\n\n\n\n\nReturns\n\n\nout : layer\n\nLayer that represents the specific geom.\n\n\n\n\n\n\n map_statistic\n\nmap_statistic(plot)\n\n\nMapping aesthetics to computed statistics\n\n\n\n setup\n\nsetup(plot)\n\n\nPrepare layer for the plot building\nGive the layer access to the data, mapping and environment\n\n\n\n setup_data\n\nsetup_data()\n\n\nPrepare/modify data for plotting\n\n\n\n use_defaults\n\nuse_defaults(data, aes_modifiers)\n\n\nPrepare/modify data for plotting\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nData\n\naes_modifiers : dict[str, Any]\n\nExpression to evaluate and replace aesthetics in the data."
  },
  {
    "objectID": "reference/labeller.html",
    "href": "reference/labeller.html",
    "title": " plotnine.labeller",
    "section": "",
    "text": "labeller(\n    rows=None, cols=None, multi_line=True, default=\"label_value\", kwargs={}\n)"
  },
  {
    "objectID": "reference/labeller.html#parameters",
    "href": "reference/labeller.html#parameters",
    "title": " plotnine.labeller",
    "section": "Parameters",
    "text": "Parameters\n\n\nrows : str | callable = None\n\nHow to label the rows\n\ncols : str | callable = None\n\nHow to label the columns\n\nmulti_line : bool = True\n\nWhether to place each variable on a separate line\n\ndefault : str | callable = \"label_value\"\n\nFallback labelling function. If it is a string, it should be one of [\"label_value\", \"label_both\", \"label_context\"].\n\nkwargs : dict = {}\n\n{variable name : function | string} pairs for renaming variables. A function to rename the variable or a string name."
  },
  {
    "objectID": "reference/label_context.html",
    "href": "reference/label_context.html",
    "title": " plotnine.label_context",
    "section": "",
    "text": "label_context(label_info, multi_line=True, sep=\": \")"
  },
  {
    "objectID": "reference/label_context.html#parameters",
    "href": "reference/label_context.html#parameters",
    "title": " plotnine.label_context",
    "section": "Parameters",
    "text": "Parameters\n\n\nlabel_info : strip_label_details\n\nLabel information\n\nmulti_line : bool = True\n\nWhether to place each variable on a separate line\n\nsep : str = \": \"\n\nSeparation between variable name and value"
  },
  {
    "objectID": "reference/label_context.html#returns",
    "href": "reference/label_context.html#returns",
    "title": " plotnine.label_context",
    "section": "Returns",
    "text": "Returns\n\n\nout : str\n\nConcatenated label values (or pairs of variable names & values)"
  },
  {
    "objectID": "reference/huron.html",
    "href": "reference/huron.html",
    "title": " plotnine.data.huron",
    "section": "",
    "text": "huron = pd.read_csv(DATA_DIR / \"huron.csv\")"
  },
  {
    "objectID": "reference/huron.html#format",
    "href": "reference/huron.html#format",
    "title": " plotnine.data.huron",
    "section": "Format",
    "text": "Format\n\n\n\nColumn\nDescription\n\n\n\n\nyear\nYear\n\n\nlevel\nWater level\n\n\ndecade\nDecade\n\n\n\nSource**\nBrockwell, P. J. and Davis, R. A. (1991). Time Series and Forecasting Methods. Second edition. Springer, New York. Series A, page 555.\nBrockwell, P. J. and Davis, R. A. (1996). Introduction to Time Series and Forecasting. Springer, New York. Sections 5.1 and 7.6."
  },
  {
    "objectID": "reference/guide_legend.html",
    "href": "reference/guide_legend.html",
    "title": " plotnine.guide_legend",
    "section": "",
    "text": "guide_legend(\n    title=None,\n    theme=Theme(),\n    position=None,\n    direction=None,\n    reverse=False,\n    order=0,\n    nrow=None,\n    ncol=None,\n    byrow=False,\n    override_aes=dict()\n)"
  },
  {
    "objectID": "reference/guide_legend.html#parameter-attributes",
    "href": "reference/guide_legend.html#parameter-attributes",
    "title": " plotnine.guide_legend",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\ntitle: Optional[str] = None\n\nTitle of the guide. Default is the name of the aesthetic or the name specified using lab\n\ntheme: Theme = field(default_factory=Theme)\n\nA theme to style the guide. If None, the plots theme is used.\n\nposition: Optional[LegendPosition] = None\n\nWhere to place the guide relative to the panels.\n\ndirection: Optional[Orientation] = None\n\nDirection of the guide. The default is depends on legend_position.\n\nreverse: bool = False\n\nWhether to reverse the order of the legend keys.\n\norder: int = 0\n\nOrder of this guide among multiple guides.\n\nnrow: Optional[int] = None\n\nNumber of rows of legends.\n\nncol: Optional[int] = None\n\nNumber of columns of legends.\n\nbyrow: bool = False\n\nWhether to fill the legend row-wise or column-wise.\n\noverride_aes: dict[str, Any] = field(default_factory=dict)\n\nAesthetic parameters of legend key."
  },
  {
    "objectID": "reference/guide.html",
    "href": "reference/guide.html",
    "title": " plotnine.guides.guide.guide",
    "section": "",
    "text": "guide(\n    title=None,\n    theme=Theme(),\n    position=None,\n    direction=None,\n    reverse=False,\n    order=0\n)"
  },
  {
    "objectID": "reference/guide.html#parameter-attributes",
    "href": "reference/guide.html#parameter-attributes",
    "title": " plotnine.guides.guide.guide",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\ntitle: Optional[str] = None\n\nTitle of the guide. Default is the name of the aesthetic or the name specified using lab\n\ntheme: Theme = field(default_factory=Theme)\n\nA theme to style the guide. If None, the plots theme is used.\n\nposition: Optional[LegendPosition] = None\n\nWhere to place the guide relative to the panels.\n\ndirection: Optional[Orientation] = None\n\nDirection of the guide. The default is depends on legend_position.\n\nreverse: bool = False\n\nWhether to reverse the order of the legend keys.\n\norder: int = 0\n\nOrder of this guide among multiple guides."
  },
  {
    "objectID": "reference/guide.html#notes",
    "href": "reference/guide.html#notes",
    "title": " plotnine.guides.guide.guide",
    "section": "Notes",
    "text": "Notes\nAt the moment not all parameters have been fully implemented."
  },
  {
    "objectID": "reference/guide.html#methods",
    "href": "reference/guide.html#methods",
    "title": " plotnine.guides.guide.guide",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\ncreate_geoms\nCreate layers of geoms for the guide\n\n\ndraw\nDraw guide\n\n\nlegend_aesthetics\nReturn the aesthetics that contribute to the legend\n\n\nsetup\nSetup guide for drawing process\n\n\ntrain\nCreate the key for the guide\n\n\n\n\n create_geoms\n\ncreate_geoms()\n\n\nCreate layers of geoms for the guide\n\n\nReturns\n\n\nOptional[Self]\n\nself if geom layers were create or None of no geom layers were created.\n\n\n\n\n\n\n draw\n\ndraw()\n\n\nDraw guide\n\n\n\n legend_aesthetics\n\nlegend_aesthetics(layer)\n\n\nReturn the aesthetics that contribute to the legend\n\n\nParameters\n\n\nlayer : Layer\n\nLayer whose legend is to be drawn\n\n\n\n\n\nReturns\n\n\nmatched : list\n\nList of the names of the aethetics that contribute to the legend.\n\n\n\n\n\n\n setup\n\nsetup(guides)\n\n\nSetup guide for drawing process\n\n\n\n train\n\ntrain(scale, aesthetic=None)\n\n\nCreate the key for the guide\nReturns guide if training is successful"
  },
  {
    "objectID": "reference/ggplot.html",
    "href": "reference/ggplot.html",
    "title": " plotnine.ggplot",
    "section": "",
    "text": "ggplot(data=None, mapping=None)"
  },
  {
    "objectID": "reference/ggplot.html#parameters",
    "href": "reference/ggplot.html#parameters",
    "title": " plotnine.ggplot",
    "section": "Parameters",
    "text": "Parameters\n\n\ndata : Optional[DataLike] = None\n\nDefault data for plot. Every layer that does not have data of its own will use this one.\n\nmapping : Optional[aes] = None\n\nDefault aesthetics mapping for the plot. These will be used by all layers unless specifically overridden."
  },
  {
    "objectID": "reference/ggplot.html#notes",
    "href": "reference/ggplot.html#notes",
    "title": " plotnine.ggplot",
    "section": "Notes",
    "text": "Notes\nggplot object only have partial support for pickling. The mappings used by pickled objects should not reference variables in the namespace."
  },
  {
    "objectID": "reference/ggplot.html#methods",
    "href": "reference/ggplot.html#methods",
    "title": " plotnine.ggplot",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\n__add__\nAdd to ggplot from a list\n\n\n__iadd__\nAdd other to ggplot object\n\n\nshow\nShow plot using the matplotlib backend set by the user\n\n\ndraw\nRender the complete plot\n\n\nsave\nSave a ggplot object as an image file\n\n\nsave_helper\nCreate MPL figure that will be saved\n\n\n\n\n __add__\n\n__add__(other)\n\n\nAdd to ggplot from a list\n\n\nParameters\n\n\nother : PlotAddable | list[PlotAddable] | None\n\nEither an object that knows how to “radd” itself to a ggplot, or a list of such objects.\n\n\n\n\n\n\n __iadd__\n\n__iadd__(other)\n\n\nAdd other to ggplot object\n\n\nParameters\n\n\nother : PlotAddable | list[PlotAddable] | None\n\nEither an object that knows how to “radd” itself to a ggplot, or a list of such objects.\n\n\n\n\n\n\n show\n\nshow()\n\n\nShow plot using the matplotlib backend set by the user\nUsers should prefer this method instead of printing or repring the object.\n\n\n\n draw\n\ndraw(show=False)\n\n\nRender the complete plot\n\n\nParameters\n\n\nshow : bool = False\n\nWhether to show the plot.\n\n\n\n\n\nReturns\n\n\nFigure\n\nMatplotlib figure\n\n\n\n\n\n\n save\n\nsave(\n    filename=None,\n    format=None,\n    path=\"\",\n    width=None,\n    height=None,\n    units=\"in\",\n    dpi=None,\n    limitsize=None,\n    verbose=True,\n    kwargs={}\n)\n\n\nSave a ggplot object as an image file\n\n\nParameters\n\n\nfilename : Optional[str | Path | BytesIO] = None\n\nFile name to write the plot to. If not specified, a name like “plotnine-save-.” is used.\n\nformat : Optional[str] = None\n\nImage format to use, automatically extract from file name extension.\n\npath : str = \"\"\n\nPath to save plot to (if you just want to set path and not filename).\n\nwidth : Optional[float] = None\n\nWidth (defaults to value set by the theme). If specified the height must also be given.\n\nheight : Optional[float] = None\n\nHeight (defaults to value set by the theme). If specified the width must also be given.\n\nunits : str = \"in\"\n\nUnits for width and height when either one is explicitly specified (in, cm, or mm).\n\ndpi : Optional[int] = None\n\nDPI to use for raster graphics. If None, defaults to using the dpi of theme, if none is set then a dpi of 100.\n\nlimitsize : bool | None = None\n\nIf True (the default), save will not save images larger than 25x25 inches, to prevent the common error of specifying dimensions in pixels. The default value is from the option plotine.options.limitsize.\n\nverbose : bool = True\n\nIf True, print the saving information.\n\nkwargs : Any = {}\n\nAdditional arguments to pass to matplotlib savefig().\n\n\n\n\n\n\n save_helper\n\nsave_helper(\n    filename=None,\n    format=None,\n    path=None,\n    width=None,\n    height=None,\n    units=\"in\",\n    dpi=None,\n    limitsize=None,\n    verbose=True,\n    kwargs={}\n)\n\n\nCreate MPL figure that will be saved\n\n\nNotes\nThis method has the same arguments as save. Use it to get access to the figure that will be saved."
  },
  {
    "objectID": "reference/geom_vline.html",
    "href": "reference/geom_vline.html",
    "title": " plotnine.geom_vline",
    "section": "",
    "text": "geom_vline(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=False,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_vline.html#parameters",
    "href": "reference/geom_vline.html#parameters",
    "title": " plotnine.geom_vline",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nxintercept\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = False\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_tile.html",
    "href": "reference/geom_tile.html",
    "title": " plotnine.geom_tile",
    "section": "",
    "text": "geom_tile(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_tile.html#parameters",
    "href": "reference/geom_tile.html#parameters",
    "title": " plotnine.geom_tile",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\nNone\n\n\nfill\n'#333333'\n\n\ngroup\n\n\n\nheight\nNone\n\n\nlinetype\n'solid'\n\n\nsize\n0.1\n\n\nwidth\nNone\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_tile.html#see-also",
    "href": "reference/geom_tile.html#see-also",
    "title": " plotnine.geom_tile",
    "section": "See Also",
    "text": "See Also\n\ngeom_rect"
  },
  {
    "objectID": "reference/geom_step.html",
    "href": "reference/geom_step.html",
    "title": " plotnine.geom_step",
    "section": "",
    "text": "geom_step(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    direction=\"hv\",\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_step.html#parameters",
    "href": "reference/geom_step.html#parameters",
    "title": " plotnine.geom_step",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\ndirection : Literal[\"hv\", \"vh\", \"mid\"] = \"hv\"\n\nhorizontal-vertical steps, vertical-horizontal steps or steps half-way between adjacent x values.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_step.html#see-also",
    "href": "reference/geom_step.html#see-also",
    "title": " plotnine.geom_step",
    "section": "See Also",
    "text": "See Also\n\ngeom_path\n\nFor documentation of extra parameters."
  },
  {
    "objectID": "reference/geom_smooth.html",
    "href": "reference/geom_smooth.html",
    "title": " plotnine.geom_smooth",
    "section": "",
    "text": "geom_smooth(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"smooth\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    legend_fill_ratio=0.5,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_smooth.html#parameters",
    "href": "reference/geom_smooth.html#parameters",
    "title": " plotnine.geom_smooth",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n0.4\n\n\ncolor\n'black'\n\n\nfill\n'#999999'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n1\n\n\nymax\nNone\n\n\nymin\nNone\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"smooth\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\nlegend_fill_ratio : float = 0.5\n\nHow much (vertically) of the legend box should be filled by the color that indicates the confidence intervals. Should be in the range [0, 1].\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_segment.html",
    "href": "reference/geom_segment.html",
    "title": " plotnine.geom_segment",
    "section": "",
    "text": "geom_segment(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    lineend=\"butt\",\n    arrow=None,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_segment.html#parameters",
    "href": "reference/geom_segment.html#parameters",
    "title": " plotnine.geom_segment",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\nxend\n\n\n\ny\n\n\n\nyend\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\nlineend : Literal[\"butt\", \"round\", \"projecting\"] = \"butt\"\n\nLine end style. This option is applied for solid linetypes.\n\narrow : arrow = None\n\nArrow specification. Default is no arrow.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_segment.html#see-also",
    "href": "reference/geom_segment.html#see-also",
    "title": " plotnine.geom_segment",
    "section": "See Also",
    "text": "See Also\n\narrow\n\nfor adding arrowhead(s) to segments."
  },
  {
    "objectID": "reference/geom_ribbon.html",
    "href": "reference/geom_ribbon.html",
    "title": " plotnine.geom_ribbon",
    "section": "",
    "text": "geom_ribbon(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    outline_type=\"both\",\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_ribbon.html#parameters",
    "href": "reference/geom_ribbon.html#parameters",
    "title": " plotnine.geom_ribbon",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\nymax\n\n\n\nymin\n\n\n\nalpha\n1\n\n\ncolor\n'none'\n\n\nfill\n'#333333'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\nwhere\nTrue\n\n\n\nThe bold aesthetics are required.\nAesthetics Descriptions\n\nwhere\n\nDefine where to exclude horizontal regions from being filled. Regions between any two False values are skipped. For sensible demarcation the value used in the where predicate expression should match the ymin value or expression. i.e.\n aes(ymin=0, ymax=\"col1\", where=\"col1 &gt; 0\")  # good\n aes(ymin=0, ymax=\"col1\", where=\"col1 &gt; 10\")  # bad\n\n aes(ymin=col2, ymax=\"col1\", where=\"col1 &gt; col2\")  # good\n aes(ymin=col2, ymax=\"col1\", where=\"col1 &gt; col3\")  # bad\n\n\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\noutline_type : Literal[\"upper\", \"lower\", \"both\", \"full\"] = \"both\"\n\nHow to stroke to outline of the region / area. If upper, draw only upper bounding line. If lower, draw only lower bounding line. If both, draw both upper & lower bounding lines. If full, draw closed polygon around the area.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_raster.html",
    "href": "reference/geom_raster.html",
    "title": " plotnine.geom_raster",
    "section": "",
    "text": "geom_raster(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=True,\n    vjust=0.5,\n    hjust=0.5,\n    interpolation=None,\n    filterrad=4.0,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_raster.html#parameters",
    "href": "reference/geom_raster.html#parameters",
    "title": " plotnine.geom_raster",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\nfill\n'#333333'\n\n\ngroup\n\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = True\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\nhjust : float = 0.5\n\nHorizontal justification for the rectangle at point x. Default is 0.5, which centers the rectangle horizontally. Must be in the range [0, 1].\n\nvjust : float = 0.5\n\nVertical justification for the rectangle at point y Default is 0.5, which centers the rectangle vertically. Must be in the range [0, 1].\n\ninterpolation : str = None\n\nHow to calculate values between the center points of adjacent rectangles. The default is None not to interpolate. Allowed values are:\n\"antialiased\"\n\"nearest\"\n\"bilinear\"\n\"bicubic\"\n\"spline16\"\n\"spline36\"\n\"hanning\"\n\"hamming\"\n\"hermite\"\n\"kaiser\"\n\"quadric\"\n\"catrom\"\n\"gaussian\"\n\"bessel\"\n\"mitchell\"\n\"sinc\"\n\"lanczos\"\n\"blackman\"\n\nfilterrad : float = 4.0\n\nThe filter radius for filters that have a radius parameter, i.e. when interpolation is one of: sinc, lanczos, blackman. Must be a number greater than zero.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_raster.html#see-also",
    "href": "reference/geom_raster.html#see-also",
    "title": " plotnine.geom_raster",
    "section": "See Also",
    "text": "See Also\n\ngeom_rect\n\n\n\ngeom_tile"
  },
  {
    "objectID": "reference/geom_qq_line.html",
    "href": "reference/geom_qq_line.html",
    "title": " plotnine.geom_qq_line",
    "section": "",
    "text": "geom_qq_line(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"qq_line\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_qq_line.html#parameters",
    "href": "reference/geom_qq_line.html#parameters",
    "title": " plotnine.geom_qq_line",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"qq_line\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_polygon.html",
    "href": "reference/geom_polygon.html",
    "title": " plotnine.geom_polygon",
    "section": "",
    "text": "geom_polygon(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_polygon.html#parameters",
    "href": "reference/geom_polygon.html#parameters",
    "title": " plotnine.geom_polygon",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\nNone\n\n\nfill\n'#333333'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_polygon.html#notes",
    "href": "reference/geom_polygon.html#notes",
    "title": " plotnine.geom_polygon",
    "section": "Notes",
    "text": "Notes\nAll paths in the same group aesthetic value make up a polygon."
  },
  {
    "objectID": "reference/geom_pointdensity.html",
    "href": "reference/geom_pointdensity.html",
    "title": " plotnine.geom_pointdensity",
    "section": "",
    "text": "geom_pointdensity(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"pointdensity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_pointdensity.html#parameters",
    "href": "reference/geom_pointdensity.html#parameters",
    "title": " plotnine.geom_pointdensity",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\nfill\nNone\n\n\ngroup\n\n\n\nshape\n'o'\n\n\nsize\n1.5\n\n\nstroke\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"pointdensity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_path.html",
    "href": "reference/geom_path.html",
    "title": " plotnine.geom_path",
    "section": "",
    "text": "geom_path(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    lineend=\"butt\",\n    linejoin=\"round\",\n    arrow=None,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_path.html#parameters",
    "href": "reference/geom_path.html#parameters",
    "title": " plotnine.geom_path",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\nlineend : Literal[\"butt\", \"round\", \"projecting\"] = \"butt\"\n\nLine end style. This option is applied for solid linetypes.\n\nlinejoin : Literal[\"round\", \"miter\", \"bevel\"] = \"round\"\n\nLine join style. This option is applied for solid linetypes.\n\narrow : arrow = None\n\nArrow specification. Default is no arrow.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_path.html#see-also",
    "href": "reference/geom_path.html#see-also",
    "title": " plotnine.geom_path",
    "section": "See Also",
    "text": "See Also\n\narrow\n\nfor adding arrowhead(s) to paths."
  },
  {
    "objectID": "reference/geom_linerange.html",
    "href": "reference/geom_linerange.html",
    "title": " plotnine.geom_linerange",
    "section": "",
    "text": "geom_linerange(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_linerange.html#parameters",
    "href": "reference/geom_linerange.html#parameters",
    "title": " plotnine.geom_linerange",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\nymax\n\n\n\nymin\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_label.html",
    "href": "reference/geom_label.html",
    "title": " plotnine.geom_label",
    "section": "",
    "text": "geom_label(mapping=None, data=None, kwargs={})"
  },
  {
    "objectID": "reference/geom_label.html#parameters",
    "href": "reference/geom_label.html#parameters",
    "title": " plotnine.geom_label",
    "section": "Parameters",
    "text": "Parameters\n\n\nboxstyle : str = \"round\"\n\nOptions are:\n'circle'\n'darrow'\n'larrow'\n'rarrow'\n'round '\n'round4'\n'roundtooth'\n'sawtooth'\n'square'\n\nboxcolor\n\nColor of box around the text. If None, the color is the same as the text.\n\nlabel_padding : float = 0.25\n\nAmount of padding\n\nlabel_r : float = 0.25\n\nRounding radius of corners.\n\nlabel_size : float = 0.7\n\nLinewidth of the label boundary.\n\ntooth_size : float = None\n\nSize of the roundtooth or sawtooth if they are the chosen boxstyle. The default depends on Matplotlib"
  },
  {
    "objectID": "reference/geom_label.html#see-also",
    "href": "reference/geom_label.html#see-also",
    "title": " plotnine.geom_label",
    "section": "See Also",
    "text": "See Also\n\ngeom_text\n\nFor documentation of the parameters. BoxStyle for the parameters that affect the boxstyle."
  },
  {
    "objectID": "reference/geom_hline.html",
    "href": "reference/geom_hline.html",
    "title": " plotnine.geom_hline",
    "section": "",
    "text": "geom_hline(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=False,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_hline.html#parameters",
    "href": "reference/geom_hline.html#parameters",
    "title": " plotnine.geom_hline",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nyintercept\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = False\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_freqpoly.html",
    "href": "reference/geom_freqpoly.html",
    "title": " plotnine.geom_freqpoly",
    "section": "",
    "text": "geom_freqpoly(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"bin\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    lineend=\"butt\",\n    linejoin=\"round\",\n    arrow=None,\n    **kwargs\n)\n\n\nFrequency polygon\nSee geom_path for documentation of the parameters."
  },
  {
    "objectID": "reference/geom_errorbar.html",
    "href": "reference/geom_errorbar.html",
    "title": " plotnine.geom_errorbar",
    "section": "",
    "text": "geom_errorbar(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    width=0.5,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_errorbar.html#parameters",
    "href": "reference/geom_errorbar.html#parameters",
    "title": " plotnine.geom_errorbar",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\nymax\n\n\n\nymin\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\nwidth : float = 0.5\n\nBar width as a fraction of the resolution of the data.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_density_2d.html",
    "href": "reference/geom_density_2d.html",
    "title": " plotnine.geom_density_2d",
    "section": "",
    "text": "geom_density_2d(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"density_2d\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_density_2d.html#parameters",
    "href": "reference/geom_density_2d.html#parameters",
    "title": " plotnine.geom_density_2d",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"density_2d\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_crossbar.html",
    "href": "reference/geom_crossbar.html",
    "title": " plotnine.geom_crossbar",
    "section": "",
    "text": "geom_crossbar(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    width=0.5,\n    fatten=2,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_crossbar.html#parameters",
    "href": "reference/geom_crossbar.html#parameters",
    "title": " plotnine.geom_crossbar",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nymax\n\n\n\nymin\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\nfill\nNone\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\nwidth : float = 0.5\n\nBox width as a fraction of the resolution of the data.\n\nfatten : float = 2\n\nA multiplicative factor used to increase the size of the middle bar across the box.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_col.html",
    "href": "reference/geom_col.html",
    "title": " plotnine.geom_col",
    "section": "",
    "text": "geom_col(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"stack\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    width=None,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_col.html#parameters",
    "href": "reference/geom_col.html#parameters",
    "title": " plotnine.geom_col",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\nNone\n\n\nfill\n'#595959'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"stack\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\nwidth : float = None\n\nBar width. If None, the width is set to 90% of the resolution of the data.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_col.html#see-also",
    "href": "reference/geom_col.html#see-also",
    "title": " plotnine.geom_col",
    "section": "See Also",
    "text": "See Also\n\ngeom_bar"
  },
  {
    "objectID": "reference/geom_blank.html",
    "href": "reference/geom_blank.html",
    "title": " plotnine.geom_blank",
    "section": "",
    "text": "geom_blank(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_blank.html#parameters",
    "href": "reference/geom_blank.html#parameters",
    "title": " plotnine.geom_blank",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\n\n\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_bar.html",
    "href": "reference/geom_bar.html",
    "title": " plotnine.geom_bar",
    "section": "",
    "text": "geom_bar(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"count\",\n    position=\"stack\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    width=None,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_bar.html#parameters",
    "href": "reference/geom_bar.html#parameters",
    "title": " plotnine.geom_bar",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\nNone\n\n\nfill\n'#595959'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"count\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"stack\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\nwidth : float = None\n\nBar width. If None, the width is set to 90% of the resolution of the data.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_bar.html#see-also",
    "href": "reference/geom_bar.html#see-also",
    "title": " plotnine.geom_bar",
    "section": "See Also",
    "text": "See Also\n\ngeom_histogram"
  },
  {
    "objectID": "reference/geom_abline.html",
    "href": "reference/geom_abline.html",
    "title": " plotnine.geom_abline",
    "section": "",
    "text": "geom_abline(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=False,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_abline.html#parameters",
    "href": "reference/geom_abline.html#parameters",
    "title": " plotnine.geom_abline",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nintercept\n\n\n\nslope\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = False\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/figure_size.html",
    "href": "reference/figure_size.html",
    "title": " plotnine.options.figure_size",
    "section": "",
    "text": "figure_size : tuple[float, float] = (640 / dpi, 480 / dpi)\n\n\nDefault figure size in inches"
  },
  {
    "objectID": "reference/faithfuld.html",
    "href": "reference/faithfuld.html",
    "title": " plotnine.data.faithfuld",
    "section": "",
    "text": "faithfuld = pd.read_csv(DATA_DIR / \"faithfuld.csv\")"
  },
  {
    "objectID": "reference/faithfuld.html#description",
    "href": "reference/faithfuld.html#description",
    "title": " plotnine.data.faithfuld",
    "section": "Description",
    "text": "Description\nWaiting time between eruptions and the duration of the eruption for the Old Faithful geyser in Yellowstone National Park, Wyoming, USA."
  },
  {
    "objectID": "reference/faithfuld.html#format",
    "href": "reference/faithfuld.html#format",
    "title": " plotnine.data.faithfuld",
    "section": "Format",
    "text": "Format\nA data frame with grid data for 272 observations on 2 variables and the density at those locations.\n\n\n\nColumn\nDescription\n\n\n\n\neruptions\nEruption time in mins\n\n\nwaiting W\naiting time to next eruption (in mins)\n\n\ndensity D\nensity Estimate"
  },
  {
    "objectID": "reference/faithfuld.html#details",
    "href": "reference/faithfuld.html#details",
    "title": " plotnine.data.faithfuld",
    "section": "Details",
    "text": "Details\nA closer look at faithful.eruptions reveals that these are heavily rounded times originally in seconds, where multiples of 5 are more frequent than expected under non-human measurement. For a better version of the eruption times, see the example below.\nThere are many versions of this dataset around: Azzalini and Bowman (1990) use a more complete version."
  },
  {
    "objectID": "reference/faithfuld.html#source",
    "href": "reference/faithfuld.html#source",
    "title": " plotnine.data.faithfuld",
    "section": "Source",
    "text": "Source\nW. Härdle."
  },
  {
    "objectID": "reference/faithfuld.html#references",
    "href": "reference/faithfuld.html#references",
    "title": " plotnine.data.faithfuld",
    "section": "References",
    "text": "References\nHärdle, W. (1991) Smoothing Techniques with Implementation in S. New York: Springer.\nAzzalini, A. and Bowman, A. W. (1990). A look at some data on the Old Faithful geyser. Applied Statistics 39, 357–365."
  },
  {
    "objectID": "reference/facet_wrap.html",
    "href": "reference/facet_wrap.html",
    "title": " plotnine.facet_wrap",
    "section": "",
    "text": "facet_wrap(\n    facets=None,\n    *,\n    nrow=None,\n    ncol=None,\n    scales=\"fixed\",\n    shrink=True,\n    labeller=\"label_value\",\n    as_table=True,\n    drop=True,\n    dir=\"h\"\n)"
  },
  {
    "objectID": "reference/facet_wrap.html#parameters",
    "href": "reference/facet_wrap.html#parameters",
    "title": " plotnine.facet_wrap",
    "section": "Parameters",
    "text": "Parameters\n\n\nfacets : Optional[str | Sequence[str]] = None\n\nVariables to groupby and plot on different panels. If a string formula is used it should be right sided, e.g \"~ a + b\", (\"a\", \"b\")\n\nnrow : int = None\n\nNumber of rows\n\nncol : int = None\n\nNumber of columns\n\nscales : Literal[\"fixed\", \"free\", \"free_x\", \"free_y\"] = \"fixed\"\n\nWhether x or y scales should be allowed (free) to vary according to the data on each of the panel.\n\nshrink : bool = True\n\nWhether to shrink the scales to the output of the statistics instead of the raw data.\n\nlabeller : Literal[\"label_value\", \"label_both\", \"label_context\"] = \"label_value\"\n\nHow to label the facets. A string value if it should be one of [\"label_value\", \"label_both\", \"label_context\"].\n\nas_table : bool = True\n\nIf True, the facets are laid out like a table with the highest values at the bottom-right. If False the facets are laid out like a plot with the highest value a the top-right\n\ndrop : bool = True\n\nIf True, all factor levels not used in the data will automatically be dropped. If False, all factor levels will be shown, regardless of whether or not they appear in the data.\n\ndir : Literal[\"h\", \"v\"] = \"h\"\n\nDirection in which to layout the panels. h for horizontal and v for vertical."
  },
  {
    "objectID": "reference/facet_grid.html",
    "href": "reference/facet_grid.html",
    "title": " plotnine.facet_grid",
    "section": "",
    "text": "facet_grid(\n    rows=None,\n    cols=None,\n    *,\n    margins=False,\n    scales=\"fixed\",\n    space=\"fixed\",\n    shrink=True,\n    labeller=\"label_value\",\n    as_table=True,\n    drop=True\n)"
  },
  {
    "objectID": "reference/facet_grid.html#parameters",
    "href": "reference/facet_grid.html#parameters",
    "title": " plotnine.facet_grid",
    "section": "Parameters",
    "text": "Parameters\n\n\nrows : Optional[str | Sequence[str]] = None\n\nVariable expressions along the rows of the facets/panels. Each expression is evaluated within the context of the dataframe.\n\ncols : Optional[str | Sequence[str]] = None\n\nVariable expressions along the columns of the facets/panels. Each expression is evaluated within the context of the dataframe.\n\nmargins : bool | list[str] = False\n\nvariable names to compute margins for. True will compute all possible margins.\n\nspace : Literal[\"fixed\", \"free\", \"free_x\", \"free_y\"] | FacetSpaceRatios = \"fixed\"\n\nControl the size of the x or y sides of the panels. The size also depends to the scales parameter.\nIf a string, it should be one of ['fixed', 'free', 'free_x', 'free_y'].\nIf a dict, it indicates the relative facet size ratios such as:\n{\"x\": [1, 2], \"y\": [3, 1, 1]}\nThis means that in the horizontal direction, the second panel will be twice the length of the first. In the vertical direction the top facet will be the 3 times longer then the second and third facets.\nNote that the number of dimensions in the list must equal the number of facets that will be produced.\n\nshrink : bool = True\n\nWhether to shrink the scales to the output of the statistics instead of the raw data.\n\nlabeller : Literal[\"label_value\", \"label_both\", \"label_context\"] = \"label_value\"\n\nHow to label the facets. A string value if it should be one of [\"label_value\", \"label_both\", \"label_context\"].\n\nas_table : bool = True\n\nIf True, the facets are laid out like a table with the highest values at the bottom-right. If False the facets are laid out like a plot with the highest value a the top-right\n\ndrop : bool = True\n\nIf True, all factor levels not used in the data will automatically be dropped. If False, all factor levels will be shown, regardless of whether or not they appear in the data."
  },
  {
    "objectID": "reference/expand_limits.html",
    "href": "reference/expand_limits.html",
    "title": " plotnine.expand_limits",
    "section": "",
    "text": "expand_limits(kwargs={})"
  },
  {
    "objectID": "reference/expand_limits.html#parameters",
    "href": "reference/expand_limits.html#parameters",
    "title": " plotnine.expand_limits",
    "section": "Parameters",
    "text": "Parameters\n\n\nkwargs : dict | dataframe = {}\n\nData to use in expanding the limits. The keys should be aesthetic names e.g. x, y, colour, …"
  },
  {
    "objectID": "reference/element_rect.html",
    "href": "reference/element_rect.html",
    "title": " plotnine.element_rect",
    "section": "",
    "text": "element_rect(\n    fill=None, color=None, size=None, linetype=None, colour=None, kwargs={}\n)"
  },
  {
    "objectID": "reference/element_rect.html#parameters",
    "href": "reference/element_rect.html#parameters",
    "title": " plotnine.element_rect",
    "section": "Parameters",
    "text": "Parameters\n\n\nfill : str | tuple = None\n\nRectangle background color\n\ncolor : str | tuple = None\n\nLine color\n\ncolour : str | tuple = None\n\nAlias of color\n\nsize : float = None\n\nLine thickness\n\nkwargs : dict = {}\n\nParameters recognised by Rectangle. In some cases you can use the fancy parameters from FancyBboxPatch."
  },
  {
    "objectID": "reference/element_blank.html",
    "href": "reference/element_blank.html",
    "title": " plotnine.element_blank",
    "section": "",
    "text": "element_blank()\n\n\nTheme element: Blank"
  },
  {
    "objectID": "reference/economics.html",
    "href": "reference/economics.html",
    "title": " plotnine.data.economics",
    "section": "",
    "text": "economics = pd.read_csv(DATA_DIR / \"economics.csv\", parse_dates=[0])"
  },
  {
    "objectID": "reference/economics.html#description",
    "href": "reference/economics.html#description",
    "title": " plotnine.data.economics",
    "section": "Description",
    "text": "Description\nThis dataset was produced from US economic time series data available from http://research.stlouisfed.org/fred2. economics is in “wide” format, economics_long is in “long” format."
  },
  {
    "objectID": "reference/economics.html#format",
    "href": "reference/economics.html#format",
    "title": " plotnine.data.economics",
    "section": "Format",
    "text": "Format\nA data frame with 478 rows and 6 variables\n\n\n\nColumn\nDescription\n\n\n\n\ndate\nMonth of data collection\n\n\npsavert\npersonal savings rate 1\n\n\npce\npersonal consumption expenditures, in billions of dollars 2\n\n\nunemploy\nnumber of unemployed in thousands 3\n\n\nuempmed\nmedian duration of unemployment, in week 4\n\n\npop\ntotal population, in thousands 5"
  },
  {
    "objectID": "reference/economics.html#footnotes",
    "href": "reference/economics.html#footnotes",
    "title": " plotnine.data.economics",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttp://research.stlouisfed.org/fred2/series/PSAVERT↩︎\nhttp://research.stlouisfed.org/fred2/series/PCE↩︎\nhttp://research.stlouisfed.org/fred2/series/UNEMPLOY↩︎\nhttp://research.stlouisfed.org/fred2/series/UEMPMED↩︎\nhttp://research.stlouisfed.org/fred2/series/POP↩︎"
  },
  {
    "objectID": "reference/diamonds.html",
    "href": "reference/diamonds.html",
    "title": " plotnine.data.diamonds",
    "section": "",
    "text": "diamonds = pd.read_csv(DATA_DIR / \"diamonds.csv\")"
  },
  {
    "objectID": "reference/diamonds.html#description",
    "href": "reference/diamonds.html#description",
    "title": " plotnine.data.diamonds",
    "section": "Description",
    "text": "Description\nA dataset containing the prices and other attributes of almost 54,000 diamonds. The variables are as follows:"
  },
  {
    "objectID": "reference/diamonds.html#format",
    "href": "reference/diamonds.html#format",
    "title": " plotnine.data.diamonds",
    "section": "Format",
    "text": "Format\nA data frame with 53940 rows and 10 variables:\n\n\n\n\n\n\n\nColumn\nDescription\n\n\n\n\nprice\nprice in US dollars ($326–$18,823)\n\n\ncarat\nweight of the diamond (0.2–5.01)\n\n\ncut\nquality of the cut (Fair, Good, Very Good, Premium, Ideal)\n\n\ncolor\ndiamond colour, from J (worst) to D (best)\n\n\nclarity\na measurement of how clear the diamond is (I1 (worst), SI1, SI2, VS1, VS2, VVS1, VVS2, IF (best))\n\n\nx\nlength in mm (0–10.74)\n\n\ny\nwidth in mm (0–58.9)\n\n\nz\ndepth in mm (0–31.8)\n\n\ndepth\ntotal depth percentage = z / mean(x, y) = 2 * z / (x + y) (43–79)\n\n\ntable\nwidth of top of diamond relative to widest point (43–95)"
  },
  {
    "objectID": "reference/coord_trans.html",
    "href": "reference/coord_trans.html",
    "title": " plotnine.coord_trans",
    "section": "",
    "text": "coord_trans(x=\"identity\", y=\"identity\", xlim=None, ylim=None, expand=True)"
  },
  {
    "objectID": "reference/coord_trans.html#parameters",
    "href": "reference/coord_trans.html#parameters",
    "title": " plotnine.coord_trans",
    "section": "Parameters",
    "text": "Parameters\n\n\nx : str | trans = \"identity\"\n\nName of transform or trans class to transform the x axis\n\ny : str | trans = \"identity\"\n\nName of transform or trans class to transform the y axis\n\nxlim : tuple[float, float] = None\n\nLimits for x axis. If None, then they are automatically computed.\n\nylim : tuple[float, float] = None\n\nLimits for y axis. If None, then they are automatically computed.\n\nexpand : bool = True\n\nIf True, expand the coordinate axes by some factor. If False, use the limits from the data."
  },
  {
    "objectID": "reference/coord_fixed.html",
    "href": "reference/coord_fixed.html",
    "title": " plotnine.coord_fixed",
    "section": "",
    "text": "coord_fixed(ratio=1, xlim=None, ylim=None, expand=True)"
  },
  {
    "objectID": "reference/coord_fixed.html#parameters",
    "href": "reference/coord_fixed.html#parameters",
    "title": " plotnine.coord_fixed",
    "section": "Parameters",
    "text": "Parameters\n\n\nratio : float = 1\n\nDesired aspect_ratio (:math:y/x) of the panel(s).\n\nxlim : tuple[float, float] = None\n\nLimits for x axis. If None, then they are automatically computed.\n\nylim : tuple[float, float] = None\n\nLimits for y axis. If None, then they are automatically computed.\n\nexpand : bool = True\n\nIf True, expand the coordinate axes by some factor. If False, use the limits from the data."
  },
  {
    "objectID": "reference/coord_fixed.html#notes",
    "href": "reference/coord_fixed.html#notes",
    "title": " plotnine.coord_fixed",
    "section": "Notes",
    "text": "Notes\nTo specify aspect ratio of the visual size for the axes use the aspect_ratio themeable.\nggplot(data, aes('x', 'y')) + theme(aspect_ratio=0.5)\nWhen changing the aspect_ratio in either way, the width of the panel remains constant (as derived from the plotnine.themes.themeable.figure_size themeable) and the height is altered to achieve desired ratio."
  },
  {
    "objectID": "reference/coord_cartesian.html",
    "href": "reference/coord_cartesian.html",
    "title": " plotnine.coord_cartesian",
    "section": "",
    "text": "coord_cartesian(xlim=None, ylim=None, expand=True)"
  },
  {
    "objectID": "reference/coord_cartesian.html#parameters",
    "href": "reference/coord_cartesian.html#parameters",
    "title": " plotnine.coord_cartesian",
    "section": "Parameters",
    "text": "Parameters\n\n\nxlim : tuple[float, float] = None\n\nLimits for x axis. If None, then they are automatically computed.\n\nylim : tuple[float, float] = None\n\nLimits for y axis. If None, then they are automatically computed.\n\nexpand : bool = True\n\nIf True, expand the coordinate axes by some factor. If False, use the limits from the data."
  },
  {
    "objectID": "reference/close_all_figures.html",
    "href": "reference/close_all_figures.html",
    "title": " plotnine.options.close_all_figures",
    "section": "",
    "text": "close_all_figures = False\n\n\nDevelopment flag, e.g. set to True to prevent the queuing up of figures when errors happen."
  },
  {
    "objectID": "reference/base_family.html",
    "href": "reference/base_family.html",
    "title": " plotnine.options.base_family",
    "section": "",
    "text": "base_family : str = \"sans-serif\"\n\n\nThe base font family for all text that is part of the theme. Default is sans-serif and one is chosen automatically from rcParams[“font.san-serif”]"
  },
  {
    "objectID": "reference/axis_title_x.html",
    "href": "reference/axis_title_x.html",
    "title": " plotnine.themes.themeable.axis_title_x",
    "section": "",
    "text": "axis_title_x(theme_element)"
  },
  {
    "objectID": "reference/axis_title_x.html#parameters",
    "href": "reference/axis_title_x.html#parameters",
    "title": " plotnine.themes.themeable.axis_title_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/axis_ticks_y.html",
    "href": "reference/axis_ticks_y.html",
    "title": " plotnine.themes.themeable.axis_ticks_y",
    "section": "",
    "text": "axis_ticks_y(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_y.html#parameters",
    "href": "reference/axis_ticks_y.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/axis_ticks_pad_minor_y.html",
    "href": "reference/axis_ticks_pad_minor_y.html",
    "title": " plotnine.themes.themeable.axis_ticks_pad_minor_y",
    "section": "",
    "text": "axis_ticks_pad_minor_y(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_pad_minor_y.html#parameters",
    "href": "reference/axis_ticks_pad_minor_y.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_pad_minor_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float"
  },
  {
    "objectID": "reference/axis_ticks_pad_minor_y.html#note",
    "href": "reference/axis_ticks_pad_minor_y.html#note",
    "title": " plotnine.themes.themeable.axis_ticks_pad_minor_y",
    "section": "Note",
    "text": "Note\nPadding is not applied when the axis_ticks_minor_y are blank, but it does apply when the axis_ticks_length_minor_y is zero."
  },
  {
    "objectID": "reference/axis_ticks_pad_minor.html",
    "href": "reference/axis_ticks_pad_minor.html",
    "title": " plotnine.themes.themeable.axis_ticks_pad_minor",
    "section": "",
    "text": "axis_ticks_pad_minor(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_pad_minor.html#parameters",
    "href": "reference/axis_ticks_pad_minor.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_pad_minor",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float"
  },
  {
    "objectID": "reference/axis_ticks_pad_minor.html#note",
    "href": "reference/axis_ticks_pad_minor.html#note",
    "title": " plotnine.themes.themeable.axis_ticks_pad_minor",
    "section": "Note",
    "text": "Note\nPadding is not applied when the axis_ticks_minor are blank, but it does apply when the axis_ticks_length_minor is zero."
  },
  {
    "objectID": "reference/axis_ticks_pad_major_x.html",
    "href": "reference/axis_ticks_pad_major_x.html",
    "title": " plotnine.themes.themeable.axis_ticks_pad_major_x",
    "section": "",
    "text": "axis_ticks_pad_major_x(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_pad_major_x.html#parameters",
    "href": "reference/axis_ticks_pad_major_x.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_pad_major_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nValue in points."
  },
  {
    "objectID": "reference/axis_ticks_pad.html",
    "href": "reference/axis_ticks_pad.html",
    "title": " plotnine.themes.themeable.axis_ticks_pad",
    "section": "",
    "text": "axis_ticks_pad(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_pad.html#parameters",
    "href": "reference/axis_ticks_pad.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_pad",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nValue in points."
  },
  {
    "objectID": "reference/axis_ticks_pad.html#note",
    "href": "reference/axis_ticks_pad.html#note",
    "title": " plotnine.themes.themeable.axis_ticks_pad",
    "section": "Note",
    "text": "Note\nPadding is not applied when the axis_ticks are blank, but it does apply when the axis_ticks_length is zero."
  },
  {
    "objectID": "reference/axis_ticks_minor_x.html",
    "href": "reference/axis_ticks_minor_x.html",
    "title": " plotnine.themes.themeable.axis_ticks_minor_x",
    "section": "",
    "text": "axis_ticks_minor_x(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_minor_x.html#parameters",
    "href": "reference/axis_ticks_minor_x.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_minor_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/axis_ticks_major_y.html",
    "href": "reference/axis_ticks_major_y.html",
    "title": " plotnine.themes.themeable.axis_ticks_major_y",
    "section": "",
    "text": "axis_ticks_major_y(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_major_y.html#parameters",
    "href": "reference/axis_ticks_major_y.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_major_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/axis_ticks_major.html",
    "href": "reference/axis_ticks_major.html",
    "title": " plotnine.themes.themeable.axis_ticks_major",
    "section": "",
    "text": "axis_ticks_major(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_major.html#parameters",
    "href": "reference/axis_ticks_major.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_major",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/axis_ticks_length_minor_x.html",
    "href": "reference/axis_ticks_length_minor_x.html",
    "title": " plotnine.themes.themeable.axis_ticks_length_minor_x",
    "section": "",
    "text": "axis_ticks_length_minor_x(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_length_minor_x.html#parameters",
    "href": "reference/axis_ticks_length_minor_x.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_length_minor_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float | complex\n\nValue in points. A negative value creates the ticks inside the plot panel. A complex value (e.g. 3j) creates ticks that span both in and out of the panel."
  },
  {
    "objectID": "reference/axis_ticks_length_major_y.html",
    "href": "reference/axis_ticks_length_major_y.html",
    "title": " plotnine.themes.themeable.axis_ticks_length_major_y",
    "section": "",
    "text": "axis_ticks_length_major_y(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_length_major_y.html#parameters",
    "href": "reference/axis_ticks_length_major_y.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_length_major_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float | complex\n\nValue in points. A negative value creates the ticks inside the plot panel. A complex value (e.g. 3j) creates ticks that span both in and out of the panel."
  },
  {
    "objectID": "reference/axis_ticks_length_major.html",
    "href": "reference/axis_ticks_length_major.html",
    "title": " plotnine.themes.themeable.axis_ticks_length_major",
    "section": "",
    "text": "axis_ticks_length_major(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_length_major.html#parameters",
    "href": "reference/axis_ticks_length_major.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_length_major",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nValue in points. A negative value creates the ticks inside the plot panel. A complex value (e.g. 3j) creates ticks that span both in and out of the panel."
  },
  {
    "objectID": "reference/axis_ticks.html",
    "href": "reference/axis_ticks.html",
    "title": " plotnine.themes.themeable.axis_ticks",
    "section": "",
    "text": "axis_ticks(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks.html#parameters",
    "href": "reference/axis_ticks.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/axis_text_x.html",
    "href": "reference/axis_text_x.html",
    "title": " plotnine.themes.themeable.axis_text_x",
    "section": "",
    "text": "axis_text_x(theme_element)"
  },
  {
    "objectID": "reference/axis_text_x.html#parameters",
    "href": "reference/axis_text_x.html#parameters",
    "title": " plotnine.themes.themeable.axis_text_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/axis_line_y.html",
    "href": "reference/axis_line_y.html",
    "title": " plotnine.themes.themeable.axis_line_y",
    "section": "",
    "text": "axis_line_y(theme_element)"
  },
  {
    "objectID": "reference/axis_line_y.html#parameters",
    "href": "reference/axis_line_y.html#parameters",
    "title": " plotnine.themes.themeable.axis_line_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/axis_line_y.html#attributes",
    "href": "reference/axis_line_y.html#attributes",
    "title": " plotnine.themes.themeable.axis_line_y",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\nposition\nstr(object=’’) -&gt; str\n\n\n\n\n position\n\nposition = \"left\"\n\n\nstr(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’."
  },
  {
    "objectID": "reference/axis_line.html",
    "href": "reference/axis_line.html",
    "title": " plotnine.themes.themeable.axis_line",
    "section": "",
    "text": "axis_line(theme_element)"
  },
  {
    "objectID": "reference/axis_line.html#parameters",
    "href": "reference/axis_line.html#parameters",
    "title": " plotnine.themes.themeable.axis_line",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/as_labeller.html",
    "href": "reference/as_labeller.html",
    "title": " plotnine.as_labeller",
    "section": "",
    "text": "as_labeller(x=None, default=label_value, multi_line=True)"
  },
  {
    "objectID": "reference/as_labeller.html#parameters",
    "href": "reference/as_labeller.html#parameters",
    "title": " plotnine.as_labeller",
    "section": "Parameters",
    "text": "Parameters\n\n\nx : callable | dict = None\n\nObject to coerce\n\ndefault : str | callable = label_value\n\nDefault labeller. If it is a string, it should be the name of one the labelling functions provided by plotnine.\n\nmulti_line : bool = True\n\nWhether to place each variable on a separate line"
  },
  {
    "objectID": "reference/as_labeller.html#returns",
    "href": "reference/as_labeller.html#returns",
    "title": " plotnine.as_labeller",
    "section": "Returns",
    "text": "Returns\n\n\nout : labeller\n\nLabelling function"
  },
  {
    "objectID": "reference/annotation_stripes.html",
    "href": "reference/annotation_stripes.html",
    "title": " plotnine.annotation_stripes",
    "section": "",
    "text": "annotation_stripes(\n    fill=(\"#AAAAAA\", \"#CCCCCC\"),\n    fill_range=\"auto\",\n    direction=\"vertical\",\n    extend=(0, 1),\n    kwargs={}\n)"
  },
  {
    "objectID": "reference/annotation_stripes.html#parameters",
    "href": "reference/annotation_stripes.html#parameters",
    "title": " plotnine.annotation_stripes",
    "section": "Parameters",
    "text": "Parameters\n\n\nfill : Sequence[str] = (\"#AAAAAA\", \"#CCCCCC\")\n\nList of colors for the strips.\n\nfill_range : Literal[\"auto\", \"cycle\", \"no\", \"nocycle\"] = \"auto\"\n\nHow to fill stripes beyond the range of scale:\n\"cycle\"      # keep cycling the colors of the\n             # stripes after the range ends\n\"nocycle\"    # stop cycling the colors of the\n             # stripes after the range ends\n\"auto\"       # \"cycle\" for continuous scales and\n             # \"nocycle\" for discrete scales.\n\"no\"         # Do not add stripes passed the range\n             # passed the range of the scales\n\ndirection : Literal[\"horizontal\", \"vertical\"] = \"vertical\"\n\nOrientation of the stripes\n\nextend : tuple[float, float] = (0, 1)\n\nRange of the stripes. The default is (0, 1), top to bottom. The values should be in the range [0, 1].\n\n**kwargs : Any = {}\n\nOther aesthetic parameters for the rectangular stripes. They include; alpha, color, linetype, and size."
  },
  {
    "objectID": "reference/annotate.html",
    "href": "reference/annotate.html",
    "title": " plotnine.annotate",
    "section": "",
    "text": "annotate(\n    geom,\n    x=None,\n    y=None,\n    xmin=None,\n    xmax=None,\n    xend=None,\n    xintercept=None,\n    ymin=None,\n    ymax=None,\n    yend=None,\n    yintercept=None,\n    kwargs={}\n)"
  },
  {
    "objectID": "reference/annotate.html#parameters",
    "href": "reference/annotate.html#parameters",
    "title": " plotnine.annotate",
    "section": "Parameters",
    "text": "Parameters\n\n\ngeom : str | type[geom_base_class]\n\ngeom to use for annotation, or name of geom (e.g. ‘point’).\n\nx : float | None = None\n\nPosition\n\ny : float | None = None\n\nPosition\n\nxmin : float | None = None\n\nPosition\n\nymin : float | None = None\n\nPosition\n\nxmax : float | None = None\n\nPosition\n\nymax : float | None = None\n\nPosition\n\nxend : float | None = None\n\nPosition\n\nyend : float | None = None\n\nPosition\n\nxintercept : float | None = None\n\nPosition\n\nyintercept : float | None = None\n\nPosition\n\nkwargs : Any = {}\n\nOther aesthetics or parameters to the geom."
  },
  {
    "objectID": "reference/annotate.html#notes",
    "href": "reference/annotate.html#notes",
    "title": " plotnine.annotate",
    "section": "Notes",
    "text": "Notes\nThe positioning aethetics x, y, xmin, ymin, xmax, ymax, xend, yend, xintercept, yintercept depend on which geom is used.\nYou should choose or ignore accordingly.\nAll geoms are created with stat=\"identity\"."
  },
  {
    "objectID": "reference/after_scale.html",
    "href": "reference/after_scale.html",
    "title": " plotnine.after_scale",
    "section": "",
    "text": "after_scale(x)"
  },
  {
    "objectID": "reference/after_scale.html#parameters",
    "href": "reference/after_scale.html#parameters",
    "title": " plotnine.after_scale",
    "section": "Parameters",
    "text": "Parameters\n\n\nx : str\n\nAn expression"
  },
  {
    "objectID": "reference/after_scale.html#see-also",
    "href": "reference/after_scale.html#see-also",
    "title": " plotnine.after_scale",
    "section": "See Also",
    "text": "See Also\n\nafter_stat\n\n\n\nstage"
  },
  {
    "objectID": "reference/PlotnineAnimation.html",
    "href": "reference/PlotnineAnimation.html",
    "title": " plotnine.animation.PlotnineAnimation",
    "section": "",
    "text": "PlotnineAnimation(\n    plots, interval=200, repeat_delay=None, repeat=True, blit=False\n)"
  },
  {
    "objectID": "reference/PlotnineAnimation.html#parameters",
    "href": "reference/PlotnineAnimation.html#parameters",
    "title": " plotnine.animation.PlotnineAnimation",
    "section": "Parameters",
    "text": "Parameters\n\n\nplots : Iterable[ggplot]\n\nggplot objects that make up the the frames of the animation\n\ninterval : int = 200\n\nDelay between frames in milliseconds. Defaults to 200.\n\nrepeat_delay : int = None\n\nIf the animation in repeated, adds a delay in milliseconds before repeating the animation. Defaults to None.\n\nrepeat : bool = True\n\nControls whether the animation should repeat when the sequence of frames is completed. Defaults to True.\n\nblit : bool = False\n\nControls whether blitting is used to optimize drawing. Defaults to False."
  },
  {
    "objectID": "reference/PlotnineAnimation.html#notes",
    "href": "reference/PlotnineAnimation.html#notes",
    "title": " plotnine.animation.PlotnineAnimation",
    "section": "Notes",
    "text": "Notes\n\nThe plots should have the same facet and the facet should not have fixed x and y scales.\nThe scales of all the plots should have the same limits. It is a good idea to create a scale (with limits) for each aesthetic and add them to all the plots."
  },
  {
    "objectID": "reference/typing.html",
    "href": "reference/typing.html",
    "title": "Typing Information",
    "section": "",
    "text": "DataFrameConvertible()\n\n\nObject that can be converted to a DataFrame\n\n\n\n\n\n\nto_pandas()\n\n\nConvert to pandas dataframe\n\n\n\n\n\npd.DataFrame\n\nPandas representation of this object.\n\n\n\n\n\n\n\n\n\n\nPTransform()\n\n\nTransform function\n\n\n\n\n\n\n__call__(x)"
  },
  {
    "objectID": "reference/typing.html#protocols",
    "href": "reference/typing.html#protocols",
    "title": "Typing Information",
    "section": "",
    "text": "DataFrameConvertible()\n\n\nObject that can be converted to a DataFrame\n\n\n\n\n\n\nto_pandas()\n\n\nConvert to pandas dataframe\n\n\n\n\n\npd.DataFrame\n\nPandas representation of this object.\n\n\n\n\n\n\n\n\n\n\nPTransform()\n\n\nTransform function\n\n\n\n\n\n\n__call__(x)"
  },
  {
    "objectID": "reference/typing.html#type-variables",
    "href": "reference/typing.html#type-variables",
    "title": "Typing Information",
    "section": "Type Variables",
    "text": "Type Variables\n\n TFloatArrayLike\n\nTypeVar(\"TFloatArrayLike\", bound=FloatArrayLike)"
  },
  {
    "objectID": "reference/typing.html#type-aliases",
    "href": "reference/typing.html#type-aliases",
    "title": "Typing Information",
    "section": "Type Aliases",
    "text": "Type Aliases\n\n AnyArray\n\nNDArray[Any]\n\n\n\n BoolArray\n\nNDArray[np.bool_]\n\n\n\n FloatArray\n\nNDArray[np.float64]\n\n\n\n IntArray\n\nNDArray[np.int64]\n\n\n\n StrArray\n\nNDArray[np.str_]\n\n\n\n AnySeries\n\npd.Series[Any]\n\n\n\n IntSeries\n\npd.Series[int]\n\n\n\n FloatSeries\n\npd.Series[float]\n\n\n\n AnyArrayLike\n\nAnyArray | pd.Series[Any] | Sequence[Any]\n\n\n\n IntArrayLike\n\nIntArray | IntSeries | Sequence[int]\n\n\n\n FloatArrayLike\n\nFloatArray | FloatSeries | Sequence[float]\n\n\n\n Data\n\npd.DataFrame | Callable[[pd.DataFrame], pd.DataFrame]\n\n\n\n DataLike\n\nData | DataFrameConvertible\n\n\n\n LayerData\n\npd.DataFrame | Callable[[pd.DataFrame], pd.DataFrame]\n\n\n\n LayerDataLike\n\nLayerData | DataFrameConvertible\n\n\n\n ColorLike\n\nstr\n\n\n\n ColorsLike\n\n(    ColorLike | list[ColorLike] | pd.Series[ColorLike] | StrArray)\n\n\n\n FigureFormat\n\nLiteral[\"png\", \"retina\", \"jpeg\", \"jpg\", \"svg\", \"pdf\"]\n\n\n\n FacetSpaceRatios\n\ndict[Literal[\"x\", \"y\"], Sequence[float]]\n\n\n\n StripPosition\n\nLiteral[\"top\", \"right\"]\n\n\n\n ScaledAestheticsName\n\nLiteral[    \"x\",    \"xmin\",    \"xmax\",    \"xend\",    \"xintercept\",    \"y\",    \"ymin\",    \"ymax\",    \"yend\",    \"yintercept\",    \"alpha\",    \"color\",    \"colour\",    \"fill\",    \"linetype\",    \"shape\",    \"size\",    \"stroke\",    # boxplot    \"ymax_final\",    \"ymin_final\",    \"lower\",    \"middle\",    \"upper\",]\n\n\n\n CoordRange\n\ntuple[float, float]\n\n\n\n SidePosition\n\nLiteral[\"left\", \"right\", \"top\", \"bottom\"]\n\n\n\n LegendPosition\n\n(    Literal[\"left\", \"right\", \"top\", \"bottom\", \"inside\"] | tuple[float, float])\n\n\n\n Orientation\n\nLiteral[\"horizontal\", \"vertical\"]\n\n\n\n GuideKind\n\nLiteral[\"legend\", \"colorbar\", \"colourbar\"]\n\n\n\n NoGuide\n\nLiteral[\"none\", False]\n\n\n\n VerticalJustification\n\nLiteral[\"bottom\", \"center\", \"top\"]\n\n\n\n HorizontalJustification\n\nLiteral[\"left\", \"center\", \"right\"]\n\n\n\n TextJustification\n\n(    VerticalJustification | HorizontalJustification | Literal[\"baseline\"])\n\n\n\n TransformCol\n\nCallable[[FloatSeries], FloatSeries | FloatArray]"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "API Reference",
    "section": "",
    "text": "ggplot\nCreate a new ggplot object\n\n\nqplot\nQuick plot\n\n\nwatermark\nAdd watermark to plot\n\n\nlayer\nLayer\n\n\nPlotnineAnimation\nAnimation using ggplot objects\n\n\nsave_as_pdf_pages\nSave multiple ggplot objects to a PDF file, one per page.\n\n\n\n\n\n\n\nAesthetics are the visual properties of a plot. The following functions control how the data (and calculations based on the data) is mapped to the aesthetics.\n\n\n\n\naes\nCreate aesthetic mappings\n\n\nafter_stat\nEvaluate mapping after statistic has been calculated\n\n\nafter_scale\nEvaluate mapping after variable has been mapped to the scale\n\n\nstage\nStage allows you evaluating mapping at more than one stage\n\n\n\n\n\n\n\nGeometric objects (geoms) are responsible for the visual representation of data points. geom_* classes determine the kind of geometric objects and every plot must have at least one geom added to it. The distinct visual aspects of the representation are controlled by the aes mapping.\n\n\n\n\ngeom\nBase class of all Geoms\n\n\n\n\n\n\n\n\ngeom_abline\nLines specified by slope and intercept\n\n\ngeom_area\nArea plot\n\n\ngeom_bar\nBar plot\n\n\ngeom_blank\nAn empty plot\n\n\ngeom_boxplot\nBox and whiskers plot\n\n\ngeom_col\nBar plot with base on the x-axis\n\n\ngeom_count\nPlot overlapping points\n\n\ngeom_crossbar\nVertical interval represented by a crossbar\n\n\ngeom_density\nSmooth density estimate\n\n\ngeom_density_2d\n2D density estimate\n\n\ngeom_dotplot\nDot plot\n\n\ngeom_errorbar\nVertical interval represented as an errorbar\n\n\ngeom_errorbarh\nHorizontal interval represented as an errorbar\n\n\ngeom_freqpoly\nFrequency polygon\n\n\ngeom_bin_2d\nHeatmap of 2d bin counts\n\n\ngeom_histogram\nHistogram\n\n\ngeom_hline\nHorizontal line\n\n\ngeom_jitter\nScatter plot with points jittered to reduce overplotting\n\n\ngeom_label\nTextual annotations with a background\n\n\ngeom_line\nConnected points\n\n\ngeom_linerange\nVertical interval represented by lines\n\n\ngeom_map\nDraw map feature\n\n\ngeom_path\nConnected points\n\n\ngeom_point\nPlot points (Scatter plot)\n\n\ngeom_pointdensity\nScatterplot with density estimation at each point\n\n\ngeom_pointrange\nVertical interval represented by a line with a point\n\n\ngeom_polygon\nPolygon, a filled path\n\n\ngeom_quantile\nQuantile lines from a quantile regression\n\n\ngeom_qq\nQuantile-Quantile plot\n\n\ngeom_qq_line\nQuantile-Quantile Line plot\n\n\ngeom_raster\nRasterized Rectangles specified using center points\n\n\ngeom_rect\nRectangles\n\n\ngeom_ribbon\nRibbon plot\n\n\ngeom_rug\nMarginal rug plot\n\n\ngeom_segment\nLine segments\n\n\ngeom_sina\nDraw a sina plot\n\n\ngeom_smooth\nA smoothed conditional mean\n\n\ngeom_spoke\nLine segment parameterised by location, direction and distance\n\n\ngeom_step\nStepped connected points\n\n\ngeom_text\nTextual annotations\n\n\ngeom_tile\nRectangles specified using a center points\n\n\ngeom_violin\nViolin Plot\n\n\ngeom_vline\nVertical line\n\n\n\n\n\n\n\n\n\n\nannotate\nCreate an annotation layer\n\n\nannotation_logticks\nMarginal log ticks.\n\n\nannotation_stripes\nAlternating stripes, centered around each label.\n\n\narrow\nDefine arrow (actually an arrowhead)\n\n\n\n\n\n\n\n\n\n\n\nlabs\nAdd labels for any aesthetics with a scale or title, subtitle & caption\n\n\nxlab\nLabel/name for the x aesthetic\n\n\nylab\nLabel/name for the y aesthetic\n\n\nggtitle\nCreate plot title\n\n\n\n\n\n\n\n\nStatistical transformations (stats) do aggregations and other computations on data before it is drawn out. stat_* determine the type of computation done on the data. Different types of computations yield varied results, so a stat must be paired with a geom that can represent all or some of the computations.\n\n\n\n\nstat\nBase class of all stats\n\n\n\n\n\n\n\n\nstat_bin\nCount cases in each interval\n\n\nstat_bin_2d\n2 Dimensional bin counts\n\n\nstat_bindot\nBinning for a dot plot\n\n\nstat_boxplot\nCompute boxplot statistics\n\n\nstat_count\nCounts the number of cases at each x position\n\n\nstat_density\nCompute density estimate\n\n\nstat_density_2d\nCompute 2D kernel density estimation\n\n\nstat_ecdf\nEmpirical Cumulative Density Function\n\n\nstat_ellipse\nCalculate normal confidence interval ellipse\n\n\nstat_function\nSuperimpose a function onto a plot\n\n\nstat_hull\n2 Dimensional Convex Hull\n\n\nstat_identity\nIdentity (do nothing) statistic\n\n\nstat_qq\nCalculation for quantile-quantile plot\n\n\nstat_qq_line\nCalculate line through quantile-quantile plot\n\n\nstat_quantile\nCompute quantile regression lines\n\n\nstat_sina\nCompute Sina plot values\n\n\nstat_smooth\nCalculate a smoothed conditional mean\n\n\nstat_sum\nSum unique values\n\n\nstat_summary\nCalculate summary statistics depending on x\n\n\nstat_summary_bin\nSummarise y values at x intervals\n\n\nstat_unique\nRemove duplicates\n\n\nstat_ydensity\nDensity estimate\n\n\n\n\n\n\n\nFaceting is a way to subset data and plot it on different panels.\n\n\n\n\nfacet\nBase class for all facets\n\n\n\n\n\n\n\n\nfacet_grid\nWrap 1D Panels onto 2D surface\n\n\nfacet_null\nA single Panel\n\n\nfacet_wrap\nWrap 1D Panels onto 2D surface\n\n\nlabeller\nFacet Strip Labelling\n\n\nas_labeller\nCoerse to labeller\n\n\nlabel_value\nKeep value as the label\n\n\nlabel_both\nConcatenate the facet variable with the value\n\n\nlabel_context\nCreate an unabiguous label string\n\n\n\n\n\n\n\nScales control the mapping from data to aesthetics. They take data and adjust it to fit the different aspects of the visual sense i.e. length, colour, size and shape.\n\n\n\n\n\n\nscale\nBase class for all scales\n\n\nscale_discrete\nBase class for all discrete scales\n\n\nscale_continuous\nBase class for all continuous scales\n\n\nscale_datetime\nBase class for all date/datetime scales\n\n\n\n\n\n\n\n\n\n\n\nscale_alpha\nContinuous Alpha Scale\n\n\nscale_alpha_discrete\nDiscrete Alpha Scale\n\n\nscale_alpha_continuous\nalias of scale_alpha\n\n\nscale_alpha_datetime\nDatetime Alpha Scale\n\n\n\n\n\n\n\n\n\n\n\nscale_alpha_identity\nNo alpha scaling\n\n\nscale_color_identity\nNo color scaling\n\n\nscale_colour_identity\nalias of scale_color_identity\n\n\nscale_fill_identity\nNo color scaling\n\n\nscale_linetype_identity\nNo linetype scaling\n\n\nscale_shape_identity\nNo shape scaling\n\n\nscale_size_identity\nNo size scaling\n\n\n\n\n\n\n\n\n\n\n\nscale_color_brewer\nSequential, diverging and qualitative discrete color scales\n\n\nscale_color_continuous\nalias of scale_color_cmap\n\n\nscale_color_cmap\nCreate color scales using Matplotlib colormaps\n\n\nscale_color_desaturate\nCreate a desaturated color gradient\n\n\nscale_color_datetime\nDatetime color scale\n\n\nscale_color_discrete\nalias of scale_color_hue\n\n\nscale_color_distiller\nSequential and diverging continuous color scales\n\n\nscale_color_gradient\nCreate a 2 point color gradient\n\n\nscale_color_gradient2\nCreate a 3 point diverging color gradient\n\n\nscale_color_gradientn\nCreate a n color gradient\n\n\nscale_color_gray\nalias of scale_color_grey\n\n\nscale_color_grey\nSequential grey color scale.\n\n\nscale_color_hue\nQualitative color scale with evenly spaced hues\n\n\nscale_fill_brewer\nSequential, diverging and qualitative color scales\n\n\nscale_fill_cmap\nCreate color scales using Matplotlib colormaps\n\n\nscale_fill_continuous\nalias of scale_fill_cmap\n\n\nscale_fill_datetime\nDatetime fill scale\n\n\nscale_fill_desaturate\nCreate a desaturated color gradient\n\n\nscale_fill_discrete\nalias of scale_fill_hue\n\n\nscale_fill_distiller\nSequential, diverging continuous color scales\n\n\nscale_fill_gradient\nCreate a 2 point color gradient\n\n\nscale_fill_gradient2\nCreate a 3 point diverging color gradient\n\n\nscale_fill_gradientn\nCreate a n color gradient\n\n\nscale_fill_gray\nalias of scale_fill_grey\n\n\nscale_fill_grey\nSequential grey color scale.\n\n\nscale_fill_hue\nQualitative color scale with evenly spaced hues\n\n\n\n\n\n\n\n\n\n\n\nscale_alpha_manual\nCustom discrete alpha scale\n\n\nscale_color_manual\nCustom discrete color scale\n\n\nscale_colour_manual\nalias of scale_color_manual\n\n\nscale_fill_manual\nCustom discrete fill scale\n\n\nscale_linetype_manual\nCustom discrete linetype scale\n\n\nscale_shape_manual\nCustom discrete shape scale\n\n\nscale_size_manual\nCustom discrete size scale\n\n\n\n\n\n\n\n\n\n\n\nscale_linetype\nScale for line patterns\n\n\nscale_linetype_discrete\nalias of scale_linetype\n\n\n\n\n\n\n\n\n\n\n\nscale_shape\nScale for shapes\n\n\nscale_shape_discrete\nalias of scale_shape\n\n\n\n\n\n\n\n\n\n\n\nscale_size\nalias of scale_size_continuous\n\n\nscale_size_area\nContinuous area size scale\n\n\nscale_size_continuous\nContinuous area size scale\n\n\nscale_size_discrete\nDiscrete area size scale\n\n\nscale_size_radius\nContinuous radius size scale\n\n\nscale_size_datetime\nDatetime area-size scale\n\n\n\n\n\n\n\n\n\n\n\nscale_x_continuous\nContinuous x position\n\n\nscale_x_date\nalias of scale_x_datetime\n\n\nscale_x_datetime\nContinuous x position for datetime data points\n\n\nscale_x_discrete\nDiscrete x position\n\n\nscale_x_log10\nContinuous x position log10 transformed scale\n\n\nscale_x_reverse\nContinuous x position reverse transformed scale\n\n\nscale_x_sqrt\nContinuous x position sqrt transformed scale\n\n\nscale_x_symlog\nContinuous x position symmetric logarithm transformed scale\n\n\nscale_x_timedelta\nContinuous x position for timedelta data points\n\n\nscale_y_continuous\nContinuous y position\n\n\nscale_y_date\nalias of scale_y_datetime\n\n\nscale_y_datetime\nContinuous y position for datetime data points\n\n\nscale_y_discrete\nDiscrete y position\n\n\nscale_y_log10\nContinuous y position log10 transformed scale\n\n\nscale_y_reverse\nContinuous y position reverse transformed scale\n\n\nscale_y_sqrt\nContinuous y position sqrt transformed scale\n\n\nscale_y_symlog\nContinuous y position symmetric logarithm transformed scale\n\n\nscale_y_timedelta\nContinuous y position for timedelta data points\n\n\n\n\n\n\n\n\n\n\n\nlims\nSet aesthetic limits\n\n\nxlim\nSet x-axis limits\n\n\nylim\nSet y-axis limits\n\n\nexpand_limits\nExpand the limits any aesthetic using data\n\n\n\n\n\n\n\n\nGuides allow you to interpret data represented on a scales. Guides include the x and y axes, legends and colorbars.\n\n\n\n\nguide\nBase class for all guides\n\n\n\n\n\n\n\n\nguides\nGuides for each scale\n\n\nguide_legend\nLegend guide\n\n\nguide_colorbar\nGuide colorbar\n\n\n\n\n\n\n\nOverlapping objects can be visualized better if their positions are adjusted. That is what the position_* class do. Each geom is associated with one position adjustment class.\n\n\n\n\nposition\nBase class for all positions\n\n\n\n\n\n\n\n\nposition_dodge\nDodge overlaps and place objects side-by-side\n\n\nposition_dodge2\nDodge overlaps and place objects side-by-side\n\n\nposition_fill\nNormalise stacked objects to unit height\n\n\nposition_identity\nDo not adjust the position\n\n\nposition_jitter\nJitter points to avoid overplotting\n\n\nposition_jitterdodge\nDodge and jitter to minimise overlap\n\n\nposition_nudge\nNudge points\n\n\nposition_stack\nStack plotted objects on top of each other\n\n\n\n\n\n\n\nThemes control the visual appearance of the non-data elements the plot.\n\n\n\n\ntheme\nBase class for themes\n\n\n\n\n\n\n\n\ntheme_538\nTheme in the likeness of fivethirtyeight.com plots\n\n\ntheme_bw\nWhite background with black gridlines\n\n\ntheme_classic\nA classic-looking theme, with x & y axis lines and no gridlines\n\n\ntheme_dark\nThe dark cousin of theme_light\n\n\ntheme_gray\nA gray background with white gridlines.\n\n\ntheme_grey\nalias of theme_gray\n\n\ntheme_light\nA theme similar to theme_linedraw\n\n\ntheme_linedraw\nA theme with only black lines of various widths on white backgrounds\n\n\ntheme_matplotlib\nThe default matplotlib look and feel.\n\n\ntheme_minimal\nA minimalistic theme with no background annotations\n\n\ntheme_seaborn\nTheme for seaborn.\n\n\ntheme_tufte\nTufte Maximal Data, Minimal Ink Theme\n\n\ntheme_void\nA classic-looking theme, with x & y axis lines and\n\n\ntheme_xkcd\nxkcd theme\n\n\n\n\n\n\nThese define aspects of a plot that can be themed. They can be used to create a new theme or modify an existing theme. They define the keyword arguments to theme. Users should never create instances of themeable.\n\n\n\n\nthemeable\nAbstract class of things that can be themed.\n\n\n\n\n\n\n\n\naspect_ratio\nAspect ratio of the panel(s)\n\n\naxis_line\nx & y axis lines\n\n\naxis_line_x\nx-axis line\n\n\naxis_line_y\ny-axis line\n\n\naxis_text\nAxis tick labels\n\n\naxis_text_x\nx-axis tick labels\n\n\naxis_text_y\ny-axis tick labels\n\n\naxis_ticks\nx & y major and minor axis tick lines\n\n\naxis_ticks_length\nAxis tick length\n\n\naxis_ticks_length_major\nAxis major-tick length\n\n\naxis_ticks_length_major_x\nx-axis major-tick length\n\n\naxis_ticks_length_major_y\ny-axis major-tick length\n\n\naxis_ticks_length_minor\nAxis minor-tick length\n\n\naxis_ticks_length_minor_x\nx-axis minor-tick length\n\n\naxis_ticks_length_minor_y\nx-axis minor-tick length\n\n\naxis_ticks_major\nx & y axis major tick lines\n\n\naxis_ticks_major_x\nx-axis major tick lines\n\n\naxis_ticks_major_y\ny-axis major tick lines\n\n\naxis_ticks_minor\nx & y axis minor tick lines\n\n\naxis_ticks_minor_x\nx-axis tick lines\n\n\naxis_ticks_minor_y\ny-axis minor tick lines\n\n\naxis_ticks_pad\nAxis tick padding\n\n\naxis_ticks_pad_major\nAxis major-tick padding\n\n\naxis_ticks_pad_major_x\nx-axis major-tick padding\n\n\naxis_ticks_pad_major_y\ny-axis major-tick padding\n\n\naxis_ticks_pad_minor\nAxis minor-tick padding\n\n\naxis_ticks_pad_minor_x\nx-axis minor-tick padding\n\n\naxis_ticks_pad_minor_y\ny-axis minor-tick padding\n\n\naxis_ticks_x\nx major and minor axis tick lines\n\n\naxis_ticks_y\ny major and minor axis tick lines\n\n\naxis_title\nAxis labels\n\n\naxis_title_x\nx axis label\n\n\naxis_title_y\ny axis label\n\n\ndpi\nDPI with which to draw/save the figure\n\n\nfigure_size\nFigure size in inches\n\n\nlegend_background\nLegend background\n\n\nlegend_box\nHow to box up multiple legends\n\n\nlegend_box_background\nLegend box background\n\n\nlegend_box_just\nJustification of guide boxes\n\n\nlegend_box_margin\nPadding between the legends and the box\n\n\nlegend_box_spacing\nSpacing between the legend and the plotting area\n\n\nlegend_direction\nLayout items in the legend\n\n\nlegend_key_spacing\nSpacing between two entries in a legend\n\n\nlegend_key_spacing_x\nHorizontal spacing between two entries in a legend\n\n\nlegend_key_spacing_y\nVertical spacing between two entries in a legend\n\n\nlegend_frame\nFrame around colorbar\n\n\nlegend_justification\nJustification of any legend\n\n\nlegend_justification_bottom\nJustification of legends placed at the bottom\n\n\nlegend_justification_inside\nJustification of legends placed inside the axes\n\n\nlegend_justification_left\nJustification of legends placed on the left\n\n\nlegend_justification_right\nJustification of legends placed on the right\n\n\nlegend_justification_top\nJustification of legends placed at the top\n\n\nlegend_key\nLegend key background\n\n\nlegend_key_height\nLegend key background height\n\n\nlegend_key_size\nLegend key background width and height\n\n\nlegend_key_width\nLegend key background width\n\n\nlegend_margin\nPadding between the legend and the inner box\n\n\nlegend_position\nLocation of legend\n\n\nlegend_position_inside\nLocation of legend\n\n\nlegend_spacing\nSpacing between two adjacent legends\n\n\nlegend_text\nLegend text\n\n\nlegend_text_colorbar\nColorbar text\n\n\nlegend_text_legend\nLegend text for the common legend\n\n\nlegend_text_position\nPosition of the legend text\n\n\nlegend_ticks_length\nLength of ticks in the legend\n\n\nlegend_title\nLegend title\n\n\nlegend_title_position\nPosition of legend title\n\n\nline\nAll line elements\n\n\npanel_background\nPanel background\n\n\npanel_border\nPanel border\n\n\npanel_grid\nGrid lines\n\n\npanel_grid_major\nMajor grid lines\n\n\npanel_grid_major_x\nVertical major grid lines\n\n\npanel_grid_major_y\nHorizontal major grid lines\n\n\npanel_grid_minor\nMinor grid lines\n\n\npanel_grid_minor_x\nVertical minor grid lines\n\n\npanel_grid_minor_y\nHorizontal minor grid lines\n\n\npanel_ontop\nPlace panel background & gridlines over/under the data layers\n\n\npanel_spacing\nSpacing between the facet panels\n\n\npanel_spacing_x\nHorizontal spacing between the facet panels\n\n\npanel_spacing_y\nVertical spacing between the facet panels\n\n\nplot_background\nPlot background\n\n\nplot_caption\nPlot caption\n\n\nplot_margin\nPlot Margin\n\n\nplot_margin_bottom\nPlot Margin at the bottom\n\n\nplot_margin_left\nPlot Margin on the left\n\n\nplot_margin_right\nPlot Margin on the right\n\n\nplot_margin_top\nPlot Margin at the top\n\n\nplot_subtitle\nPlot subtitle\n\n\nplot_title\nPlot title\n\n\nrect\nAll rectangle elements\n\n\nstrip_align\nAlignment of the strip & its background w.r.t the panel border\n\n\nstrip_align_x\nVertical alignment of the strip & its background w.r.t the panel border\n\n\nstrip_align_y\nHorizontal alignment of the strip & its background w.r.t the panel border\n\n\nstrip_background\nFacet label background\n\n\nstrip_background_x\nHorizontal facet label background\n\n\nstrip_background_y\nVertical facet label background\n\n\nstrip_text\nFacet labels along both axes\n\n\nstrip_text_x\nFacet labels along the horizontal axis\n\n\nstrip_text_y\nFacet labels along the vertical axis\n\n\nsubplots_adjust\n\n\n\nsvg_usefonts\nHow to renderer fonts for svg images\n\n\ntext\nAll text elements in the plot\n\n\ntitle\nAll titles on the plot\n\n\n\n\n\n\n\n\n\n\n\ntheme_set\nChange the current(default) theme\n\n\ntheme_get\nReturn the default theme\n\n\ntheme_update\nModify elements of the current theme\n\n\n\n\n\n\n\n\nelement_line\ntheme element: line\n\n\nelement_rect\nTheme element: Rectangle\n\n\nelement_text\nTheme element: Text\n\n\nelement_blank\nTheme element: Blank\n\n\n\n\n\n\n\n\nCoordinate systems put together the two position scales to produce a 2d location.\n\n\n\n\ncoord\nBase class for all coordinate systems\n\n\n\n\n\n\n\n\ncoord_cartesian\nCartesian coordinate system\n\n\ncoord_equal\nCartesian coordinates with fixed relationship between x and y scales\n\n\ncoord_fixed\nCartesian coordinates with fixed relationship between x and y scales\n\n\ncoord_flip\nFlipped cartesian coordinates\n\n\ncoord_trans\nTransformed cartesian coordinate system\n\n\n\n\n\n\n\nWhen working interactively, some of the options make it convenient to create plots that have a common look and feel. Another way to do it, to set a default theme using theme_set().\n\n\n\n\naspect_ratio\nDefault aspect ratio used by the themes\n\n\nbase_family\nThe base font family for all text that is part of the theme.\n\n\nbase_margin\nA size that is proportional of the figure width and\n\n\nclose_all_figures\nDevelopment flag, e.g. set to True to prevent\n\n\ncurrent_theme\nTheme used when none is added to the ggplot object\n\n\ndpi\nDefault DPI used by the themes\n\n\nfigure_size\nDefault figure size in inches\n\n\nfigure_format\nThe format for the inline figures outputted by the jupyter kernel.\n\n\nget_option\nGet package option\n\n\nset_option\nSet package option\n\n\n\n\n\n\n\nThese datasets ship with the plotnine and you can import them with from the plotnine.data sub-package.\n\n\n\n\ndiamonds\nPrices of 50,000 round cut diamonds\n\n\neconomics\nUS economic time series.\n\n\neconomics_long\nUS economic time series.\n\n\nfaithful\nOld Faithful Geyser Data\n\n\nfaithfuld\nOld Faithful Geyser Data\n\n\nhuron\nLevel of Lake Huron 1875–1972\n\n\nluv_colours\ncolors in Luv space.\n\n\nmeat\nUS Meat Production\n\n\nmidwest\nMidwest demographics.\n\n\nmpg\nFuel economy data from 1999 and 2008 for 38 popular models of car\n\n\nmsleep\nAn updated and expanded version of the mammals sleep dataset.\n\n\nmtcars\nMotor Trend Car Road Tests\n\n\npageviews\n\n\n\npresidential\nTerms of 11 presidents from Eisenhower to Obama.\n\n\nseals\nVector field of seal movements.\n\n\ntxhousing\nHousing sales in TX."
  },
  {
    "objectID": "reference/index.html#creating-a-plot",
    "href": "reference/index.html#creating-a-plot",
    "title": "API Reference",
    "section": "",
    "text": "ggplot\nCreate a new ggplot object\n\n\nqplot\nQuick plot\n\n\nwatermark\nAdd watermark to plot\n\n\nlayer\nLayer\n\n\nPlotnineAnimation\nAnimation using ggplot objects\n\n\nsave_as_pdf_pages\nSave multiple ggplot objects to a PDF file, one per page."
  },
  {
    "objectID": "reference/index.html#mapping-aesthetics",
    "href": "reference/index.html#mapping-aesthetics",
    "title": "API Reference",
    "section": "",
    "text": "Aesthetics are the visual properties of a plot. The following functions control how the data (and calculations based on the data) is mapped to the aesthetics.\n\n\n\n\naes\nCreate aesthetic mappings\n\n\nafter_stat\nEvaluate mapping after statistic has been calculated\n\n\nafter_scale\nEvaluate mapping after variable has been mapped to the scale\n\n\nstage\nStage allows you evaluating mapping at more than one stage"
  },
  {
    "objectID": "reference/index.html#geoms",
    "href": "reference/index.html#geoms",
    "title": "API Reference",
    "section": "",
    "text": "Geometric objects (geoms) are responsible for the visual representation of data points. geom_* classes determine the kind of geometric objects and every plot must have at least one geom added to it. The distinct visual aspects of the representation are controlled by the aes mapping.\n\n\n\n\ngeom\nBase class of all Geoms\n\n\n\n\n\n\n\n\ngeom_abline\nLines specified by slope and intercept\n\n\ngeom_area\nArea plot\n\n\ngeom_bar\nBar plot\n\n\ngeom_blank\nAn empty plot\n\n\ngeom_boxplot\nBox and whiskers plot\n\n\ngeom_col\nBar plot with base on the x-axis\n\n\ngeom_count\nPlot overlapping points\n\n\ngeom_crossbar\nVertical interval represented by a crossbar\n\n\ngeom_density\nSmooth density estimate\n\n\ngeom_density_2d\n2D density estimate\n\n\ngeom_dotplot\nDot plot\n\n\ngeom_errorbar\nVertical interval represented as an errorbar\n\n\ngeom_errorbarh\nHorizontal interval represented as an errorbar\n\n\ngeom_freqpoly\nFrequency polygon\n\n\ngeom_bin_2d\nHeatmap of 2d bin counts\n\n\ngeom_histogram\nHistogram\n\n\ngeom_hline\nHorizontal line\n\n\ngeom_jitter\nScatter plot with points jittered to reduce overplotting\n\n\ngeom_label\nTextual annotations with a background\n\n\ngeom_line\nConnected points\n\n\ngeom_linerange\nVertical interval represented by lines\n\n\ngeom_map\nDraw map feature\n\n\ngeom_path\nConnected points\n\n\ngeom_point\nPlot points (Scatter plot)\n\n\ngeom_pointdensity\nScatterplot with density estimation at each point\n\n\ngeom_pointrange\nVertical interval represented by a line with a point\n\n\ngeom_polygon\nPolygon, a filled path\n\n\ngeom_quantile\nQuantile lines from a quantile regression\n\n\ngeom_qq\nQuantile-Quantile plot\n\n\ngeom_qq_line\nQuantile-Quantile Line plot\n\n\ngeom_raster\nRasterized Rectangles specified using center points\n\n\ngeom_rect\nRectangles\n\n\ngeom_ribbon\nRibbon plot\n\n\ngeom_rug\nMarginal rug plot\n\n\ngeom_segment\nLine segments\n\n\ngeom_sina\nDraw a sina plot\n\n\ngeom_smooth\nA smoothed conditional mean\n\n\ngeom_spoke\nLine segment parameterised by location, direction and distance\n\n\ngeom_step\nStepped connected points\n\n\ngeom_text\nTextual annotations\n\n\ngeom_tile\nRectangles specified using a center points\n\n\ngeom_violin\nViolin Plot\n\n\ngeom_vline\nVertical line\n\n\n\n\n\n\n\n\n\n\nannotate\nCreate an annotation layer\n\n\nannotation_logticks\nMarginal log ticks.\n\n\nannotation_stripes\nAlternating stripes, centered around each label.\n\n\narrow\nDefine arrow (actually an arrowhead)\n\n\n\n\n\n\n\n\n\n\n\nlabs\nAdd labels for any aesthetics with a scale or title, subtitle & caption\n\n\nxlab\nLabel/name for the x aesthetic\n\n\nylab\nLabel/name for the y aesthetic\n\n\nggtitle\nCreate plot title"
  },
  {
    "objectID": "reference/index.html#stats",
    "href": "reference/index.html#stats",
    "title": "API Reference",
    "section": "",
    "text": "Statistical transformations (stats) do aggregations and other computations on data before it is drawn out. stat_* determine the type of computation done on the data. Different types of computations yield varied results, so a stat must be paired with a geom that can represent all or some of the computations.\n\n\n\n\nstat\nBase class of all stats\n\n\n\n\n\n\n\n\nstat_bin\nCount cases in each interval\n\n\nstat_bin_2d\n2 Dimensional bin counts\n\n\nstat_bindot\nBinning for a dot plot\n\n\nstat_boxplot\nCompute boxplot statistics\n\n\nstat_count\nCounts the number of cases at each x position\n\n\nstat_density\nCompute density estimate\n\n\nstat_density_2d\nCompute 2D kernel density estimation\n\n\nstat_ecdf\nEmpirical Cumulative Density Function\n\n\nstat_ellipse\nCalculate normal confidence interval ellipse\n\n\nstat_function\nSuperimpose a function onto a plot\n\n\nstat_hull\n2 Dimensional Convex Hull\n\n\nstat_identity\nIdentity (do nothing) statistic\n\n\nstat_qq\nCalculation for quantile-quantile plot\n\n\nstat_qq_line\nCalculate line through quantile-quantile plot\n\n\nstat_quantile\nCompute quantile regression lines\n\n\nstat_sina\nCompute Sina plot values\n\n\nstat_smooth\nCalculate a smoothed conditional mean\n\n\nstat_sum\nSum unique values\n\n\nstat_summary\nCalculate summary statistics depending on x\n\n\nstat_summary_bin\nSummarise y values at x intervals\n\n\nstat_unique\nRemove duplicates\n\n\nstat_ydensity\nDensity estimate"
  },
  {
    "objectID": "reference/index.html#facets",
    "href": "reference/index.html#facets",
    "title": "API Reference",
    "section": "",
    "text": "Faceting is a way to subset data and plot it on different panels.\n\n\n\n\nfacet\nBase class for all facets\n\n\n\n\n\n\n\n\nfacet_grid\nWrap 1D Panels onto 2D surface\n\n\nfacet_null\nA single Panel\n\n\nfacet_wrap\nWrap 1D Panels onto 2D surface\n\n\nlabeller\nFacet Strip Labelling\n\n\nas_labeller\nCoerse to labeller\n\n\nlabel_value\nKeep value as the label\n\n\nlabel_both\nConcatenate the facet variable with the value\n\n\nlabel_context\nCreate an unabiguous label string"
  },
  {
    "objectID": "reference/index.html#scales",
    "href": "reference/index.html#scales",
    "title": "API Reference",
    "section": "",
    "text": "Scales control the mapping from data to aesthetics. They take data and adjust it to fit the different aspects of the visual sense i.e. length, colour, size and shape.\n\n\n\n\n\n\nscale\nBase class for all scales\n\n\nscale_discrete\nBase class for all discrete scales\n\n\nscale_continuous\nBase class for all continuous scales\n\n\nscale_datetime\nBase class for all date/datetime scales\n\n\n\n\n\n\n\n\n\n\n\nscale_alpha\nContinuous Alpha Scale\n\n\nscale_alpha_discrete\nDiscrete Alpha Scale\n\n\nscale_alpha_continuous\nalias of scale_alpha\n\n\nscale_alpha_datetime\nDatetime Alpha Scale\n\n\n\n\n\n\n\n\n\n\n\nscale_alpha_identity\nNo alpha scaling\n\n\nscale_color_identity\nNo color scaling\n\n\nscale_colour_identity\nalias of scale_color_identity\n\n\nscale_fill_identity\nNo color scaling\n\n\nscale_linetype_identity\nNo linetype scaling\n\n\nscale_shape_identity\nNo shape scaling\n\n\nscale_size_identity\nNo size scaling\n\n\n\n\n\n\n\n\n\n\n\nscale_color_brewer\nSequential, diverging and qualitative discrete color scales\n\n\nscale_color_continuous\nalias of scale_color_cmap\n\n\nscale_color_cmap\nCreate color scales using Matplotlib colormaps\n\n\nscale_color_desaturate\nCreate a desaturated color gradient\n\n\nscale_color_datetime\nDatetime color scale\n\n\nscale_color_discrete\nalias of scale_color_hue\n\n\nscale_color_distiller\nSequential and diverging continuous color scales\n\n\nscale_color_gradient\nCreate a 2 point color gradient\n\n\nscale_color_gradient2\nCreate a 3 point diverging color gradient\n\n\nscale_color_gradientn\nCreate a n color gradient\n\n\nscale_color_gray\nalias of scale_color_grey\n\n\nscale_color_grey\nSequential grey color scale.\n\n\nscale_color_hue\nQualitative color scale with evenly spaced hues\n\n\nscale_fill_brewer\nSequential, diverging and qualitative color scales\n\n\nscale_fill_cmap\nCreate color scales using Matplotlib colormaps\n\n\nscale_fill_continuous\nalias of scale_fill_cmap\n\n\nscale_fill_datetime\nDatetime fill scale\n\n\nscale_fill_desaturate\nCreate a desaturated color gradient\n\n\nscale_fill_discrete\nalias of scale_fill_hue\n\n\nscale_fill_distiller\nSequential, diverging continuous color scales\n\n\nscale_fill_gradient\nCreate a 2 point color gradient\n\n\nscale_fill_gradient2\nCreate a 3 point diverging color gradient\n\n\nscale_fill_gradientn\nCreate a n color gradient\n\n\nscale_fill_gray\nalias of scale_fill_grey\n\n\nscale_fill_grey\nSequential grey color scale.\n\n\nscale_fill_hue\nQualitative color scale with evenly spaced hues\n\n\n\n\n\n\n\n\n\n\n\nscale_alpha_manual\nCustom discrete alpha scale\n\n\nscale_color_manual\nCustom discrete color scale\n\n\nscale_colour_manual\nalias of scale_color_manual\n\n\nscale_fill_manual\nCustom discrete fill scale\n\n\nscale_linetype_manual\nCustom discrete linetype scale\n\n\nscale_shape_manual\nCustom discrete shape scale\n\n\nscale_size_manual\nCustom discrete size scale\n\n\n\n\n\n\n\n\n\n\n\nscale_linetype\nScale for line patterns\n\n\nscale_linetype_discrete\nalias of scale_linetype\n\n\n\n\n\n\n\n\n\n\n\nscale_shape\nScale for shapes\n\n\nscale_shape_discrete\nalias of scale_shape\n\n\n\n\n\n\n\n\n\n\n\nscale_size\nalias of scale_size_continuous\n\n\nscale_size_area\nContinuous area size scale\n\n\nscale_size_continuous\nContinuous area size scale\n\n\nscale_size_discrete\nDiscrete area size scale\n\n\nscale_size_radius\nContinuous radius size scale\n\n\nscale_size_datetime\nDatetime area-size scale\n\n\n\n\n\n\n\n\n\n\n\nscale_x_continuous\nContinuous x position\n\n\nscale_x_date\nalias of scale_x_datetime\n\n\nscale_x_datetime\nContinuous x position for datetime data points\n\n\nscale_x_discrete\nDiscrete x position\n\n\nscale_x_log10\nContinuous x position log10 transformed scale\n\n\nscale_x_reverse\nContinuous x position reverse transformed scale\n\n\nscale_x_sqrt\nContinuous x position sqrt transformed scale\n\n\nscale_x_symlog\nContinuous x position symmetric logarithm transformed scale\n\n\nscale_x_timedelta\nContinuous x position for timedelta data points\n\n\nscale_y_continuous\nContinuous y position\n\n\nscale_y_date\nalias of scale_y_datetime\n\n\nscale_y_datetime\nContinuous y position for datetime data points\n\n\nscale_y_discrete\nDiscrete y position\n\n\nscale_y_log10\nContinuous y position log10 transformed scale\n\n\nscale_y_reverse\nContinuous y position reverse transformed scale\n\n\nscale_y_sqrt\nContinuous y position sqrt transformed scale\n\n\nscale_y_symlog\nContinuous y position symmetric logarithm transformed scale\n\n\nscale_y_timedelta\nContinuous y position for timedelta data points\n\n\n\n\n\n\n\n\n\n\n\nlims\nSet aesthetic limits\n\n\nxlim\nSet x-axis limits\n\n\nylim\nSet y-axis limits\n\n\nexpand_limits\nExpand the limits any aesthetic using data"
  },
  {
    "objectID": "reference/index.html#scale-guides",
    "href": "reference/index.html#scale-guides",
    "title": "API Reference",
    "section": "",
    "text": "Guides allow you to interpret data represented on a scales. Guides include the x and y axes, legends and colorbars.\n\n\n\n\nguide\nBase class for all guides\n\n\n\n\n\n\n\n\nguides\nGuides for each scale\n\n\nguide_legend\nLegend guide\n\n\nguide_colorbar\nGuide colorbar"
  },
  {
    "objectID": "reference/index.html#positions",
    "href": "reference/index.html#positions",
    "title": "API Reference",
    "section": "",
    "text": "Overlapping objects can be visualized better if their positions are adjusted. That is what the position_* class do. Each geom is associated with one position adjustment class.\n\n\n\n\nposition\nBase class for all positions\n\n\n\n\n\n\n\n\nposition_dodge\nDodge overlaps and place objects side-by-side\n\n\nposition_dodge2\nDodge overlaps and place objects side-by-side\n\n\nposition_fill\nNormalise stacked objects to unit height\n\n\nposition_identity\nDo not adjust the position\n\n\nposition_jitter\nJitter points to avoid overplotting\n\n\nposition_jitterdodge\nDodge and jitter to minimise overlap\n\n\nposition_nudge\nNudge points\n\n\nposition_stack\nStack plotted objects on top of each other"
  },
  {
    "objectID": "reference/index.html#themes",
    "href": "reference/index.html#themes",
    "title": "API Reference",
    "section": "",
    "text": "Themes control the visual appearance of the non-data elements the plot.\n\n\n\n\ntheme\nBase class for themes\n\n\n\n\n\n\n\n\ntheme_538\nTheme in the likeness of fivethirtyeight.com plots\n\n\ntheme_bw\nWhite background with black gridlines\n\n\ntheme_classic\nA classic-looking theme, with x & y axis lines and no gridlines\n\n\ntheme_dark\nThe dark cousin of theme_light\n\n\ntheme_gray\nA gray background with white gridlines.\n\n\ntheme_grey\nalias of theme_gray\n\n\ntheme_light\nA theme similar to theme_linedraw\n\n\ntheme_linedraw\nA theme with only black lines of various widths on white backgrounds\n\n\ntheme_matplotlib\nThe default matplotlib look and feel.\n\n\ntheme_minimal\nA minimalistic theme with no background annotations\n\n\ntheme_seaborn\nTheme for seaborn.\n\n\ntheme_tufte\nTufte Maximal Data, Minimal Ink Theme\n\n\ntheme_void\nA classic-looking theme, with x & y axis lines and\n\n\ntheme_xkcd\nxkcd theme\n\n\n\n\n\n\nThese define aspects of a plot that can be themed. They can be used to create a new theme or modify an existing theme. They define the keyword arguments to theme. Users should never create instances of themeable.\n\n\n\n\nthemeable\nAbstract class of things that can be themed.\n\n\n\n\n\n\n\n\naspect_ratio\nAspect ratio of the panel(s)\n\n\naxis_line\nx & y axis lines\n\n\naxis_line_x\nx-axis line\n\n\naxis_line_y\ny-axis line\n\n\naxis_text\nAxis tick labels\n\n\naxis_text_x\nx-axis tick labels\n\n\naxis_text_y\ny-axis tick labels\n\n\naxis_ticks\nx & y major and minor axis tick lines\n\n\naxis_ticks_length\nAxis tick length\n\n\naxis_ticks_length_major\nAxis major-tick length\n\n\naxis_ticks_length_major_x\nx-axis major-tick length\n\n\naxis_ticks_length_major_y\ny-axis major-tick length\n\n\naxis_ticks_length_minor\nAxis minor-tick length\n\n\naxis_ticks_length_minor_x\nx-axis minor-tick length\n\n\naxis_ticks_length_minor_y\nx-axis minor-tick length\n\n\naxis_ticks_major\nx & y axis major tick lines\n\n\naxis_ticks_major_x\nx-axis major tick lines\n\n\naxis_ticks_major_y\ny-axis major tick lines\n\n\naxis_ticks_minor\nx & y axis minor tick lines\n\n\naxis_ticks_minor_x\nx-axis tick lines\n\n\naxis_ticks_minor_y\ny-axis minor tick lines\n\n\naxis_ticks_pad\nAxis tick padding\n\n\naxis_ticks_pad_major\nAxis major-tick padding\n\n\naxis_ticks_pad_major_x\nx-axis major-tick padding\n\n\naxis_ticks_pad_major_y\ny-axis major-tick padding\n\n\naxis_ticks_pad_minor\nAxis minor-tick padding\n\n\naxis_ticks_pad_minor_x\nx-axis minor-tick padding\n\n\naxis_ticks_pad_minor_y\ny-axis minor-tick padding\n\n\naxis_ticks_x\nx major and minor axis tick lines\n\n\naxis_ticks_y\ny major and minor axis tick lines\n\n\naxis_title\nAxis labels\n\n\naxis_title_x\nx axis label\n\n\naxis_title_y\ny axis label\n\n\ndpi\nDPI with which to draw/save the figure\n\n\nfigure_size\nFigure size in inches\n\n\nlegend_background\nLegend background\n\n\nlegend_box\nHow to box up multiple legends\n\n\nlegend_box_background\nLegend box background\n\n\nlegend_box_just\nJustification of guide boxes\n\n\nlegend_box_margin\nPadding between the legends and the box\n\n\nlegend_box_spacing\nSpacing between the legend and the plotting area\n\n\nlegend_direction\nLayout items in the legend\n\n\nlegend_key_spacing\nSpacing between two entries in a legend\n\n\nlegend_key_spacing_x\nHorizontal spacing between two entries in a legend\n\n\nlegend_key_spacing_y\nVertical spacing between two entries in a legend\n\n\nlegend_frame\nFrame around colorbar\n\n\nlegend_justification\nJustification of any legend\n\n\nlegend_justification_bottom\nJustification of legends placed at the bottom\n\n\nlegend_justification_inside\nJustification of legends placed inside the axes\n\n\nlegend_justification_left\nJustification of legends placed on the left\n\n\nlegend_justification_right\nJustification of legends placed on the right\n\n\nlegend_justification_top\nJustification of legends placed at the top\n\n\nlegend_key\nLegend key background\n\n\nlegend_key_height\nLegend key background height\n\n\nlegend_key_size\nLegend key background width and height\n\n\nlegend_key_width\nLegend key background width\n\n\nlegend_margin\nPadding between the legend and the inner box\n\n\nlegend_position\nLocation of legend\n\n\nlegend_position_inside\nLocation of legend\n\n\nlegend_spacing\nSpacing between two adjacent legends\n\n\nlegend_text\nLegend text\n\n\nlegend_text_colorbar\nColorbar text\n\n\nlegend_text_legend\nLegend text for the common legend\n\n\nlegend_text_position\nPosition of the legend text\n\n\nlegend_ticks_length\nLength of ticks in the legend\n\n\nlegend_title\nLegend title\n\n\nlegend_title_position\nPosition of legend title\n\n\nline\nAll line elements\n\n\npanel_background\nPanel background\n\n\npanel_border\nPanel border\n\n\npanel_grid\nGrid lines\n\n\npanel_grid_major\nMajor grid lines\n\n\npanel_grid_major_x\nVertical major grid lines\n\n\npanel_grid_major_y\nHorizontal major grid lines\n\n\npanel_grid_minor\nMinor grid lines\n\n\npanel_grid_minor_x\nVertical minor grid lines\n\n\npanel_grid_minor_y\nHorizontal minor grid lines\n\n\npanel_ontop\nPlace panel background & gridlines over/under the data layers\n\n\npanel_spacing\nSpacing between the facet panels\n\n\npanel_spacing_x\nHorizontal spacing between the facet panels\n\n\npanel_spacing_y\nVertical spacing between the facet panels\n\n\nplot_background\nPlot background\n\n\nplot_caption\nPlot caption\n\n\nplot_margin\nPlot Margin\n\n\nplot_margin_bottom\nPlot Margin at the bottom\n\n\nplot_margin_left\nPlot Margin on the left\n\n\nplot_margin_right\nPlot Margin on the right\n\n\nplot_margin_top\nPlot Margin at the top\n\n\nplot_subtitle\nPlot subtitle\n\n\nplot_title\nPlot title\n\n\nrect\nAll rectangle elements\n\n\nstrip_align\nAlignment of the strip & its background w.r.t the panel border\n\n\nstrip_align_x\nVertical alignment of the strip & its background w.r.t the panel border\n\n\nstrip_align_y\nHorizontal alignment of the strip & its background w.r.t the panel border\n\n\nstrip_background\nFacet label background\n\n\nstrip_background_x\nHorizontal facet label background\n\n\nstrip_background_y\nVertical facet label background\n\n\nstrip_text\nFacet labels along both axes\n\n\nstrip_text_x\nFacet labels along the horizontal axis\n\n\nstrip_text_y\nFacet labels along the vertical axis\n\n\nsubplots_adjust\n\n\n\nsvg_usefonts\nHow to renderer fonts for svg images\n\n\ntext\nAll text elements in the plot\n\n\ntitle\nAll titles on the plot\n\n\n\n\n\n\n\n\n\n\n\ntheme_set\nChange the current(default) theme\n\n\ntheme_get\nReturn the default theme\n\n\ntheme_update\nModify elements of the current theme\n\n\n\n\n\n\n\n\nelement_line\ntheme element: line\n\n\nelement_rect\nTheme element: Rectangle\n\n\nelement_text\nTheme element: Text\n\n\nelement_blank\nTheme element: Blank"
  },
  {
    "objectID": "reference/index.html#coordinates",
    "href": "reference/index.html#coordinates",
    "title": "API Reference",
    "section": "",
    "text": "Coordinate systems put together the two position scales to produce a 2d location.\n\n\n\n\ncoord\nBase class for all coordinate systems\n\n\n\n\n\n\n\n\ncoord_cartesian\nCartesian coordinate system\n\n\ncoord_equal\nCartesian coordinates with fixed relationship between x and y scales\n\n\ncoord_fixed\nCartesian coordinates with fixed relationship between x and y scales\n\n\ncoord_flip\nFlipped cartesian coordinates\n\n\ncoord_trans\nTransformed cartesian coordinate system"
  },
  {
    "objectID": "reference/index.html#options",
    "href": "reference/index.html#options",
    "title": "API Reference",
    "section": "",
    "text": "When working interactively, some of the options make it convenient to create plots that have a common look and feel. Another way to do it, to set a default theme using theme_set().\n\n\n\n\naspect_ratio\nDefault aspect ratio used by the themes\n\n\nbase_family\nThe base font family for all text that is part of the theme.\n\n\nbase_margin\nA size that is proportional of the figure width and\n\n\nclose_all_figures\nDevelopment flag, e.g. set to True to prevent\n\n\ncurrent_theme\nTheme used when none is added to the ggplot object\n\n\ndpi\nDefault DPI used by the themes\n\n\nfigure_size\nDefault figure size in inches\n\n\nfigure_format\nThe format for the inline figures outputted by the jupyter kernel.\n\n\nget_option\nGet package option\n\n\nset_option\nSet package option"
  },
  {
    "objectID": "reference/index.html#datasets",
    "href": "reference/index.html#datasets",
    "title": "API Reference",
    "section": "",
    "text": "These datasets ship with the plotnine and you can import them with from the plotnine.data sub-package.\n\n\n\n\ndiamonds\nPrices of 50,000 round cut diamonds\n\n\neconomics\nUS economic time series.\n\n\neconomics_long\nUS economic time series.\n\n\nfaithful\nOld Faithful Geyser Data\n\n\nfaithfuld\nOld Faithful Geyser Data\n\n\nhuron\nLevel of Lake Huron 1875–1972\n\n\nluv_colours\ncolors in Luv space.\n\n\nmeat\nUS Meat Production\n\n\nmidwest\nMidwest demographics.\n\n\nmpg\nFuel economy data from 1999 and 2008 for 38 popular models of car\n\n\nmsleep\nAn updated and expanded version of the mammals sleep dataset.\n\n\nmtcars\nMotor Trend Car Road Tests\n\n\npageviews\n\n\n\npresidential\nTerms of 11 presidents from Eisenhower to Obama.\n\n\nseals\nVector field of seal movements.\n\n\ntxhousing\nHousing sales in TX."
  },
  {
    "objectID": "reference/scales._runtime_typing.html",
    "href": "reference/scales._runtime_typing.html",
    "title": "Typing Information",
    "section": "",
    "text": "TypeVar(\"RangeT\", bound=Range)\n\n\n\n\n\nTypeVar(\"BreaksUserT\")\n\n\n\n\n\nTypeVar(\"LimitsUserT\")\n\n\n\n\n\nTypeVar(\"GuideTypeT\")"
  },
  {
    "objectID": "reference/scales._runtime_typing.html#type-variables",
    "href": "reference/scales._runtime_typing.html#type-variables",
    "title": "Typing Information",
    "section": "",
    "text": "TypeVar(\"RangeT\", bound=Range)\n\n\n\n\n\nTypeVar(\"BreaksUserT\")\n\n\n\n\n\nTypeVar(\"LimitsUserT\")\n\n\n\n\n\nTypeVar(\"GuideTypeT\")"
  },
  {
    "objectID": "reference/scales._runtime_typing.html#type-aliases",
    "href": "reference/scales._runtime_typing.html#type-aliases",
    "title": "Typing Information",
    "section": "Type Aliases",
    "text": "Type Aliases\n\n DiscreteBreaksUser\n\n(    bool    | None    | Sequence[str]    | Callable[[Sequence[str]], Sequence[str]])\n\n\n\n DiscreteLimitsUser\n\n(    None    | Sequence[str]    | Callable[[Sequence[str]], Sequence[str]])\n\n\n\n ContinuousBreaksUser\n\n(    bool    | None    | Sequence[float]    | Callable[[tuple[float, float]], Sequence[float]])\n\n\n\n MinorBreaksUser\n\nContinuousBreaksUser\n\n\n\n ContinuousLimitsUser\n\n(    None    | tuple[float, float]    | Callable[[tuple[float, float]], tuple[float, float]])\n\n\n\n ScaleLabelsUser\n\n(    bool    | None    | Sequence[str]    | Callable[[Sequence[float] | Sequence[str]], Sequence[str]]    | dict[str, str])\n\n\n\n TransUser\n\ntrans | str | Type[trans] | None"
  },
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "Changelog",
    "section": "",
    "text": "(not-yet-released)\n\n\n\nYou cannot call print on a ggplot object to show it. This was deprecated in v0.13.0 and it has now been removed. Use ggplot.show()\nThe color_space parameter of scale_color_hue now accepts the value \"hlsuv\" instead of \"husl\". The meaning of has not changed, and \"husl\" is silently accepted.\nThemeables axis_ticks_direction, axis_ticks_direction_x and axis_ticks_direction_y have be deprecated. In their place, the direction of the ticks can be controlled by using +ve, -ve or complex values for the axis_ticks_length, axis_ticks_length_major, axis_ticks_length_major_x, axis_ticks_length_major_y, axis_ticks_length_minor, axis_ticks_length_minor_x, or axis_ticks_length_minor_y.\n\n\n\n\n\nThe family, fontstyle and fontweight parameters of geom_text are now aesthetics (#790).\nplotnine now responds to the fig-width, fig-height and fig-format settings in the meta section of a quarto document.\nggtitle now accepts title and subtitle as keyword arguments. (#804)\nGained the option limitsize that makes it possible to display plots of any size.\nfrom plotnine.options import set_option\n\nset_option(\"figure_format\", False)\nFor geom_boxplot when the outliers are made invisible by giving them no shape, now they do not affect the limits of the plot. (#814)\nMade it possile to map an aesthetic value to None. (#791)\n\n\n\n\n\ngeom_text has gained new aesthetics fontvariant and fontstretch.\n\n\n\n\n\nFix layers 3 and above not to overlap the axis lines if there are any (#798).\nFixed bug in geom_segment where the lineend parameter was ignored. (#727)\nFixed stat_summary_bin to work with continuous x aesthetic when specifying the binwidth or breaks. (#824)\nFixed PlotnineAnimation not to draw a second legend at the bottom-left corner. ("
  },
  {
    "objectID": "changelog.html#v0.14.0",
    "href": "changelog.html#v0.14.0",
    "title": "Changelog",
    "section": "",
    "text": "(not-yet-released)\n\n\n\nYou cannot call print on a ggplot object to show it. This was deprecated in v0.13.0 and it has now been removed. Use ggplot.show()\nThe color_space parameter of scale_color_hue now accepts the value \"hlsuv\" instead of \"husl\". The meaning of has not changed, and \"husl\" is silently accepted.\nThemeables axis_ticks_direction, axis_ticks_direction_x and axis_ticks_direction_y have be deprecated. In their place, the direction of the ticks can be controlled by using +ve, -ve or complex values for the axis_ticks_length, axis_ticks_length_major, axis_ticks_length_major_x, axis_ticks_length_major_y, axis_ticks_length_minor, axis_ticks_length_minor_x, or axis_ticks_length_minor_y.\n\n\n\n\n\nThe family, fontstyle and fontweight parameters of geom_text are now aesthetics (#790).\nplotnine now responds to the fig-width, fig-height and fig-format settings in the meta section of a quarto document.\nggtitle now accepts title and subtitle as keyword arguments. (#804)\nGained the option limitsize that makes it possible to display plots of any size.\nfrom plotnine.options import set_option\n\nset_option(\"figure_format\", False)\nFor geom_boxplot when the outliers are made invisible by giving them no shape, now they do not affect the limits of the plot. (#814)\nMade it possile to map an aesthetic value to None. (#791)\n\n\n\n\n\ngeom_text has gained new aesthetics fontvariant and fontstretch.\n\n\n\n\n\nFix layers 3 and above not to overlap the axis lines if there are any (#798).\nFixed bug in geom_segment where the lineend parameter was ignored. (#727)\nFixed stat_summary_bin to work with continuous x aesthetic when specifying the binwidth or breaks. (#824)\nFixed PlotnineAnimation not to draw a second legend at the bottom-left corner. ("
  },
  {
    "objectID": "reference/aes.html",
    "href": "reference/aes.html",
    "title": " plotnine.aes",
    "section": "",
    "text": "aes(x=None, y=None, kwargs={})"
  },
  {
    "objectID": "reference/aes.html#parameters",
    "href": "reference/aes.html#parameters",
    "title": " plotnine.aes",
    "section": "Parameters",
    "text": "Parameters\n\n\nx : str | array_like | scalar = None\n\nx aesthetic mapping\n\ny : str | array_like | scalar = None\n\ny aesthetic mapping\n\n**kwargs : Any = {}\n\nOther aesthetic mappings"
  },
  {
    "objectID": "reference/aes.html#notes",
    "href": "reference/aes.html#notes",
    "title": " plotnine.aes",
    "section": "Notes",
    "text": "Notes\nOnly the x and y aesthetic mappings can be specified as positional arguments. All the rest must be keyword arguments.\nThe value of each mapping must be one of:\n\nstr\n import pandas as pd\n import numpy as np\n\n arr = [11, 12, 13]\n df = pd.DataFrame({\n     \"alpha\": [1, 2, 3],\n     \"beta\": [1, 2, 3],\n     \"gam ma\": [1, 2, 3]\n })\n\n # Refer to a column in a dataframe\n ggplot(df, aes(x=\"alpha\", y=\"beta\"))\narray_like\n# A variable\nggplot(df, aes(x=\"alpha\", y=arr))\n\n# or an inplace list\nggplot(df, aes(x=\"alpha\", y=[4, 5, 6]))\nscalar\n# A scalar value/variable\nggplot(df, aes(x=\"alpha\", y=4))\n\n# The above statement is equivalent to\nggplot(df, aes(x=\"alpha\", y=[4, 4, 4]))\nString expression\nggplot(df, aes(x=\"alpha\", y=\"2*beta\"))\nggplot(df, aes(x=\"alpha\", y=\"np.sin(beta)\"))\nggplot(df, aes(x=\"df.index\", y=\"beta\"))\n\n# If `count` is an aesthetic calculated by a stat\nggplot(df, aes(x=\"alpha\", y=after_stat(\"count\")))\nggplot(df, aes(x=\"alpha\", y=after_stat(\"count/np.max(count)\")))\nThe strings in the expression can refer to;\n\ncolumns in the dataframe\nvariables in the namespace\naesthetic values (columns) calculated by the stat\n\nwith the column names having precedence over the variables. For expressions, columns in the dataframe that are mapped to must have names that would be valid python variable names.\nThis is okay:\n# \"gam ma\" is a column in the dataframe\nggplot(df, aes(x=\"df.index\", y=\"gam ma\"))\nWhile this is not:\n# \"gam ma\" is a column in the dataframe, but not\n# valid python variable name\nggplot(df, aes(x=\"df.index\", y=\"np.sin(gam ma)\"))\n\naes has 2 internal methods you can use to transform variables being mapped.\n\nfactor - This function turns the variable into a factor. It is just an alias to pandas.Categorical:\nggplot(mtcars, aes(x=\"factor(cyl)\")) + geom_bar()\nreorder - This function changes the order of first variable based on values of the second variable:\ndf = pd.DataFrame({\n    \"x\": [\"b\", \"d\", \"c\", \"a\"],\n    \"y\": [1, 2, 3, 4]\n})\n\nggplot(df, aes(\"reorder(x, y)\", \"y\")) + geom_col()\n\nThe group aesthetic\ngroup is a special aesthetic that the user can map to. It is used to group the plotted items. If not specified, it is automatically computed and in most cases the computed groups are sufficient. However, there may be cases were it is handy to map to it."
  },
  {
    "objectID": "reference/aes.html#see-also",
    "href": "reference/aes.html#see-also",
    "title": " plotnine.aes",
    "section": "See Also",
    "text": "See Also\n\nafter_stat\n\nFor how to map aesthetics to variable calculated by the stat\n\nafter_scale\n\nFor how to alter aesthetics after the data has been mapped by the scale.\n\nstage\n\nFor how to map to evaluate the mapping to aesthetics at more than one stage of the plot building pipeline."
  },
  {
    "objectID": "reference/after_stat.html",
    "href": "reference/after_stat.html",
    "title": " plotnine.after_stat",
    "section": "",
    "text": "after_stat(x)"
  },
  {
    "objectID": "reference/after_stat.html#parameters",
    "href": "reference/after_stat.html#parameters",
    "title": " plotnine.after_stat",
    "section": "Parameters",
    "text": "Parameters\n\n\nx : str\n\nAn expression"
  },
  {
    "objectID": "reference/after_stat.html#see-also",
    "href": "reference/after_stat.html#see-also",
    "title": " plotnine.after_stat",
    "section": "See Also",
    "text": "See Also\n\nafter_scale\n\n\n\nstage"
  },
  {
    "objectID": "reference/annotation_logticks.html",
    "href": "reference/annotation_logticks.html",
    "title": " plotnine.annotation_logticks",
    "section": "",
    "text": "annotation_logticks(\n    sides=\"bl\",\n    alpha=1,\n    color=\"black\",\n    size=0.5,\n    linetype=\"solid\",\n    lengths=(0.036, 0.0225, 0.012),\n    base=None\n)"
  },
  {
    "objectID": "reference/annotation_logticks.html#parameters",
    "href": "reference/annotation_logticks.html#parameters",
    "title": " plotnine.annotation_logticks",
    "section": "Parameters",
    "text": "Parameters\n\n\nsides : str = \"bl\"\n\nSides onto which to draw the marks. Any combination chosen from the characters btlr, for bottom, top, left or right side marks. If coord_flip() is used, these are the sides after the flip.\n\nalpha : float = 1\n\nTransparency of the ticks\n\ncolor : str | tuple[float, float, float] | tuple[float, float, float, float] = \"black\"\n\nColour of the ticks\n\nsize : float = 0.5\n\nThickness of the ticks\n\nlinetype : Literal[\"solid\", \"dashed\", \"dashdot\", \"dotted\"] | Sequence[float] = \"solid\"\n\nType of line\n\nlengths : tuple[float, float, float] = (0.036, 0.0225, 0.012)\n\nlength of the ticks drawn for full / half / tenth ticks relative to panel size\n\nbase : float | None = None\n\nBase of the logarithm in which the ticks will be calculated. If None, the base used to log transform the scale will be used."
  },
  {
    "objectID": "reference/arrow.html",
    "href": "reference/arrow.html",
    "title": " plotnine.arrow",
    "section": "",
    "text": "arrow(angle=30, length=0.2, ends=\"last\", type=\"open\")"
  },
  {
    "objectID": "reference/arrow.html#parameters",
    "href": "reference/arrow.html#parameters",
    "title": " plotnine.arrow",
    "section": "Parameters",
    "text": "Parameters\n\n\nangle : float = 30\n\nangle in degrees between the tail a single edge.\n\nlength : float = 0.2\n\nof the edge in “inches”\n\nends : Literal[\"first\", \"last\", \"both\"] = \"last\"\n\nAt which end of the line to draw the arrowhead\n\ntype : Literal[\"open\", \"closed\"] = \"open\"\n\nWhen it is closed, it is also filled"
  },
  {
    "objectID": "reference/aspect_ratio.html",
    "href": "reference/aspect_ratio.html",
    "title": " plotnine.options.aspect_ratio",
    "section": "",
    "text": "aspect_ratio : Literal[\"auto\"] | float = \"auto\"\n\n\nDefault aspect ratio used by the themes"
  },
  {
    "objectID": "reference/axis_line_x.html",
    "href": "reference/axis_line_x.html",
    "title": " plotnine.themes.themeable.axis_line_x",
    "section": "",
    "text": "axis_line_x(theme_element)"
  },
  {
    "objectID": "reference/axis_line_x.html#parameters",
    "href": "reference/axis_line_x.html#parameters",
    "title": " plotnine.themes.themeable.axis_line_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/axis_line_x.html#attributes",
    "href": "reference/axis_line_x.html#attributes",
    "title": " plotnine.themes.themeable.axis_line_x",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\nposition\nstr(object=’’) -&gt; str\n\n\n\n\n position\n\nposition = \"bottom\"\n\n\nstr(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’."
  },
  {
    "objectID": "reference/axis_text.html",
    "href": "reference/axis_text.html",
    "title": " plotnine.themes.themeable.axis_text",
    "section": "",
    "text": "axis_text(theme_element)"
  },
  {
    "objectID": "reference/axis_text.html#parameters",
    "href": "reference/axis_text.html#parameters",
    "title": " plotnine.themes.themeable.axis_text",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/axis_text_y.html",
    "href": "reference/axis_text_y.html",
    "title": " plotnine.themes.themeable.axis_text_y",
    "section": "",
    "text": "axis_text_y(theme_element)"
  },
  {
    "objectID": "reference/axis_text_y.html#parameters",
    "href": "reference/axis_text_y.html#parameters",
    "title": " plotnine.themes.themeable.axis_text_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/axis_ticks_length.html",
    "href": "reference/axis_ticks_length.html",
    "title": " plotnine.themes.themeable.axis_ticks_length",
    "section": "",
    "text": "axis_ticks_length(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_length.html#parameters",
    "href": "reference/axis_ticks_length.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_length",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float | complex\n\nValue in points. A negative value creates the ticks inside the plot panel. A complex value (e.g. 3j) creates ticks that span both in and out of the panel."
  },
  {
    "objectID": "reference/axis_ticks_length_major_x.html",
    "href": "reference/axis_ticks_length_major_x.html",
    "title": " plotnine.themes.themeable.axis_ticks_length_major_x",
    "section": "",
    "text": "axis_ticks_length_major_x(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_length_major_x.html#parameters",
    "href": "reference/axis_ticks_length_major_x.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_length_major_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float | complex\n\nValue in points. A negative value creates the ticks inside the plot panel. A complex value (e.g. 3j) creates ticks that span both in and out of the panel."
  },
  {
    "objectID": "reference/axis_ticks_length_minor.html",
    "href": "reference/axis_ticks_length_minor.html",
    "title": " plotnine.themes.themeable.axis_ticks_length_minor",
    "section": "",
    "text": "axis_ticks_length_minor(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_length_minor.html#parameters",
    "href": "reference/axis_ticks_length_minor.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_length_minor",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float | complex\n\nValue in points. A negative value creates the ticks inside the plot panel. A complex value (e.g. 3j) creates ticks that span both in and out of the panel."
  },
  {
    "objectID": "reference/axis_ticks_length_minor_y.html",
    "href": "reference/axis_ticks_length_minor_y.html",
    "title": " plotnine.themes.themeable.axis_ticks_length_minor_y",
    "section": "",
    "text": "axis_ticks_length_minor_y(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_length_minor_y.html#parameters",
    "href": "reference/axis_ticks_length_minor_y.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_length_minor_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float | complex\n\nValue in points. A negative value creates the ticks inside the plot panel. A complex value (e.g. 3j) creates ticks that span both in and out of the panel."
  },
  {
    "objectID": "reference/axis_ticks_major_x.html",
    "href": "reference/axis_ticks_major_x.html",
    "title": " plotnine.themes.themeable.axis_ticks_major_x",
    "section": "",
    "text": "axis_ticks_major_x(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_major_x.html#parameters",
    "href": "reference/axis_ticks_major_x.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_major_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/axis_ticks_minor.html",
    "href": "reference/axis_ticks_minor.html",
    "title": " plotnine.themes.themeable.axis_ticks_minor",
    "section": "",
    "text": "axis_ticks_minor(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_minor.html#parameters",
    "href": "reference/axis_ticks_minor.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_minor",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/axis_ticks_minor_y.html",
    "href": "reference/axis_ticks_minor_y.html",
    "title": " plotnine.themes.themeable.axis_ticks_minor_y",
    "section": "",
    "text": "axis_ticks_minor_y(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_minor_y.html#parameters",
    "href": "reference/axis_ticks_minor_y.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_minor_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/axis_ticks_pad_major.html",
    "href": "reference/axis_ticks_pad_major.html",
    "title": " plotnine.themes.themeable.axis_ticks_pad_major",
    "section": "",
    "text": "axis_ticks_pad_major(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_pad_major.html#parameters",
    "href": "reference/axis_ticks_pad_major.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_pad_major",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nValue in points."
  },
  {
    "objectID": "reference/axis_ticks_pad_major.html#note",
    "href": "reference/axis_ticks_pad_major.html#note",
    "title": " plotnine.themes.themeable.axis_ticks_pad_major",
    "section": "Note",
    "text": "Note\nPadding is not applied when the axis_ticks_major are blank, but it does apply when the axis_ticks_length_major is zero."
  },
  {
    "objectID": "reference/axis_ticks_pad_major_y.html",
    "href": "reference/axis_ticks_pad_major_y.html",
    "title": " plotnine.themes.themeable.axis_ticks_pad_major_y",
    "section": "",
    "text": "axis_ticks_pad_major_y(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_pad_major_y.html#parameters",
    "href": "reference/axis_ticks_pad_major_y.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_pad_major_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nValue in points."
  },
  {
    "objectID": "reference/axis_ticks_pad_major_y.html#note",
    "href": "reference/axis_ticks_pad_major_y.html#note",
    "title": " plotnine.themes.themeable.axis_ticks_pad_major_y",
    "section": "Note",
    "text": "Note\nPadding is not applied when the axis_ticks_major_y are blank, but it does apply when the axis_ticks_length_major_y is zero."
  },
  {
    "objectID": "reference/axis_ticks_pad_minor_x.html",
    "href": "reference/axis_ticks_pad_minor_x.html",
    "title": " plotnine.themes.themeable.axis_ticks_pad_minor_x",
    "section": "",
    "text": "axis_ticks_pad_minor_x(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_pad_minor_x.html#parameters",
    "href": "reference/axis_ticks_pad_minor_x.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_pad_minor_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float"
  },
  {
    "objectID": "reference/axis_ticks_pad_minor_x.html#note",
    "href": "reference/axis_ticks_pad_minor_x.html#note",
    "title": " plotnine.themes.themeable.axis_ticks_pad_minor_x",
    "section": "Note",
    "text": "Note\nPadding is not applied when the axis_ticks_minor_x are blank, but it does apply when the axis_ticks_length_minor_x is zero."
  },
  {
    "objectID": "reference/axis_ticks_x.html",
    "href": "reference/axis_ticks_x.html",
    "title": " plotnine.themes.themeable.axis_ticks_x",
    "section": "",
    "text": "axis_ticks_x(theme_element)"
  },
  {
    "objectID": "reference/axis_ticks_x.html#parameters",
    "href": "reference/axis_ticks_x.html#parameters",
    "title": " plotnine.themes.themeable.axis_ticks_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/axis_title.html",
    "href": "reference/axis_title.html",
    "title": " plotnine.themes.themeable.axis_title",
    "section": "",
    "text": "axis_title(theme_element)"
  },
  {
    "objectID": "reference/axis_title.html#parameters",
    "href": "reference/axis_title.html#parameters",
    "title": " plotnine.themes.themeable.axis_title",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/axis_title_y.html",
    "href": "reference/axis_title_y.html",
    "title": " plotnine.themes.themeable.axis_title_y",
    "section": "",
    "text": "axis_title_y(theme_element)"
  },
  {
    "objectID": "reference/axis_title_y.html#parameters",
    "href": "reference/axis_title_y.html#parameters",
    "title": " plotnine.themes.themeable.axis_title_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/base_margin.html",
    "href": "reference/base_margin.html",
    "title": " plotnine.options.base_margin",
    "section": "",
    "text": "base_margin : float = 0.01\n\n\nA size that is proportional of the figure width and is used by some themes to determine other margins"
  },
  {
    "objectID": "reference/coord.html",
    "href": "reference/coord.html",
    "title": " plotnine.coords.coord.coord",
    "section": "",
    "text": "coord()"
  },
  {
    "objectID": "reference/coord.html#attributes",
    "href": "reference/coord.html#attributes",
    "title": " plotnine.coords.coord.coord",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\nis_linear\nbool(x) -&gt; bool\n\n\n\n\n is_linear\n\nis_linear = False\n\n\nbool(x) -&gt; bool\nReturns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed."
  },
  {
    "objectID": "reference/coord.html#methods",
    "href": "reference/coord.html#methods",
    "title": " plotnine.coords.coord.coord",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\naspect\nReturn desired aspect ratio for the plot\n\n\nbacktransform_range\nBacktransform the panel range in panel_params to data coordinates\n\n\nlabels\nModify labels\n\n\nrange\nReturn the range along the dimensions of the coordinate system\n\n\nsetup_data\nAllow the coordinate system to manipulate the layer data\n\n\nsetup_layout\nAllow the coordinate system alter the layout dataframe\n\n\nsetup_panel_params\nCompute the range and break information for the panel\n\n\nsetup_params\nCreate additional parameters\n\n\ntransform\nTransform data before it is plotted\n\n\n\n\n aspect\n\naspect(panel_params)\n\n\nReturn desired aspect ratio for the plot\nIf not overridden by the subclass, this method returns None, which means that the coordinate system does not influence the aspect ratio.\n\n\n\n backtransform_range\n\nbacktransform_range(panel_params)\n\n\nBacktransform the panel range in panel_params to data coordinates\nCoordinate systems that do any transformations should override this method. e.g. coord_trans has to override this method.\n\n\n\n labels\n\nlabels(cur_labels)\n\n\nModify labels\n\n\nParameters\n\n\ncur_labels : labels_view\n\nCurrent labels. The coord can modify them as necessary.\n\n\n\n\n\nReturns\n\n\nlabels_view\n\nModified labels. Same object as the input.\n\n\n\n\n\n\n range\n\nrange(panel_params)\n\n\nReturn the range along the dimensions of the coordinate system\n\n\n\n setup_data\n\nsetup_data(data)\n\n\nAllow the coordinate system to manipulate the layer data\n\n\nParameters\n\n\ndata : list[pd.DataFrame]\n\nData for all Layer\n\n\n\n\n\nReturns\n\n\nlist[pd.DataFrame]\n\nModified layer data\n\n\n\n\n\n\n setup_layout\n\nsetup_layout(layout)\n\n\nAllow the coordinate system alter the layout dataframe\n\n\nParameters\n\n\nlayout : pd.DataFrame\n\nDataframe in which data is assigned to panels and scales\n\n\n\n\n\nReturns\n\n\npd.DataFrame\n\nlayout dataframe altered to according to the requirements of the coordinate system.\n\n\n\n\n\nNotes\nThe input dataframe may be changed.\n\n\n\n setup_panel_params\n\nsetup_panel_params(scale_x, scale_y)\n\n\nCompute the range and break information for the panel\n\n\n\n setup_params\n\nsetup_params(data)\n\n\nCreate additional parameters\nA coordinate system may need to create parameters depending on the original data that the layers get.\n\n\nParameters\n\n\ndata : list[pd.DataFrame]\n\nData for each layer before it is manipulated in any way.\n\n\n\n\n\n\n transform\n\ntransform(data, panel_params, munch=False)\n\n\nTransform data before it is plotted\nThis is used to “transform the coordinate axes”. Subclasses should override this method"
  },
  {
    "objectID": "reference/coord_equal.html",
    "href": "reference/coord_equal.html",
    "title": " plotnine.coord_equal",
    "section": "",
    "text": "coord_equal(ratio=1, xlim=None, ylim=None, expand=True)"
  },
  {
    "objectID": "reference/coord_equal.html#parameters",
    "href": "reference/coord_equal.html#parameters",
    "title": " plotnine.coord_equal",
    "section": "Parameters",
    "text": "Parameters\n\n\nratio : float = 1\n\nDesired aspect_ratio (:math:y/x) of the panel(s).\n\nxlim : tuple[float, float] = None\n\nLimits for x axis. If None, then they are automatically computed.\n\nylim : tuple[float, float] = None\n\nLimits for y axis. If None, then they are automatically computed.\n\nexpand : bool = True\n\nIf True, expand the coordinate axes by some factor. If False, use the limits from the data."
  },
  {
    "objectID": "reference/coord_equal.html#notes",
    "href": "reference/coord_equal.html#notes",
    "title": " plotnine.coord_equal",
    "section": "Notes",
    "text": "Notes\nTo specify aspect ratio of the visual size for the axes use the aspect_ratio themeable.\nggplot(data, aes('x', 'y')) + theme(aspect_ratio=0.5)\nWhen changing the aspect_ratio in either way, the width of the panel remains constant (as derived from the plotnine.themes.themeable.figure_size themeable) and the height is altered to achieve desired ratio."
  },
  {
    "objectID": "reference/coord_flip.html",
    "href": "reference/coord_flip.html",
    "title": " plotnine.coord_flip",
    "section": "",
    "text": "coord_flip(xlim=None, ylim=None, expand=True)"
  },
  {
    "objectID": "reference/coord_flip.html#parameters",
    "href": "reference/coord_flip.html#parameters",
    "title": " plotnine.coord_flip",
    "section": "Parameters",
    "text": "Parameters\n\n\nxlim : tuple[float, float] = None\n\nLimits for x axis. If None, then they are automatically computed.\n\nylim : tuple[float, float] = None\n\nLimits for y axis. If None, then they are automatically computed.\n\nexpand : bool = True\n\nIf True, expand the coordinate axes by some factor. If False, use the limits from the data."
  },
  {
    "objectID": "reference/current_theme.html",
    "href": "reference/current_theme.html",
    "title": " plotnine.options.current_theme",
    "section": "",
    "text": "current_theme : Optional[theme | Type[theme]] = None\n\n\nTheme used when none is added to the ggplot object"
  },
  {
    "objectID": "reference/dpi.html",
    "href": "reference/dpi.html",
    "title": " plotnine.options.dpi",
    "section": "",
    "text": "dpi : int = 100\n\n\nDefault DPI used by the themes"
  },
  {
    "objectID": "reference/economics_long.html",
    "href": "reference/economics_long.html",
    "title": " plotnine.data.economics_long",
    "section": "",
    "text": "economics_long = pd.read_csv(DATA_DIR / \"economics_long.csv\", parse_dates=[0])"
  },
  {
    "objectID": "reference/economics_long.html#description",
    "href": "reference/economics_long.html#description",
    "title": " plotnine.data.economics_long",
    "section": "Description",
    "text": "Description\nThis dataset was produced from US economic time series data available from http://research.stlouisfed.org/fred2. economics is in “wide” format, economics_long is in “long” format."
  },
  {
    "objectID": "reference/economics_long.html#format",
    "href": "reference/economics_long.html#format",
    "title": " plotnine.data.economics_long",
    "section": "Format",
    "text": "Format\nA data frame with 478 rows and 6 variables\n\n\n\nColumn\nDescription\n\n\n\n\ndate\nMonth of data collection\n\n\npsavert\npersonal savings rate 1\n\n\npce\npersonal consumption expenditures, in billions of dollars 2\n\n\nunemploy\nnumber of unemployed in thousands 3\n\n\nuempmed\nmedian duration of unemployment, in week 4\n\n\npop\ntotal population, in thousands 5"
  },
  {
    "objectID": "reference/economics_long.html#footnotes",
    "href": "reference/economics_long.html#footnotes",
    "title": " plotnine.data.economics_long",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttp://research.stlouisfed.org/fred2/series/PSAVERT↩︎\nhttp://research.stlouisfed.org/fred2/series/PCE↩︎\nhttp://research.stlouisfed.org/fred2/series/UNEMPLOY↩︎\nhttp://research.stlouisfed.org/fred2/series/UEMPMED↩︎\nhttp://research.stlouisfed.org/fred2/series/POP↩︎"
  },
  {
    "objectID": "reference/element_line.html",
    "href": "reference/element_line.html",
    "title": " plotnine.element_line",
    "section": "",
    "text": "element_line(\n    *,\n    color=None,\n    size=None,\n    linetype=None,\n    lineend=None,\n    colour=None,\n    kwargs={}\n)"
  },
  {
    "objectID": "reference/element_line.html#parameters",
    "href": "reference/element_line.html#parameters",
    "title": " plotnine.element_line",
    "section": "Parameters",
    "text": "Parameters\n\n\ncolor : str | tuple = None\n\nline color\n\ncolour : str | tuple = None\n\nalias of color\n\nlinetype : str | tuple = None\n\nline style. if a string, it should be one of solid, dashed, dashdot or dotted. you can create interesting dashed patterns using tuples, see set_linestyle.\n\nsize : float = None\n\nline thickness\n\nkwargs : dict = {}\n\nParameters recognised by line2d."
  },
  {
    "objectID": "reference/element_text.html",
    "href": "reference/element_text.html",
    "title": " plotnine.element_text",
    "section": "",
    "text": "element_text(\n    family=None,\n    style=None,\n    weight=None,\n    color=None,\n    size=None,\n    ha=None,\n    va=None,\n    rotation=None,\n    linespacing=None,\n    backgroundcolor=None,\n    margin=None,\n    rotation_mode=None,\n    kwargs={}\n)"
  },
  {
    "objectID": "reference/element_text.html#parameters",
    "href": "reference/element_text.html#parameters",
    "title": " plotnine.element_text",
    "section": "Parameters",
    "text": "Parameters\n\n\nfamily : Optional[str | list[str]] = None\n\nFont family. See set_family for supported values.\n\nstyle : Optional[str | Sequence[str]] = None\n\nFont style\n\ncolor : Optional[str | tuple[float, float, float] | tuple[float, float, float, float] | Sequence[str | tuple[float, float, float] | tuple[float, float, float, float]]] = None\n\nText color\n\nweight : Optional[int | str | Sequence[int | str]] = None\n\nShould be one of normal, bold, heavy, light, ultrabold or ultralight.\n\nsize : Optional[float | Sequence[float]] = None\n\ntext size\n\nha : Optional[Literal[\"center\", \"left\", \"right\"] | float] = None\n\nHorizontal Alignment.\n\nva : Optional[Literal[\"center\", \"top\", \"bottom\", \"baseline\", \"center_baseline\"] | float] = None\n\nVertical alignment.\n\nrotation : Optional[Literal[\"vertical\", \"horizontal\"] | float | Sequence[Literal[\"vertical\", \"horizontal\"]] | Sequence[float]] = None\n\nRotation angle in the range [0, 360]. The rotation is affected by the rotation_mode.\n\nrotation_mode : Literal[\"default\", \"anchor\"] | None = None\n\nHow to do the rotation. If None or \"default\", first rotate the text then align the bounding box of the rotated text. If \"anchor\", first align the unrotated text then rotate the text around the point of alignment.\n\nlinespacing : float = None\n\nLine spacing\n\nbackgroundcolor : Optional[str | tuple[float, float, float] | tuple[float, float, float, float] | Sequence[str | tuple[float, float, float] | tuple[float, float, float, float]]] = None\n\nBackground color\n\nmargin : Optional[dict[Literal[\"t\", \"b\", \"l\", \"r\", \"units\"], Any]] = None\n\nMargin around the text. The keys are t, b, l, r and units. The tblr keys are floats. The units is one of pt, lines or in. Not all text themeables support margin parameters and other than the units, only some of the other keys may apply.\n\nkwargs : Any = {}\n\nParameters recognised by Text"
  },
  {
    "objectID": "reference/element_text.html#notes",
    "href": "reference/element_text.html#notes",
    "title": " plotnine.element_text",
    "section": "Notes",
    "text": "Notes\nelement_text will accept parameters that conform to the ggplot2 element_text API, but it is preferable the Matplotlib based API described above."
  },
  {
    "objectID": "reference/facet.html",
    "href": "reference/facet.html",
    "title": " plotnine.facets.facet.facet",
    "section": "",
    "text": "facet(\n    scales=\"fixed\",\n    shrink=True,\n    labeller=\"label_value\",\n    as_table=True,\n    drop=True,\n    dir=\"h\"\n)"
  },
  {
    "objectID": "reference/facet.html#parameters",
    "href": "reference/facet.html#parameters",
    "title": " plotnine.facets.facet.facet",
    "section": "Parameters",
    "text": "Parameters\n\n\nscales : Literal[\"fixed\", \"free\", \"free_x\", \"free_y\"] = \"fixed\"\n\nWhether x or y scales should be allowed (free) to vary according to the data on each of the panel.\n\nshrink : bool = True\n\nWhether to shrink the scales to the output of the statistics instead of the raw data. Default is True.\n\nlabeller : CanBeStripLabellingFunc = \"label_value\"\n\nHow to label the facets. A string value if it should be one of [\"label_value\", \"label_both\", \"label_context\"].\n\nas_table : bool = True\n\nIf True, the facets are laid out like a table with the highest values at the bottom-right. If False the facets are laid out like a plot with the highest value a the top-right\n\ndrop : bool = True\n\nIf True, all factor levels not used in the data will automatically be dropped. If False, all factor levels will be shown, regardless of whether or not they appear in the data.\n\ndir : Literal[\"h\", \"v\"] = \"h\"\n\nDirection in which to layout the panels. h for horizontal and v for vertical."
  },
  {
    "objectID": "reference/facet.html#methods",
    "href": "reference/facet.html#methods",
    "title": " plotnine.facets.facet.facet",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\ncompute_layout\nCompute layout\n\n\nfinish_data\nModify data before it is drawn out by the geom\n\n\nmake_figure\nCreate and return Matplotlib figure and subplot axes\n\n\nmake_strips\nCreate strips for the facet\n\n\nmap\nAssign a data points to panels\n\n\nset_limits_breaks_and_labels\nAdd limits, breaks and labels to the axes\n\n\nsetup_data\nAllow the facet to manipulate the data\n\n\nsetup_params\nCreate facet parameters\n\n\ntrain_position_scales\nCompute ranges for the x and y scales\n\n\n\n\n compute_layout\n\ncompute_layout(data)\n\n\nCompute layout\n\n\nParameters\n\n\ndata : list[pd.DataFrame]\n\nDataframe for a each layer\n\n\n\n\n\n\n finish_data\n\nfinish_data(data, layout)\n\n\nModify data before it is drawn out by the geom\nThe default is to return the data without modification. Subclasses should override this method as the require.\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nA single layer’s data.\n\nlayout : Layout\n\nLayout\n\n\n\n\n\nReturns\n\n\npd.DataFrame\n\nModified layer data\n\n\n\n\n\n\n make_figure\n\nmake_figure()\n\n\nCreate and return Matplotlib figure and subplot axes\n\n\n\n make_strips\n\nmake_strips(layout_info, ax)\n\n\nCreate strips for the facet\n\n\nParameters\n\n\nlayout_info : layout_details\n\nLayout information. Row from the layout table\n\nax : Axes\n\nAxes to label\n\n\n\n\n\n\n map\n\nmap(data, layout)\n\n\nAssign a data points to panels\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nData for a layer\n\nlayout : pd.DataFrame\n\nAs returned by self.compute_layout\n\n\n\n\n\nReturns\n\n\npd.DataFrame\n\nData with all points mapped to the panels on which they will be plotted.\n\n\n\n\n\n\n set_limits_breaks_and_labels\n\nset_limits_breaks_and_labels(panel_params, ax)\n\n\nAdd limits, breaks and labels to the axes\n\n\nParameters\n\n\npanel_params : panel_view\n\nrange information for the axes\n\nax : Axes\n\nAxes\n\n\n\n\n\n\n setup_data\n\nsetup_data(data)\n\n\nAllow the facet to manipulate the data\n\n\nParameters\n\n\ndata : list[pd.DataFrame]\n\nData for each of the layers\n\n\n\n\n\nReturns\n\n\nlist[pd.DataFrame]\n\nData for each of the layers\n\n\n\n\n\nNotes\nThis method will be called after setup_params, therefore the params property will be set.\n\n\n\n setup_params\n\nsetup_params(data)\n\n\nCreate facet parameters\n\n\nParameters\n\n\ndata : list[pd.DataFrame]\n\nPlot data and data for the layers\n\n\n\n\n\n\n train_position_scales\n\ntrain_position_scales(layout, layers)\n\n\nCompute ranges for the x and y scales"
  },
  {
    "objectID": "reference/facet_null.html",
    "href": "reference/facet_null.html",
    "title": " plotnine.facet_null",
    "section": "",
    "text": "facet_null(shrink=True)"
  },
  {
    "objectID": "reference/facet_null.html#parameters",
    "href": "reference/facet_null.html#parameters",
    "title": " plotnine.facet_null",
    "section": "Parameters",
    "text": "Parameters\n\n\nshrink : bool = True\n\nWhether to shrink the scales to the output of the statistics instead of the raw data."
  },
  {
    "objectID": "reference/faithful.html",
    "href": "reference/faithful.html",
    "title": " plotnine.data.faithful",
    "section": "",
    "text": "faithful = pd.read_csv(DATA_DIR / \"faithful.csv\")"
  },
  {
    "objectID": "reference/faithful.html#description",
    "href": "reference/faithful.html#description",
    "title": " plotnine.data.faithful",
    "section": "Description",
    "text": "Description\nWaiting time between eruptions and the duration of the eruption for the Old Faithful geyser in Yellowstone National Park, Wyoming, USA."
  },
  {
    "objectID": "reference/faithful.html#format",
    "href": "reference/faithful.html#format",
    "title": " plotnine.data.faithful",
    "section": "Format",
    "text": "Format\nA data frame with 272 observations on 2 variables.\n\n\n\nColumn\nDescription\n\n\n\n\neruptions\nEruption time in mins\n\n\nwaiting W\naiting time to next eruption (in mins)"
  },
  {
    "objectID": "reference/faithful.html#details",
    "href": "reference/faithful.html#details",
    "title": " plotnine.data.faithful",
    "section": "Details",
    "text": "Details\nA closer look at faithful.eruptions reveals that these are heavily rounded times originally in seconds, where multiples of 5 are more frequent than expected under non-human measurement. For a better version of the eruption times, see the example below.\nThere are many versions of this dataset around: Azzalini and Bowman (1990) use a more complete version."
  },
  {
    "objectID": "reference/faithful.html#source",
    "href": "reference/faithful.html#source",
    "title": " plotnine.data.faithful",
    "section": "Source",
    "text": "Source\nW. Härdle."
  },
  {
    "objectID": "reference/faithful.html#references",
    "href": "reference/faithful.html#references",
    "title": " plotnine.data.faithful",
    "section": "References",
    "text": "References\nHärdle, W. (1991) Smoothing Techniques with Implementation in S. New York: Springer.\nAzzalini, A. and Bowman, A. W. (1990). A look at some data on the Old Faithful geyser. Applied Statistics 39, 357–365."
  },
  {
    "objectID": "reference/figure_format.html",
    "href": "reference/figure_format.html",
    "title": " plotnine.options.figure_format",
    "section": "",
    "text": "figure_format : Optional[FigureFormat] = None\n\n\nThe format for the inline figures outputted by the jupyter kernel.\nIf None, it is the value of\n%config InlineBackend.figure_format\nIf that has not been set, the default is “retina”. You can set it explicitly with:\n%config InlineBackend.figure_format = \"retina\""
  },
  {
    "objectID": "reference/geom.html",
    "href": "reference/geom.html",
    "title": " plotnine.geoms.geom.geom",
    "section": "",
    "text": "geom(mapping=None, data=None, kwargs={})"
  },
  {
    "objectID": "reference/geom.html#attributes",
    "href": "reference/geom.html#attributes",
    "title": " plotnine.geoms.geom.geom",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\nDEFAULT_AES\ndict() -&gt; new empty dictionary\n\n\nDEFAULT_PARAMS\ndict() -&gt; new empty dictionary\n\n\nNON_MISSING_AES\nset() -&gt; new empty set object\n\n\nREQUIRED_AES\nset() -&gt; new empty set object\n\n\naes_params\ndict() -&gt; new empty dictionary\n\n\ndata\nGeom/layer specific dataframe\n\n\nlegend_geom\nstr(object=’’) -&gt; str\n\n\nmapping\nMappings i.e. aes(x=\"col1\", fill=\"col2\")\n\n\n\n\n DEFAULT_AES\n\nDEFAULT_AES : dict[str, Any] = {}\n\n\ndict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object’s (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2)\n\n\n\n DEFAULT_PARAMS\n\nDEFAULT_PARAMS : dict[str, Any] = {}\n\n\ndict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object’s (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2)\n\n\n\n NON_MISSING_AES\n\nNON_MISSING_AES : set[str] = set()\n\n\nset() -&gt; new empty set object set(iterable) -&gt; new set object\nBuild an unordered collection of unique elements.\n\n\n\n REQUIRED_AES\n\nREQUIRED_AES : set[str] = set()\n\n\nset() -&gt; new empty set object set(iterable) -&gt; new set object\nBuild an unordered collection of unique elements.\n\n\n\n aes_params\n\naes_params : dict[str, Any] = {ae: kwargs[ae]for ae in self.aesthetics() & set(kwargs)}\n\n\ndict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object’s (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2)\n\n\n\n data\n\ndata : DataLike = kwargs[\"data\"]\n\n\nGeom/layer specific dataframe\n\n\n\n legend_geom\n\nlegend_geom : str = \"point\"\n\n\nstr(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.\n\n\n\n mapping\n\nmapping : aes = kwargs[\"mapping\"]\n\n\nMappings i.e. aes(x=\"col1\", fill=\"col2\")"
  },
  {
    "objectID": "reference/geom.html#methods",
    "href": "reference/geom.html#methods",
    "title": " plotnine.geoms.geom.geom",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\naesthetics\nReturn all the aesthetics for this geom\n\n\ndraw_group\nPlot data belonging to a group.\n\n\ndraw_layer\nDraw layer across all panels\n\n\ndraw_legend\nDraw a rectangle in the box\n\n\ndraw_panel\nPlot all groups\n\n\ndraw_unit\nPlot data belonging to a unit.\n\n\nfrom_stat\nReturn an instantiated geom object\n\n\nhandle_na\nRemove rows with NaN values\n\n\nlegend_key_size\nCalculate the size of key that would fit the layer contents\n\n\nsetup_data\nModify the data before drawing takes place\n\n\nto_layer\nMake a layer that represents this geom\n\n\nuse_defaults\nCombine data with defaults and set aesthetics from parameters\n\n\n\n\n aesthetics \n\naesthetics()\n\n\nReturn all the aesthetics for this geom\ngeoms should not override this method.\n\n\n\n draw_group \n\ndraw_group(data, panel_params, coord, ax, params={})\n\n\nPlot data belonging to a group.\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nData to be plotted by this geom. This is the dataframe created in the plot_build pipeline.\n\npanel_params : panel_view\n\nThe scale information as may be required by the axes. At this point, that information is about ranges, ticks and labels. Keys of interest to the geom are:\n\"x_range\"  # tuple\n\"y_range\"  # tuple\n\ncoord : coord\n\nCoordinate (e.g. coord_cartesian) system of the geom.\n\nax : axes\n\nAxes on which to plot.\n\nparams : dict = {}\n\nCombined parameters for the geom and stat. Also includes the zorder.\n\n\n\n\n\n\n draw_layer\n\ndraw_layer(data, layout, coord, params={})\n\n\nDraw layer across all panels\ngeoms should not override this method.\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nDataFrame specific for this layer\n\nlayout : Layout\n\nLayout object created when the plot is getting built\n\ncoord : coord\n\nType of coordinate axes\n\nparams : Any = {}\n\nCombined geom and stat parameters. Also includes the stacking order of the layer in the plot (zorder)\n\n\n\n\n\n\n draw_legend \n\ndraw_legend(data, da, lyr)\n\n\nDraw a rectangle in the box\n\n\nParameters\n\n\ndata : pd.Series[Any]\n\nA row of the data plotted to this layer\n\nda : DrawingArea\n\nCanvas on which to draw\n\nlyr : layer\n\nLayer that the geom belongs to.\n\n\n\n\n\nReturns\n\n\nDrawingArea\n\nThe DrawingArea after a layer has been drawn onto it.\n\n\n\n\n\n\n draw_panel\n\ndraw_panel(data, panel_params, coord, ax, params={})\n\n\nPlot all groups\nFor efficiency, geoms that do not need to partition different groups before plotting should override this method and avoid the groupby.\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nData to be plotted by this geom. This is the dataframe created in the plot_build pipeline.\n\npanel_params : panel_view\n\nThe scale information as may be required by the axes. At this point, that information is about ranges, ticks and labels. Attributes are of interest to the geom are:\n\"panel_params.x.range\"  # tuple\n\"panel_params.y.range\"  # tuple\n\ncoord : coord\n\nCoordinate (e.g. coord_cartesian) system of the geom.\n\nax : Axes\n\nAxes on which to plot.\n\nparams : Any = {}\n\nCombined parameters for the geom and stat. Also includes the zorder.\n\n\n\n\n\n\n draw_unit \n\ndraw_unit(data, panel_params, coord, ax, params={})\n\n\nPlot data belonging to a unit.\nA matplotlib plot function may require that an aethestic have a single unique value. e.g. linestyle=\"dashed\" and not linestyle=[\"dashed\", \"dotted\", ...]. A single call to such a function can only plot lines with the same linestyle. However, if the plot we want has more than one line with different linestyles, we need to group the lines with the same linestyle and plot them as one unit. In this case, draw_group calls this function to do the plotting. For an example see geom_point.\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nData to be plotted by this geom. This is the dataframe created in the plot_build pipeline.\n\npanel_params : panel_view\n\nThe scale information as may be required by the axes. At this point, that information is about ranges, ticks and labels. Keys of interest to the geom are:\n\"x_range\"  # tuple\n\"y_range\"  # tuple\nIn rare cases a geom may need access to the x or y scales. Those are available at:\n\"scales\"   # SimpleNamespace\n\ncoord : coord\n\nCoordinate (e.g. coord_cartesian) system of the geom.\n\nax : Axes\n\nAxes on which to plot.\n\nparams : Any = {}\n\nCombined parameters for the geom and stat. Also includes the zorder.\n\n\n\n\n\n\n from_stat \n\nfrom_stat(stat)\n\n\nReturn an instantiated geom object\ngeoms should not override this method.\n\n\nParameters\n\n\nstat : stat\n\nstat\n\n\n\n\n\nReturns\n\n\ngeom\n\nA geom object\n\n\n\n\n\nRaises\n\n\nPlotnineError\n\nIf unable to create a geom.\n\n\n\n\n\n\n handle_na\n\nhandle_na(data)\n\n\nRemove rows with NaN values\ngeoms that infer extra information from missing values should override this method. For example geom_path.\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nData\n\n\n\n\n\nReturns\n\n\npd.DataFrame\n\nData without the NaNs.\n\n\n\n\n\nNotes\nShows a warning if the any rows are removed and the na_rm parameter is False. It only takes into account the columns of the required aesthetics.\n\n\n\n legend_key_size \n\nlegend_key_size(data, min_size, lyr)\n\n\nCalculate the size of key that would fit the layer contents\n\n\nParameters\n\n\ndata : pd.Series[Any]\n\nA row of the data plotted to this layer\n\nmin_size : tuple[int, int]\n\nInitial size which should be expanded to fit the contents.\n\nlyr : layer\n\nLayer\n\n\n\n\n\n\n setup_data\n\nsetup_data(data)\n\n\nModify the data before drawing takes place\nThis function is called before position adjustments are done. It is used by geoms to create the final aesthetics used for drawing. The base class method does nothing, geoms can override this method for two reasons:\n\nThe stat does not create all the aesthetics (usually position aesthetics) required for drawing the geom, but those aesthetics can be computed from the available data. For example geom_boxplot and geom_violin.\nThe geom inherits from another geom (superclass) which does the drawing and the superclass requires certain aesthetics to be present in the data. For example geom_tile and geom_area.\n\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nData used for drawing the geom.\n\n\n\n\n\nReturns\n\n\npd.DataFrame\n\nData used for drawing the geom.\n\n\n\n\n\n\n to_layer\n\nto_layer()\n\n\nMake a layer that represents this geom\n\n\nReturns\n\n\nlayer\n\nLayer\n\n\n\n\n\n\n use_defaults\n\nuse_defaults(data, aes_modifiers)\n\n\nCombine data with defaults and set aesthetics from parameters\ngeoms should not override this method.\n\n\nParameters\n\n\ndata : pd.DataFrame\n\nData used for drawing the geom.\n\naes_modifiers : dict[str, Any]\n\nAesthetics\n\n\n\n\n\nReturns\n\n\npd.DataFrame\n\nData used for drawing the geom."
  },
  {
    "objectID": "reference/geom_area.html",
    "href": "reference/geom_area.html",
    "title": " plotnine.geom_area",
    "section": "",
    "text": "geom_area(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"stack\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    outline_type=\"upper\",\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_area.html#parameters",
    "href": "reference/geom_area.html#parameters",
    "title": " plotnine.geom_area",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'none'\n\n\nfill\n'#333333'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\nwhere\nTrue\n\n\n\nThe bold aesthetics are required.\nAesthetics Descriptions\n\nwhere\n\nDefine where to exclude horizontal regions from being filled. Regions between any two False values are skipped. For sensible demarcation the value used in the where predicate expression should match the ymin value or expression. i.e.\n aes(ymin=0, ymax=\"col1\", where=\"col1 &gt; 0\")  # good\n aes(ymin=0, ymax=\"col1\", where=\"col1 &gt; 10\")  # bad\n\n aes(ymin=col2, ymax=\"col1\", where=\"col1 &gt; col2\")  # good\n aes(ymin=col2, ymax=\"col1\", where=\"col1 &gt; col3\")  # bad\n\n\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"stack\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_area.html#see-also",
    "href": "reference/geom_area.html#see-also",
    "title": " plotnine.geom_area",
    "section": "See Also",
    "text": "See Also\n\ngeom_ribbon"
  },
  {
    "objectID": "reference/geom_bin_2d.html",
    "href": "reference/geom_bin_2d.html",
    "title": " plotnine.geom_bin_2d",
    "section": "",
    "text": "geom_bin_2d(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"bin_2d\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_bin_2d.html#parameters",
    "href": "reference/geom_bin_2d.html#parameters",
    "title": " plotnine.geom_bin_2d",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nxmax\n\n\n\nxmin\n\n\n\nymax\n\n\n\nymin\n\n\n\nalpha\n1\n\n\ncolor\nNone\n\n\nfill\n'#595959'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"bin_2d\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_boxplot.html",
    "href": "reference/geom_boxplot.html",
    "title": " plotnine.geom_boxplot",
    "section": "",
    "text": "geom_boxplot(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"boxplot\",\n    position=\"dodge2\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    width=None,\n    outlier_alpha=1,\n    outlier_color=None,\n    outlier_shape=\"o\",\n    outlier_size=1.5,\n    outlier_stroke=0.5,\n    notch=False,\n    varwidth=False,\n    notchwidth=0.5,\n    fatten=2,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_boxplot.html#parameters",
    "href": "reference/geom_boxplot.html#parameters",
    "title": " plotnine.geom_boxplot",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nlower\n\n\n\nmiddle\n\n\n\nupper\n\n\n\nx\n\n\n\nymax\n\n\n\nymin\n\n\n\nalpha\n1\n\n\ncolor\n'#333333'\n\n\nfill\n'white'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nshape\n'o'\n\n\nsize\n0.5\n\n\nweight\n1\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"boxplot\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"dodge2\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\nwidth : float = None\n\nBox width. If None, the width is set to 90% of the resolution of the data. Note that if the stat has a width parameter, that takes precedence over this one.\n\noutlier_alpha : float = 1\n\nTransparency of the outlier points.\n\noutlier_color : str | tuple = None\n\nColor of the outlier points.\n\noutlier_shape : str = \"o\"\n\nShape of the outlier points. An empty string hides the outliers.\n\noutlier_size : float = 1.5\n\nSize of the outlier points.\n\noutlier_stroke : float = 0.5\n\nStroke-size of the outlier points.\n\nnotch : bool = False\n\nWhether the boxes should have a notch.\n\nvarwidth : bool = False\n\nIf True, boxes are drawn with widths proportional to the square-roots of the number of observations in the groups.\n\nnotchwidth : float = 0.5\n\nWidth of notch relative to the body width.\n\nfatten : float = 2\n\nA multiplicative factor used to increase the size of the middle bar across the box.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_count.html",
    "href": "reference/geom_count.html",
    "title": " plotnine.geom_count",
    "section": "",
    "text": "geom_count(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"sum\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_count.html#parameters",
    "href": "reference/geom_count.html#parameters",
    "title": " plotnine.geom_count",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\nfill\nNone\n\n\ngroup\n\n\n\nshape\n'o'\n\n\nsize\n1.5\n\n\nstroke\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"sum\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_density.html",
    "href": "reference/geom_density.html",
    "title": " plotnine.geom_density",
    "section": "",
    "text": "geom_density(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"density\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    outline_type=\"upper\",\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_density.html#parameters",
    "href": "reference/geom_density.html#parameters",
    "title": " plotnine.geom_density",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\nfill\nNone\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\nweight\n1\n\n\nwhere\nTrue\n\n\n\nThe bold aesthetics are required.\nAesthetics Descriptions\n\nwhere\n\nDefine where to exclude horizontal regions from being filled. Regions between any two False values are skipped. For sensible demarcation the value used in the where predicate expression should match the ymin value or expression. i.e.\n aes(ymin=0, ymax=\"col1\", where=\"col1 &gt; 0\")  # good\n aes(ymin=0, ymax=\"col1\", where=\"col1 &gt; 10\")  # bad\n\n aes(ymin=col2, ymax=\"col1\", where=\"col1 &gt; col2\")  # good\n aes(ymin=col2, ymax=\"col1\", where=\"col1 &gt; col3\")  # bad\n\n\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"density\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_density.html#see-also",
    "href": "reference/geom_density.html#see-also",
    "title": " plotnine.geom_density",
    "section": "See Also",
    "text": "See Also\n\ngeom_ribbon"
  },
  {
    "objectID": "reference/geom_dotplot.html",
    "href": "reference/geom_dotplot.html",
    "title": " plotnine.geom_dotplot",
    "section": "",
    "text": "geom_dotplot(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"bindot\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    stackdir=\"up\",\n    stackratio=1,\n    dotsize=1,\n    stackgroups=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_dotplot.html#parameters",
    "href": "reference/geom_dotplot.html#parameters",
    "title": " plotnine.geom_dotplot",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\nfill\n'black'\n\n\ngroup\n\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"bindot\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\nstackdir : Literal[\"up\", \"down\", \"center\", \"centerwhole\"] = \"up\"\n\nDirection in which to stack the dots. Options are\n\nstackratio : float = 1\n\nHow close to stack the dots. If value is less than 1, the dots overlap, if greater than 1 they are spaced.\n\ndotsize : float = 1\n\nDiameter of dots relative to binwidth.\n\nstackgroups : bool = False\n\nIf True, the dots are stacked across groups.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_dotplot.html#see-also",
    "href": "reference/geom_dotplot.html#see-also",
    "title": " plotnine.geom_dotplot",
    "section": "See Also",
    "text": "See Also\n\nstat_bindot"
  },
  {
    "objectID": "reference/geom_errorbarh.html",
    "href": "reference/geom_errorbarh.html",
    "title": " plotnine.geom_errorbarh",
    "section": "",
    "text": "geom_errorbarh(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    height=0.5,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_errorbarh.html#parameters",
    "href": "reference/geom_errorbarh.html#parameters",
    "title": " plotnine.geom_errorbarh",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nxmax\n\n\n\nxmin\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\nheight : float = 0.5\n\nBar height as a fraction of the resolution of the data.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_histogram.html",
    "href": "reference/geom_histogram.html",
    "title": " plotnine.geom_histogram",
    "section": "",
    "text": "geom_histogram(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"bin\",\n    position=\"stack\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_histogram.html#parameters",
    "href": "reference/geom_histogram.html#parameters",
    "title": " plotnine.geom_histogram",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\nNone\n\n\nfill\n'#595959'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"bin\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"stack\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_histogram.html#see-also",
    "href": "reference/geom_histogram.html#see-also",
    "title": " plotnine.geom_histogram",
    "section": "See Also",
    "text": "See Also\n\ngeom_bar"
  },
  {
    "objectID": "reference/geom_jitter.html",
    "href": "reference/geom_jitter.html",
    "title": " plotnine.geom_jitter",
    "section": "",
    "text": "geom_jitter(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"jitter\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    width=None,\n    height=None,\n    random_state=None,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_jitter.html#parameters",
    "href": "reference/geom_jitter.html#parameters",
    "title": " plotnine.geom_jitter",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\nfill\nNone\n\n\ngroup\n\n\n\nshape\n'o'\n\n\nsize\n1.5\n\n\nstroke\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"jitter\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\nwidth : float = None\n\nProportion to jitter in horizontal direction. The default value is that from position_jitter\n\nheight : float = None\n\nProportion to jitter in vertical direction. The default value is that from position_jitter.\n\nrandom_state : int | RandomState = None\n\nSeed or Random number generator to use. If None, then numpy global generator numpy.random is used.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_jitter.html#see-also",
    "href": "reference/geom_jitter.html#see-also",
    "title": " plotnine.geom_jitter",
    "section": "See Also",
    "text": "See Also\n\nposition_jitter\n\n\n\ngeom_point"
  },
  {
    "objectID": "reference/geom_line.html",
    "href": "reference/geom_line.html",
    "title": " plotnine.geom_line",
    "section": "",
    "text": "geom_line(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    lineend=\"butt\",\n    linejoin=\"round\",\n    arrow=None,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_line.html#parameters",
    "href": "reference/geom_line.html#parameters",
    "title": " plotnine.geom_line",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_line.html#see-also",
    "href": "reference/geom_line.html#see-also",
    "title": " plotnine.geom_line",
    "section": "See Also",
    "text": "See Also\n\ngeom_path\n\nFor documentation of other parameters."
  },
  {
    "objectID": "reference/geom_map.html",
    "href": "reference/geom_map.html",
    "title": " plotnine.geom_map",
    "section": "",
    "text": "geom_map(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_map.html#parameters",
    "href": "reference/geom_map.html#parameters",
    "title": " plotnine.geom_map",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\ngeometry\n\n\n\nalpha\n1\n\n\ncolor\n'#111111'\n\n\nfill\n'#333333'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nshape\n'o'\n\n\nsize\n0.5\n\n\nstroke\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_map.html#notes",
    "href": "reference/geom_map.html#notes",
    "title": " plotnine.geom_map",
    "section": "Notes",
    "text": "Notes\nThis geom is best suited for plotting a shapefile read into geopandas dataframe. The dataframe should have a geometry column."
  },
  {
    "objectID": "reference/geom_point.html",
    "href": "reference/geom_point.html",
    "title": " plotnine.geom_point",
    "section": "",
    "text": "geom_point(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_point.html#parameters",
    "href": "reference/geom_point.html#parameters",
    "title": " plotnine.geom_point",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\nfill\nNone\n\n\ngroup\n\n\n\nshape\n'o'\n\n\nsize\n1.5\n\n\nstroke\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_pointrange.html",
    "href": "reference/geom_pointrange.html",
    "title": " plotnine.geom_pointrange",
    "section": "",
    "text": "geom_pointrange(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    fatten=4,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_pointrange.html#parameters",
    "href": "reference/geom_pointrange.html#parameters",
    "title": " plotnine.geom_pointrange",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nymax\n\n\n\nymin\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\nfill\nNone\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nshape\n'o'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\nfatten : float = 2\n\nA multiplicative factor used to increase the size of the point along the line-range.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_qq.html",
    "href": "reference/geom_qq.html",
    "title": " plotnine.geom_qq",
    "section": "",
    "text": "geom_qq(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"qq\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_qq.html#parameters",
    "href": "reference/geom_qq.html#parameters",
    "title": " plotnine.geom_qq",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\nfill\nNone\n\n\ngroup\n\n\n\nshape\n'o'\n\n\nsize\n1.5\n\n\nstroke\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"qq\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_quantile.html",
    "href": "reference/geom_quantile.html",
    "title": " plotnine.geom_quantile",
    "section": "",
    "text": "geom_quantile(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"quantile\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    lineend=\"butt\",\n    linejoin=\"round\",\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_quantile.html#parameters",
    "href": "reference/geom_quantile.html#parameters",
    "title": " plotnine.geom_quantile",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'#3366FF'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"quantile\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\nlineend : Literal[butt, round, projecting] = \"butt\"\n\nLine end style. This option is applied for solid linetypes.\n\nlinejoin : Literal[round, miter, bevel] = \"round\"\n\nLine join style. This option is applied for solid linetypes.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_rect.html",
    "href": "reference/geom_rect.html",
    "title": " plotnine.geom_rect",
    "section": "",
    "text": "geom_rect(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_rect.html#parameters",
    "href": "reference/geom_rect.html#parameters",
    "title": " plotnine.geom_rect",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nxmax\n\n\n\nxmin\n\n\n\nymax\n\n\n\nymin\n\n\n\nalpha\n1\n\n\ncolor\nNone\n\n\nfill\n'#595959'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_rug.html",
    "href": "reference/geom_rug.html",
    "title": " plotnine.geom_rug",
    "section": "",
    "text": "geom_rug(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    sides=\"bl\",\n    length=0.03,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_rug.html#parameters",
    "href": "reference/geom_rug.html#parameters",
    "title": " plotnine.geom_rug",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\nsides : str = \"bl\"\n\nSides onto which to draw the marks. Any combination chosen from the characters \"btlr\", for bottom, top, left or right side marks.\n\nlength\n\nlength of marks in fractions of horizontal/vertical panel size.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_sina.html",
    "href": "reference/geom_sina.html",
    "title": " plotnine.geom_sina",
    "section": "",
    "text": "geom_sina(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"sina\",\n    position=\"dodge\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_sina.html#parameters",
    "href": "reference/geom_sina.html#parameters",
    "title": " plotnine.geom_sina",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\nfill\nNone\n\n\ngroup\n\n\n\nshape\n'o'\n\n\nsize\n1.5\n\n\nstroke\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"sina\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"dodge\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_sina.html#see-also",
    "href": "reference/geom_sina.html#see-also",
    "title": " plotnine.geom_sina",
    "section": "See Also",
    "text": "See Also\n\nstat_sina"
  },
  {
    "objectID": "reference/geom_sina.html#references",
    "href": "reference/geom_sina.html#references",
    "title": " plotnine.geom_sina",
    "section": "References",
    "text": "References\nSidiropoulos, N., S. H. Sohi, T. L. Pedersen, B. T. Porse, O. Winther, N. Rapin, and F. O. Bagger. 2018. “SinaPlot: An Enhanced Chart for Simple and Truthful Representation of Single Observations over Multiple Classes.” J. Comp. Graph. Stat 27: 673–76."
  },
  {
    "objectID": "reference/geom_spoke.html",
    "href": "reference/geom_spoke.html",
    "title": " plotnine.geom_spoke",
    "section": "",
    "text": "geom_spoke(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"identity\",\n    position=\"identity\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    lineend=\"butt\",\n    arrow=None,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_spoke.html#parameters",
    "href": "reference/geom_spoke.html#parameters",
    "title": " plotnine.geom_spoke",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nangle\n\n\n\nradius\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'black'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"identity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/geom_spoke.html#see-also",
    "href": "reference/geom_spoke.html#see-also",
    "title": " plotnine.geom_spoke",
    "section": "See Also",
    "text": "See Also\n\ngeom_segment\n\nFor documentation of extra parameters."
  },
  {
    "objectID": "reference/geom_text.html",
    "href": "reference/geom_text.html",
    "title": " plotnine.geom_text",
    "section": "",
    "text": "geom_text(mapping=None, data=None, kwargs={})"
  },
  {
    "objectID": "reference/geom_text.html#parameters",
    "href": "reference/geom_text.html#parameters",
    "title": " plotnine.geom_text",
    "section": "Parameters",
    "text": "Parameters\n\n\nparse : bool = False\n\nIf True, the labels will be rendered with latex.\n\nnudge_x : float = 0\n\nHorizontal adjustment to apply to the text\n\nnudge_y : float = 0\n\nVertical adjustment to apply to the text\n\nadjust_text\n\nParameters to adjust_text will repel overlapping texts. This parameter takes priority of over nudge_x and nudge_y. adjust_text does not work well when it is used in the first layer of the plot, or if it is the only layer. For more see the documentation at https://github.com/Phlya/adjustText/wiki .\n\nformat_string : str = None\n\nIf not None, then the text is formatted with this string using str.format e.g:\n# 2.348 -&gt; \"2.35%\"\ngeom_text(format_string=\"{:.2f}%\")\n\npath_effects : list = None\n\nIf not None, then the text will use these effects. See  documentation for more details."
  },
  {
    "objectID": "reference/geom_text.html#see-also",
    "href": "reference/geom_text.html#see-also",
    "title": " plotnine.geom_text",
    "section": "See Also",
    "text": "See Also\n\ngeom_label\n\n\n\nText\n\n\n\npatheffects"
  },
  {
    "objectID": "reference/geom_violin.html",
    "href": "reference/geom_violin.html",
    "title": " plotnine.geom_violin",
    "section": "",
    "text": "geom_violin(\n    mapping=None,\n    data=None,\n    *,\n    stat=\"ydensity\",\n    position=\"dodge\",\n    na_rm=False,\n    inherit_aes=True,\n    show_legend=None,\n    raster=False,\n    draw_quantiles=None,\n    style=\"full\",\n    scale=\"area\",\n    trim=True,\n    width=None,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/geom_violin.html#parameters",
    "href": "reference/geom_violin.html#parameters",
    "title": " plotnine.geom_violin",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\nalpha\n1\n\n\ncolor\n'#333333'\n\n\nfill\n'white'\n\n\ngroup\n\n\n\nlinetype\n'solid'\n\n\nsize\n0.5\n\n\nweight\n1\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\nstat : str | stat = \"ydensity\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"dodge\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ninherit_aes : bool = True\n\nIf False, overrides the default aesthetics.\n\nshow_legend : bool | dict = None\n\nWhether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g show_legend={'color': False}, any other aesthetic are included by default.\n\nraster : bool = False\n\nIf True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\ndraw_quantiles : float | list[float] = None\n\ndraw horizontal lines at the given quantiles (0..1) of the density estimate.\n\nstyle : str = \"full\"\n\nThe type of violin plot to draw. The options are:\n'full'        # Regular (2 sided violins)\n'left'        # Left-sided half violins\n'right'       # Right-sided half violins\n'left-right'  # Alternate (left first) half violins by the group\n'right-left'  # Alternate (right first) half violins by the group\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the stat."
  },
  {
    "objectID": "reference/get_option.html",
    "href": "reference/get_option.html",
    "title": " plotnine.options.get_option",
    "section": "",
    "text": "get_option(name)"
  },
  {
    "objectID": "reference/get_option.html#parameters",
    "href": "reference/get_option.html#parameters",
    "title": " plotnine.options.get_option",
    "section": "Parameters",
    "text": "Parameters\n\n\nname : str\n\nName of the option"
  },
  {
    "objectID": "reference/ggtitle.html",
    "href": "reference/ggtitle.html",
    "title": " plotnine.ggtitle",
    "section": "",
    "text": "ggtitle(title=None, subtitle=None)"
  },
  {
    "objectID": "reference/ggtitle.html#parameters",
    "href": "reference/ggtitle.html#parameters",
    "title": " plotnine.ggtitle",
    "section": "Parameters",
    "text": "Parameters\n\n\ntitle : str | None = None\n\nPlot title"
  },
  {
    "objectID": "reference/guide_colorbar.html",
    "href": "reference/guide_colorbar.html",
    "title": " plotnine.guide_colorbar",
    "section": "",
    "text": "guide_colorbar(\n    title=None,\n    theme=Theme(),\n    position=None,\n    direction=None,\n    reverse=False,\n    order=0,\n    nbin=None,\n    display=\"gradient\",\n    alpha=None,\n    draw_ulim=True,\n    draw_llim=True\n)"
  },
  {
    "objectID": "reference/guide_colorbar.html#parameter-attributes",
    "href": "reference/guide_colorbar.html#parameter-attributes",
    "title": " plotnine.guide_colorbar",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\ntitle: Optional[str] = None\n\nTitle of the guide. Default is the name of the aesthetic or the name specified using lab\n\ntheme: Theme = field(default_factory=Theme)\n\nA theme to style the guide. If None, the plots theme is used.\n\nposition: Optional[LegendPosition] = None\n\nWhere to place the guide relative to the panels.\n\ndirection: Optional[Orientation] = None\n\nDirection of the guide. The default is depends on legend_position.\n\nreverse: bool = False\n\nWhether to reverse the order of the legend keys.\n\norder: int = 0\n\nOrder of this guide among multiple guides.\n\nnbin: Optional[int] = None\n\nNumber of bins for drawing a colorbar. A larger value yields a smoother colorbar\n\ndisplay: Literal[\"gradient\", \"rectangles\", \"raster\"] = \"gradient\"\n\nHow to render the colorbar.\n\nalpha: Optional[float] = None\n\nOpacity (in the range [0, 1]) of the colorbar. The default None, is to use the opacity of the plot.\n\ndraw_ulim: bool = True\n\nWhether to show the upper limit tick marks.\n\ndraw_llim: bool = True\n\nWhether to show the lower limit tick marks."
  },
  {
    "objectID": "reference/guide_colorbar.html#notes",
    "href": "reference/guide_colorbar.html#notes",
    "title": " plotnine.guide_colorbar",
    "section": "Notes",
    "text": "Notes\nTo correctly place a rasterized colorbar when saving the plot as an svg or pdf, you should set the dpi to 72 i.e. theme(dpi=72)."
  },
  {
    "objectID": "reference/guides.html",
    "href": "reference/guides.html",
    "title": " plotnine.guides",
    "section": "",
    "text": "guides(\n    alpha=None,\n    color=None,\n    fill=None,\n    linetype=None,\n    shape=None,\n    size=None,\n    stroke=None,\n    colour=None\n)"
  },
  {
    "objectID": "reference/guides.html#parameter-attributes",
    "href": "reference/guides.html#parameter-attributes",
    "title": " plotnine.guides",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nalpha: Optional[LegendOrColorbar | NoGuide] = None\n\nGuide for alpha scale.\n\ncolor: Optional[LegendOrColorbar | NoGuide] = None\n\nGuide for color scale.\n\nfill: Optional[LegendOrColorbar | NoGuide] = None\n\nGuide for fill scale.\n\nlinetype: Optional[LegendOnly | NoGuide] = None\n\nGuide for linetype scale.\n\nshape: Optional[LegendOnly | NoGuide] = None\n\nGuide for shape scale.\n\nsize: Optional[LegendOnly | NoGuide] = None\n\nGuide for size scale.\n\nstroke: Optional[LegendOnly | NoGuide] = None\n\nGuide for stroke scale.\n\ncolour: Optional[LegendOnly | NoGuide] = None\n\nGuide for colour scale."
  },
  {
    "objectID": "reference/label_both.html",
    "href": "reference/label_both.html",
    "title": " plotnine.label_both",
    "section": "",
    "text": "label_both(label_info, multi_line=True, sep=\": \")"
  },
  {
    "objectID": "reference/label_both.html#parameters",
    "href": "reference/label_both.html#parameters",
    "title": " plotnine.label_both",
    "section": "Parameters",
    "text": "Parameters\n\n\nlabel_info : strip_label_details\n\nLabel information to be modified.\n\nmulti_line : bool = True\n\nWhether to place each variable on a separate line\n\nsep : str = \": \"\n\nSeparation between variable name and value"
  },
  {
    "objectID": "reference/label_both.html#returns",
    "href": "reference/label_both.html#returns",
    "title": " plotnine.label_both",
    "section": "Returns",
    "text": "Returns\n\n\nout : strip_label_details\n\nLabel information"
  },
  {
    "objectID": "reference/label_value.html",
    "href": "reference/label_value.html",
    "title": " plotnine.label_value",
    "section": "",
    "text": "label_value(label_info, multi_line=True)"
  },
  {
    "objectID": "reference/label_value.html#parameters",
    "href": "reference/label_value.html#parameters",
    "title": " plotnine.label_value",
    "section": "Parameters",
    "text": "Parameters\n\n\nlabel_info : strip_label_details\n\nLabel information whose values will be returned\n\nmulti_line : bool = True\n\nWhether to place each variable on a separate line"
  },
  {
    "objectID": "reference/label_value.html#returns",
    "href": "reference/label_value.html#returns",
    "title": " plotnine.label_value",
    "section": "Returns",
    "text": "Returns\n\n\nout : strip_label_details\n\nLabel text strings"
  },
  {
    "objectID": "reference/labs.html",
    "href": "reference/labs.html",
    "title": " plotnine.labs",
    "section": "",
    "text": "labs(\n    x=None,\n    y=None,\n    alpha=None,\n    color=None,\n    colour=None,\n    fill=None,\n    linetype=None,\n    shape=None,\n    size=None,\n    stroke=None,\n    title=None,\n    subtitle=None,\n    caption=None\n)"
  },
  {
    "objectID": "reference/labs.html#parameter-attributes",
    "href": "reference/labs.html#parameter-attributes",
    "title": " plotnine.labs",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nx: str | None = None\n\nName of the x-axis.\n\ny: str | None = None\n\nName of the y-axis.\n\nalpha: str | None = None\n\nName of the alpha legend.\n\ncolor: str | None = None\n\nName of the color legend or colorbar.\n\ncolour: str | None = None\n\nName of the colour legend or colourbar.\nThis is an alias of the color parameter. Only use one of the spellings.\n\nfill: str | None = None\n\nName of the fill legend/colourbar.\n\nlinetype: str | None = None\n\nName of the linetype legend.\n\nshape: str | None = None\n\nName of the shape legend.\n\nsize: str | None = None\n\nName of the size legend.\n\nstroke: str | None = None\n\nName of the stroke legend.\n\ntitle: str | None = None\n\nThe title of the plot.\n\nsubtitle: str | None = None\n\nThe subtitle of the plot.\n\ncaption: str | None = None\n\nThe caption at the bottom of the plot."
  },
  {
    "objectID": "reference/legend_background.html",
    "href": "reference/legend_background.html",
    "title": " plotnine.themes.themeable.legend_background",
    "section": "",
    "text": "legend_background(theme_element)"
  },
  {
    "objectID": "reference/legend_background.html#parameters",
    "href": "reference/legend_background.html#parameters",
    "title": " plotnine.themes.themeable.legend_background",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_rect"
  },
  {
    "objectID": "reference/legend_box_background.html",
    "href": "reference/legend_box_background.html",
    "title": " plotnine.themes.themeable.legend_box_background",
    "section": "",
    "text": "legend_box_background(theme_element)"
  },
  {
    "objectID": "reference/legend_box_background.html#parameters",
    "href": "reference/legend_box_background.html#parameters",
    "title": " plotnine.themes.themeable.legend_box_background",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_rect"
  },
  {
    "objectID": "reference/legend_box_background.html#notes",
    "href": "reference/legend_box_background.html#notes",
    "title": " plotnine.themes.themeable.legend_box_background",
    "section": "Notes",
    "text": "Notes\nNot Implemented. We would have to place the outermost VPacker/HPacker boxes that hold the individual legends onto an object that has a patch."
  },
  {
    "objectID": "reference/legend_box_margin.html",
    "href": "reference/legend_box_margin.html",
    "title": " plotnine.themes.themeable.legend_box_margin",
    "section": "",
    "text": "legend_box_margin(theme_element)"
  },
  {
    "objectID": "reference/legend_box_margin.html#parameters",
    "href": "reference/legend_box_margin.html#parameters",
    "title": " plotnine.themes.themeable.legend_box_margin",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : int\n\nValue in points."
  },
  {
    "objectID": "reference/legend_direction.html",
    "href": "reference/legend_direction.html",
    "title": " plotnine.themes.themeable.legend_direction",
    "section": "",
    "text": "legend_direction(theme_element)"
  },
  {
    "objectID": "reference/legend_direction.html#parameters",
    "href": "reference/legend_direction.html#parameters",
    "title": " plotnine.themes.themeable.legend_direction",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : Literal[\"vertical\", \"horizontal\"]\n\nVertically or horizontally"
  },
  {
    "objectID": "reference/legend_justification.html",
    "href": "reference/legend_justification.html",
    "title": " plotnine.themes.themeable.legend_justification",
    "section": "",
    "text": "legend_justification(theme_element)"
  },
  {
    "objectID": "reference/legend_justification.html#parameters",
    "href": "reference/legend_justification.html#parameters",
    "title": " plotnine.themes.themeable.legend_justification",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : Literal[\"left\", \"right\", \"center\", \"top\", \"bottom\"] | float | tuple[float, float]\n\nHow to justify the entire group with 1 or more guides."
  },
  {
    "objectID": "reference/legend_justification_inside.html",
    "href": "reference/legend_justification_inside.html",
    "title": " plotnine.themes.themeable.legend_justification_inside",
    "section": "",
    "text": "legend_justification_inside(theme_element)"
  },
  {
    "objectID": "reference/legend_justification_inside.html#parameters",
    "href": "reference/legend_justification_inside.html#parameters",
    "title": " plotnine.themes.themeable.legend_justification_inside",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : Literal[\"left\", \"right\", \"center\", \"top\", \"bottom\"] | float | tuple[float, float]\n\nHow to justify the entire group with 1 or more guides. i.e. What point of the legend box to place at the destination point in the panels area.\nIf a float, it should be in the range [0, 1], and it implies the horizontal part and with the vertical part fixed at 0.5.\nTherefore a float value of 0.8 equivalent to a tuple value of (0.8, 0.5)."
  },
  {
    "objectID": "reference/legend_justification_right.html",
    "href": "reference/legend_justification_right.html",
    "title": " plotnine.themes.themeable.legend_justification_right",
    "section": "",
    "text": "legend_justification_right(theme_element)"
  },
  {
    "objectID": "reference/legend_justification_right.html#parameters",
    "href": "reference/legend_justification_right.html#parameters",
    "title": " plotnine.themes.themeable.legend_justification_right",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : Literal[\"bottom\", \"center\", \"top\"] | float\n\nHow to justify the entire group with 1 or more guides. i.e. How to slide the legend along the right column. If a float, it should be in the range [0, 1], where 0 is \"bottom\" and 1 is \"top\"."
  },
  {
    "objectID": "reference/legend_key.html",
    "href": "reference/legend_key.html",
    "title": " plotnine.themes.themeable.legend_key",
    "section": "",
    "text": "legend_key(theme_element)"
  },
  {
    "objectID": "reference/legend_key.html#parameters",
    "href": "reference/legend_key.html#parameters",
    "title": " plotnine.themes.themeable.legend_key",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_rect"
  },
  {
    "objectID": "reference/legend_key_size.html",
    "href": "reference/legend_key_size.html",
    "title": " plotnine.themes.themeable.legend_key_size",
    "section": "",
    "text": "legend_key_size(theme_element)"
  },
  {
    "objectID": "reference/legend_key_size.html#parameters",
    "href": "reference/legend_key_size.html#parameters",
    "title": " plotnine.themes.themeable.legend_key_size",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nValue in points."
  },
  {
    "objectID": "reference/legend_key_spacing_x.html",
    "href": "reference/legend_key_spacing_x.html",
    "title": " plotnine.themes.themeable.legend_key_spacing_x",
    "section": "",
    "text": "legend_key_spacing_x(theme_element)"
  },
  {
    "objectID": "reference/legend_key_spacing_x.html#parameters",
    "href": "reference/legend_key_spacing_x.html#parameters",
    "title": " plotnine.themes.themeable.legend_key_spacing_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : int\n\nSize in points"
  },
  {
    "objectID": "reference/legend_key_width.html",
    "href": "reference/legend_key_width.html",
    "title": " plotnine.themes.themeable.legend_key_width",
    "section": "",
    "text": "legend_key_width(theme_element)"
  },
  {
    "objectID": "reference/legend_key_width.html#parameters",
    "href": "reference/legend_key_width.html#parameters",
    "title": " plotnine.themes.themeable.legend_key_width",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nValue in points"
  },
  {
    "objectID": "reference/legend_position.html",
    "href": "reference/legend_position.html",
    "title": " plotnine.themes.themeable.legend_position",
    "section": "",
    "text": "legend_position(theme_element)"
  },
  {
    "objectID": "reference/legend_position.html#parameters",
    "href": "reference/legend_position.html#parameters",
    "title": " plotnine.themes.themeable.legend_position",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : Literal[\"right\", \"left\", \"top\", \"bottom\", \"inside\"] | tuple[float, float] | Literal[\"none\"]\n\nWhere to put the legend. Along the edge or inside the panels.\nIf “inside”, the default location is legend_position_inside.\nA tuple of values implies “inside” the panels at those exact values, which should be in the range [0, 1] within the panels area.\nA value of \"none\" turns off the legend."
  },
  {
    "objectID": "reference/legend_spacing.html",
    "href": "reference/legend_spacing.html",
    "title": " plotnine.themes.themeable.legend_spacing",
    "section": "",
    "text": "legend_spacing(theme_element)"
  },
  {
    "objectID": "reference/legend_spacing.html#parameters",
    "href": "reference/legend_spacing.html#parameters",
    "title": " plotnine.themes.themeable.legend_spacing",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nValue in points."
  },
  {
    "objectID": "reference/legend_text_colorbar.html",
    "href": "reference/legend_text_colorbar.html",
    "title": " plotnine.themes.themeable.legend_text_colorbar",
    "section": "",
    "text": "legend_text_colorbar(theme_element)"
  },
  {
    "objectID": "reference/legend_text_colorbar.html#parameters",
    "href": "reference/legend_text_colorbar.html#parameters",
    "title": " plotnine.themes.themeable.legend_text_colorbar",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/legend_text_colorbar.html#notes",
    "href": "reference/legend_text_colorbar.html#notes",
    "title": " plotnine.themes.themeable.legend_text_colorbar",
    "section": "Notes",
    "text": "Notes\nHorizontal alignment ha has no effect when the text is to the left or to the right. Likewise vertical alignment va has no effect when the text at the top or the bottom."
  },
  {
    "objectID": "reference/legend_text_position.html",
    "href": "reference/legend_text_position.html",
    "title": " plotnine.themes.themeable.legend_text_position",
    "section": "",
    "text": "legend_text_position(theme_element)"
  },
  {
    "objectID": "reference/legend_text_position.html#parameters",
    "href": "reference/legend_text_position.html#parameters",
    "title": " plotnine.themes.themeable.legend_text_position",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : Literal[\"top\", \"bottom\", \"left\", \"right\"] | None\n\nPosition of the legend key text. The default depends on the position of the legend."
  },
  {
    "objectID": "reference/legend_title.html",
    "href": "reference/legend_title.html",
    "title": " plotnine.themes.themeable.legend_title",
    "section": "",
    "text": "legend_title(theme_element)"
  },
  {
    "objectID": "reference/legend_title.html#parameters",
    "href": "reference/legend_title.html#parameters",
    "title": " plotnine.themes.themeable.legend_title",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/lims.html",
    "href": "reference/lims.html",
    "title": " plotnine.lims",
    "section": "",
    "text": "lims(kwargs={})"
  },
  {
    "objectID": "reference/lims.html#parameters",
    "href": "reference/lims.html#parameters",
    "title": " plotnine.lims",
    "section": "Parameters",
    "text": "Parameters\n\n\nkwargs = {}\n\nAesthetic and the values of the limits. e.g x=(40, 100)"
  },
  {
    "objectID": "reference/lims.html#notes",
    "href": "reference/lims.html#notes",
    "title": " plotnine.lims",
    "section": "Notes",
    "text": "Notes\nIf the 2nd value of limits is less than the first, a reversed scale will be created."
  },
  {
    "objectID": "reference/luv_colours.html",
    "href": "reference/luv_colours.html",
    "title": " plotnine.data.luv_colours",
    "section": "",
    "text": "luv_colours = pd.read_csv(DATA_DIR / \"luv_colours.csv\")"
  },
  {
    "objectID": "reference/luv_colours.html#description",
    "href": "reference/luv_colours.html#description",
    "title": " plotnine.data.luv_colours",
    "section": "Description",
    "text": "Description\nNamed colors translated into Luv colour space."
  },
  {
    "objectID": "reference/luv_colours.html#format",
    "href": "reference/luv_colours.html#format",
    "title": " plotnine.data.luv_colours",
    "section": "Format",
    "text": "Format\nA data frame with 657 observations and 4 variables:\n\n\n\nColumn\nDescription\n\n\n\n\nL\nL position in Luv colour space\n\n\nu\nu position in Luv colour space\n\n\nv\nv position in Luv colour space\n\n\ncol\nColour name"
  },
  {
    "objectID": "reference/midwest.html",
    "href": "reference/midwest.html",
    "title": " plotnine.data.midwest",
    "section": "",
    "text": "midwest = pd.read_csv(DATA_DIR / \"midwest.csv\")"
  },
  {
    "objectID": "reference/midwest.html#description",
    "href": "reference/midwest.html#description",
    "title": " plotnine.data.midwest",
    "section": "Description",
    "text": "Description\nDemographic information of midwest counties"
  },
  {
    "objectID": "reference/midwest.html#format",
    "href": "reference/midwest.html#format",
    "title": " plotnine.data.midwest",
    "section": "Format",
    "text": "Format\nA data frame with 437 rows and 28 variables\n\n\n\nColumn\nDescription\n\n\n\n\nPID\n\n\n\ncounty\n\n\n\nstate\n\n\n\narea\n\n\n\npoptotal\nTotal population\n\n\npopdensity\nPopulation density\n\n\npopwhite\nNumber of whites\n\n\npopblack\nNumber of blacks\n\n\npopamerindian\nNumber of American Indians\n\n\npopasian\nNumber of Asians\n\n\npopother\nNumber of other races\n\n\npercwhite\nPercent white\n\n\npercblack\nPercent black\n\n\npercamerindan\nPercent American Indian\n\n\npercasian\nPercent Asian\n\n\npercother\nPercent other races\n\n\npopadults\nNumber of adults\n\n\nperchsd\n\n\n\npercollege\nPercent college educated\n\n\npercprof\nPercent profession\n\n\npoppovertyknown\n\n\n\npercpovertyknown\n\n\n\npercbelowpoverty\n\n\n\npercchildbelowpovert\n\n\n\npercadultpoverty\n\n\n\npercelderlypoverty\n\n\n\ninmetro\nIn a metro area\n\n\ncategory"
  },
  {
    "objectID": "reference/msleep.html",
    "href": "reference/msleep.html",
    "title": " plotnine.data.msleep",
    "section": "",
    "text": "msleep = pd.read_csv(DATA_DIR / \"msleep.csv\")"
  },
  {
    "objectID": "reference/msleep.html#description",
    "href": "reference/msleep.html#description",
    "title": " plotnine.data.msleep",
    "section": "Description",
    "text": "Description\nThis is an updated and expanded version of the mammals sleep dataset. Updated sleep times and weights were taken from V. M. Savage and G. B. West. A quantitative, theoretical framework for understanding mammalian sleep. Proceedings of the National Academy of Sciences, 104 (3):1051-1056, 2007."
  },
  {
    "objectID": "reference/msleep.html#format",
    "href": "reference/msleep.html#format",
    "title": " plotnine.data.msleep",
    "section": "Format",
    "text": "Format\nA data frame with 83 rows and 11 variables\n\n\n\nColumn\nDescription\n\n\n\n\nname genus\ncommon name\n\n\nvore order\ncarnivore, omnivore or herbivore?\n\n\nconservation\nthe conservation status of the animal\n\n\nsleep_total\ntotal amount of sleep, in hours\n\n\nsleep_rem\nrem sleep, in hours\n\n\nsleep_cycle\nlength of sleep cycle, in hours\n\n\nawake\namount of time spent awake, in hours\n\n\nbrainwt\nbrain weight in kilograms\n\n\nbodywt\nbody weight in kilograms"
  },
  {
    "objectID": "reference/msleep.html#details",
    "href": "reference/msleep.html#details",
    "title": " plotnine.data.msleep",
    "section": "Details",
    "text": "Details\nAdditional variables order, conservation status and vore were added from wikipedia."
  },
  {
    "objectID": "reference/pageviews.html",
    "href": "reference/pageviews.html",
    "title": " plotnine.data.pageviews",
    "section": "",
    "text": "pageviews = pd.read_csv(DATA_DIR / \"pageviews.csv\", parse_dates=[0])"
  },
  {
    "objectID": "reference/panel_border.html",
    "href": "reference/panel_border.html",
    "title": " plotnine.themes.themeable.panel_border",
    "section": "",
    "text": "panel_border(theme_element)"
  },
  {
    "objectID": "reference/panel_border.html#parameters",
    "href": "reference/panel_border.html#parameters",
    "title": " plotnine.themes.themeable.panel_border",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_rect"
  },
  {
    "objectID": "reference/panel_grid_major.html",
    "href": "reference/panel_grid_major.html",
    "title": " plotnine.themes.themeable.panel_grid_major",
    "section": "",
    "text": "panel_grid_major(theme_element)"
  },
  {
    "objectID": "reference/panel_grid_major.html#parameters",
    "href": "reference/panel_grid_major.html#parameters",
    "title": " plotnine.themes.themeable.panel_grid_major",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/panel_grid_major_y.html",
    "href": "reference/panel_grid_major_y.html",
    "title": " plotnine.themes.themeable.panel_grid_major_y",
    "section": "",
    "text": "panel_grid_major_y(theme_element)"
  },
  {
    "objectID": "reference/panel_grid_major_y.html#parameters",
    "href": "reference/panel_grid_major_y.html#parameters",
    "title": " plotnine.themes.themeable.panel_grid_major_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/panel_grid_minor_x.html",
    "href": "reference/panel_grid_minor_x.html",
    "title": " plotnine.themes.themeable.panel_grid_minor_x",
    "section": "",
    "text": "panel_grid_minor_x(theme_element)"
  },
  {
    "objectID": "reference/panel_grid_minor_x.html#parameters",
    "href": "reference/panel_grid_minor_x.html#parameters",
    "title": " plotnine.themes.themeable.panel_grid_minor_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_line"
  },
  {
    "objectID": "reference/panel_ontop.html",
    "href": "reference/panel_ontop.html",
    "title": " plotnine.themes.themeable.panel_ontop",
    "section": "",
    "text": "panel_ontop(theme_element)"
  },
  {
    "objectID": "reference/panel_ontop.html#parameters",
    "href": "reference/panel_ontop.html#parameters",
    "title": " plotnine.themes.themeable.panel_ontop",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : bool\n\nDefault is False."
  },
  {
    "objectID": "reference/panel_spacing_x.html",
    "href": "reference/panel_spacing_x.html",
    "title": " plotnine.themes.themeable.panel_spacing_x",
    "section": "",
    "text": "panel_spacing_x(theme_element)"
  },
  {
    "objectID": "reference/panel_spacing_x.html#parameters",
    "href": "reference/panel_spacing_x.html#parameters",
    "title": " plotnine.themes.themeable.panel_spacing_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nSize as a fraction of the figure width."
  },
  {
    "objectID": "reference/plot_background.html",
    "href": "reference/plot_background.html",
    "title": " plotnine.themes.themeable.plot_background",
    "section": "",
    "text": "plot_background(theme_element)"
  },
  {
    "objectID": "reference/plot_background.html#parameters",
    "href": "reference/plot_background.html#parameters",
    "title": " plotnine.themes.themeable.plot_background",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_rect"
  },
  {
    "objectID": "reference/plot_margin.html",
    "href": "reference/plot_margin.html",
    "title": " plotnine.themes.themeable.plot_margin",
    "section": "",
    "text": "plot_margin(theme_element)"
  },
  {
    "objectID": "reference/plot_margin.html#parameters",
    "href": "reference/plot_margin.html#parameters",
    "title": " plotnine.themes.themeable.plot_margin",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nMust be in the [0, 1] range. It is specified as a fraction of the figure width and figure height."
  },
  {
    "objectID": "reference/plot_margin_left.html",
    "href": "reference/plot_margin_left.html",
    "title": " plotnine.themes.themeable.plot_margin_left",
    "section": "",
    "text": "plot_margin_left(theme_element)"
  },
  {
    "objectID": "reference/plot_margin_left.html#parameters",
    "href": "reference/plot_margin_left.html#parameters",
    "title": " plotnine.themes.themeable.plot_margin_left",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nMust be in the [0, 1] range. It is specified as a fraction of the figure width and figure height."
  },
  {
    "objectID": "reference/plot_margin_top.html",
    "href": "reference/plot_margin_top.html",
    "title": " plotnine.themes.themeable.plot_margin_top",
    "section": "",
    "text": "plot_margin_top(theme_element)"
  },
  {
    "objectID": "reference/plot_margin_top.html#parameters",
    "href": "reference/plot_margin_top.html#parameters",
    "title": " plotnine.themes.themeable.plot_margin_top",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nMust be in the [0, 1] range. It is specified as a fraction of the figure width and figure height."
  },
  {
    "objectID": "reference/plot_title.html",
    "href": "reference/plot_title.html",
    "title": " plotnine.themes.themeable.plot_title",
    "section": "",
    "text": "plot_title(theme_element)"
  },
  {
    "objectID": "reference/plot_title.html#parameters",
    "href": "reference/plot_title.html#parameters",
    "title": " plotnine.themes.themeable.plot_title",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/plot_title.html#notes",
    "href": "reference/plot_title.html#notes",
    "title": " plotnine.themes.themeable.plot_title",
    "section": "Notes",
    "text": "Notes\nThe default horizontal alignment for the title is center. However the title will be left aligned if and only if there is a subtitle and its horizontal alignment has not been set (so it defaults to the left).\nThe defaults ensure that, short titles are not awkwardly left-aligned, and that a title and a subtitle will not be awkwardly mis-aligned in the center or with different alignments."
  },
  {
    "objectID": "reference/position_dodge.html",
    "href": "reference/position_dodge.html",
    "title": " plotnine.position_dodge",
    "section": "",
    "text": "position_dodge(width=None, preserve=\"total\")"
  },
  {
    "objectID": "reference/position_dodge.html#parameters",
    "href": "reference/position_dodge.html#parameters",
    "title": " plotnine.position_dodge",
    "section": "Parameters",
    "text": "Parameters\n\n\nwidth : Optional[float] = None\n\nDodging width, when different to the width of the individual elements. This is useful when you want to align narrow geoms with wider geoms\n\npreserve : Literal[\"total\", \"single\"] = \"total\"\n\nShould dodging preserve the total width of all elements at a position, or the width of a single element?"
  },
  {
    "objectID": "reference/position_fill.html",
    "href": "reference/position_fill.html",
    "title": " plotnine.position_fill",
    "section": "",
    "text": "position_fill(vjust=1, reverse=False)\n\n\nNormalise stacked objects to unit height"
  },
  {
    "objectID": "reference/position_jitter.html",
    "href": "reference/position_jitter.html",
    "title": " plotnine.position_jitter",
    "section": "",
    "text": "position_jitter(width=None, height=None, random_state=None)"
  },
  {
    "objectID": "reference/position_jitter.html#parameters",
    "href": "reference/position_jitter.html#parameters",
    "title": " plotnine.position_jitter",
    "section": "Parameters",
    "text": "Parameters\n\n\nwidth : Optional[float] = None\n\nProportion to jitter in horizontal direction. If None, 0.4 of the resolution of the data.\n\nheight : Optional[float] = None\n\nProportion to jitter in vertical direction. If None, 0.4 of the resolution of the data.\n\nrandom_state : Optional[int | np.random.RandomState] = None\n\nSeed or Random number generator to use. If None, then numpy global generator numpy.random is used."
  },
  {
    "objectID": "reference/position_nudge.html",
    "href": "reference/position_nudge.html",
    "title": " plotnine.position_nudge",
    "section": "",
    "text": "position_nudge(x=0, y=0)"
  },
  {
    "objectID": "reference/position_nudge.html#parameters",
    "href": "reference/position_nudge.html#parameters",
    "title": " plotnine.position_nudge",
    "section": "Parameters",
    "text": "Parameters\n\n\nx : float = 0\n\nHorizontal nudge\n\ny : float = 0\n\nVertical nudge"
  },
  {
    "objectID": "reference/presidential.html",
    "href": "reference/presidential.html",
    "title": " plotnine.data.presidential",
    "section": "",
    "text": "presidential = pd.read_csv(DATA_DIR / \"presidential.csv\", parse_dates=[1, 2])"
  },
  {
    "objectID": "reference/presidential.html#description",
    "href": "reference/presidential.html#description",
    "title": " plotnine.data.presidential",
    "section": "Description",
    "text": "Description\nThe names of each president, the start and end date of their term, and their party of 11 US presidents from Eisenhower to Obama."
  },
  {
    "objectID": "reference/presidential.html#format",
    "href": "reference/presidential.html#format",
    "title": " plotnine.data.presidential",
    "section": "Format",
    "text": "Format\nA data frame with 11 rows and 4 variables\n\n\n\nColumn\nDescription\n\n\n\n\nname\nName of president\n\n\nstart\nStart of presidential term\n\n\nend\nEnd of presidential term\n\n\nparty\nPolitical Party"
  },
  {
    "objectID": "reference/rect.html",
    "href": "reference/rect.html",
    "title": " plotnine.themes.themeable.rect",
    "section": "",
    "text": "rect(theme_element)"
  },
  {
    "objectID": "reference/rect.html#parameters",
    "href": "reference/rect.html#parameters",
    "title": " plotnine.themes.themeable.rect",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_rect"
  },
  {
    "objectID": "reference/scale.html",
    "href": "reference/scale.html",
    "title": " plotnine.scales.scale.scale",
    "section": "",
    "text": "scale(\n    *,\n    name=None,\n    breaks,\n    limits,\n    labels=True,\n    expand=None,\n    guide,\n    na_value=np.nan,\n    aesthetics=list()\n)"
  },
  {
    "objectID": "reference/scale.html#parameter-attributes",
    "href": "reference/scale.html#parameter-attributes",
    "title": " plotnine.scales.scale.scale",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: BreaksUserT\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: LimitsUserT\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: GuideTypeT\n\nWhether to include a legend\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun."
  },
  {
    "objectID": "reference/scale_alpha_continuous.html",
    "href": "reference/scale_alpha_continuous.html",
    "title": " plotnine.scale_alpha_continuous",
    "section": "",
    "text": "scale_alpha_continuous(\n    range=(0.1, 1),\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_alpha_continuous.html#init-parameters",
    "href": "reference/scale_alpha_continuous.html#init-parameters",
    "title": " plotnine.scale_alpha_continuous",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nrange: tuple[float, float] = (0.1, 1)\n\nRange ([Minimum, Maximum]) of output alpha values. Should be between 0 and 1."
  },
  {
    "objectID": "reference/scale_alpha_continuous.html#parameter-attributes",
    "href": "reference/scale_alpha_continuous.html#parameter-attributes",
    "title": " plotnine.scale_alpha_continuous",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_alpha_discrete.html",
    "href": "reference/scale_alpha_discrete.html",
    "title": " plotnine.scale_alpha_discrete",
    "section": "",
    "text": "scale_alpha_discrete(\n    range=(0.1, 1),\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_alpha_discrete.html#init-parameters",
    "href": "reference/scale_alpha_discrete.html#init-parameters",
    "title": " plotnine.scale_alpha_discrete",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nrange: tuple[float, float] = (0.1, 1)\n\nRange ([Minimum, Maximum]) of output alpha values. Should be between 0 and 1."
  },
  {
    "objectID": "reference/scale_alpha_discrete.html#parameter-attributes",
    "href": "reference/scale_alpha_discrete.html#parameter-attributes",
    "title": " plotnine.scale_alpha_discrete",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_alpha_manual.html",
    "href": "reference/scale_alpha_manual.html",
    "title": " plotnine.scale_alpha_manual",
    "section": "",
    "text": "scale_alpha_manual(\n    values,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_alpha_manual.html#init-parameters",
    "href": "reference/scale_alpha_manual.html#init-parameters",
    "title": " plotnine.scale_alpha_manual",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nvalues: Sequence[Any] | dict[Any, Any] \n\nAlpha values (in the [0, 1] range) that make up the palette. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to alpha values."
  },
  {
    "objectID": "reference/scale_alpha_manual.html#parameter-attributes",
    "href": "reference/scale_alpha_manual.html#parameter-attributes",
    "title": " plotnine.scale_alpha_manual",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_color_cmap.html",
    "href": "reference/scale_color_cmap.html",
    "title": " plotnine.scale_color_cmap",
    "section": "",
    "text": "scale_color_cmap(\n    cmap_name=\"viridis\",\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_color_cmap.html#init-parameters",
    "href": "reference/scale_color_cmap.html#init-parameters",
    "title": " plotnine.scale_color_cmap",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ncmap_name: str = 'viridis'\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see colormaps."
  },
  {
    "objectID": "reference/scale_color_cmap.html#parameter-attributes",
    "href": "reference/scale_color_cmap.html#parameter-attributes",
    "title": " plotnine.scale_color_cmap",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_color_cmap.html#see-also",
    "href": "reference/scale_color_cmap.html#see-also",
    "title": " plotnine.scale_color_cmap",
    "section": "See Also",
    "text": "See Also\n\nmatplotlib.cm\n\n\n\nmatplotlib.colors"
  },
  {
    "objectID": "reference/scale_color_datetime.html",
    "href": "reference/scale_color_datetime.html",
    "title": " plotnine.scale_color_datetime",
    "section": "",
    "text": "scale_color_datetime(\n    cmap_name=\"viridis\",\n    date_breaks=None,\n    date_labels=None,\n    date_minor_breaks=None,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"datetime\"\n)"
  },
  {
    "objectID": "reference/scale_color_datetime.html#init-parameters",
    "href": "reference/scale_color_datetime.html#init-parameters",
    "title": " plotnine.scale_color_datetime",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ncmap_name: str = 'viridis'\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see colormaps.\n\ndate_breaks: str | None = None\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\ndate_labels: str | None = None\n\nFormat string for the labels. See strftime. If specified, date_labels takes precedence over labels.\n\ndate_minor_breaks: str | None = None\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks."
  },
  {
    "objectID": "reference/scale_color_datetime.html#parameter-attributes",
    "href": "reference/scale_color_datetime.html#parameter-attributes",
    "title": " plotnine.scale_color_datetime",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"datetime\""
  },
  {
    "objectID": "reference/scale_color_discrete.html",
    "href": "reference/scale_color_discrete.html",
    "title": " plotnine.scale_color_discrete",
    "section": "",
    "text": "scale_color_discrete(\n    h=0.01,\n    l=0.6,\n    s=0.65,\n    color_space=\"hls\",\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_color_discrete.html#init-parameters",
    "href": "reference/scale_color_discrete.html#init-parameters",
    "title": " plotnine.scale_color_discrete",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nh: float = 0.01\n\nHue. Must be in the range [0, 1]\n\nl: float = 0.6\n\nLightness. Must be in the range [0, 1]\n\ns: float = 0.65\n\nSaturation. Must be in the range [0, 1]\n\ncolor_space: Literal['hls', 'hsluv'] = 'hls'\n\nColor space to use. Should be one of hls or hsluv. https://www.hsluv.org/"
  },
  {
    "objectID": "reference/scale_color_discrete.html#parameter-attributes",
    "href": "reference/scale_color_discrete.html#parameter-attributes",
    "title": " plotnine.scale_color_discrete",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_color_gradient.html",
    "href": "reference/scale_color_gradient.html",
    "title": " plotnine.scale_color_gradient",
    "section": "",
    "text": "scale_color_gradient(\n    low=\"#132B43\",\n    high=\"#56B1F7\",\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_color_gradient.html#init-parameters",
    "href": "reference/scale_color_gradient.html#init-parameters",
    "title": " plotnine.scale_color_gradient",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nlow: str = '#132B43'\n\nLow color.\n\nhigh: str = '#56B1F7'\n\nHigh color."
  },
  {
    "objectID": "reference/scale_color_gradient.html#parameter-attributes",
    "href": "reference/scale_color_gradient.html#parameter-attributes",
    "title": " plotnine.scale_color_gradient",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_color_gradient.html#see-also",
    "href": "reference/scale_color_gradient.html#see-also",
    "title": " plotnine.scale_color_gradient",
    "section": "See Also",
    "text": "See Also\n\nscale_color_gradient2\n\n\n\nscale_color_gradientn"
  },
  {
    "objectID": "reference/scale_color_gradientn.html",
    "href": "reference/scale_color_gradientn.html",
    "title": " plotnine.scale_color_gradientn",
    "section": "",
    "text": "scale_color_gradientn(\n    colors=\"#832424\",\n    values=None,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_color_gradientn.html#init-parameters",
    "href": "reference/scale_color_gradientn.html#init-parameters",
    "title": " plotnine.scale_color_gradientn",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ncolors: Sequence[str] = '#832424'\n\nList of colors\n\nvalues: Sequence[float] | None = None\n\nlist of points in the range [0, 1] at which to place each color. Must be the same size as colors. Default to evenly space the colors"
  },
  {
    "objectID": "reference/scale_color_gradientn.html#parameter-attributes",
    "href": "reference/scale_color_gradientn.html#parameter-attributes",
    "title": " plotnine.scale_color_gradientn",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_color_gradientn.html#see-also",
    "href": "reference/scale_color_gradientn.html#see-also",
    "title": " plotnine.scale_color_gradientn",
    "section": "See Also",
    "text": "See Also\n\nscale_color_gradient\n\n\n\nscale_color_gradientn"
  },
  {
    "objectID": "reference/scale_color_grey.html",
    "href": "reference/scale_color_grey.html",
    "title": " plotnine.scale_color_grey",
    "section": "",
    "text": "scale_color_grey(\n    start=0.2,\n    end=0.8,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_color_grey.html#init-parameters",
    "href": "reference/scale_color_grey.html#init-parameters",
    "title": " plotnine.scale_color_grey",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nstart: float = 0.2\n\nGrey value at low end of palette.\n\nend: float = 0.8\n\nGrey value at high end of palette"
  },
  {
    "objectID": "reference/scale_color_grey.html#parameter-attributes",
    "href": "reference/scale_color_grey.html#parameter-attributes",
    "title": " plotnine.scale_color_grey",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_color_identity.html",
    "href": "reference/scale_color_identity.html",
    "title": " plotnine.scale_color_identity",
    "section": "",
    "text": "scale_color_identity(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_color_identity.html#parameter-attributes",
    "href": "reference/scale_color_identity.html#parameter-attributes",
    "title": " plotnine.scale_color_identity",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_colour_identity.html",
    "href": "reference/scale_colour_identity.html",
    "title": " plotnine.scale_colour_identity",
    "section": "",
    "text": "scale_colour_identity(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_colour_identity.html#parameter-attributes",
    "href": "reference/scale_colour_identity.html#parameter-attributes",
    "title": " plotnine.scale_colour_identity",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_continuous.html",
    "href": "reference/scale_continuous.html",
    "title": " plotnine.scales.scale_continuous.scale_continuous",
    "section": "",
    "text": "scale_continuous(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_continuous.html#parameter-attributes",
    "href": "reference/scale_continuous.html#parameter-attributes",
    "title": " plotnine.scales.scale_continuous.scale_continuous",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: GuideTypeT\n\nWhether to include a legend\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_continuous.html#notes",
    "href": "reference/scale_continuous.html#notes",
    "title": " plotnine.scales.scale_continuous.scale_continuous",
    "section": "Notes",
    "text": "Notes\nIf using the class directly all arguments must be keyword arguments."
  },
  {
    "objectID": "reference/scale_discrete.html",
    "href": "reference/scale_discrete.html",
    "title": " plotnine.scales.scale_discrete.scale_discrete",
    "section": "",
    "text": "scale_discrete(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_discrete.html#parameter-attributes",
    "href": "reference/scale_discrete.html#parameter-attributes",
    "title": " plotnine.scales.scale_discrete.scale_discrete",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_fill_cmap.html",
    "href": "reference/scale_fill_cmap.html",
    "title": " plotnine.scale_fill_cmap",
    "section": "",
    "text": "scale_fill_cmap(\n    cmap_name=\"viridis\",\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_fill_cmap.html#init-parameters",
    "href": "reference/scale_fill_cmap.html#init-parameters",
    "title": " plotnine.scale_fill_cmap",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ncmap_name: str = 'viridis'\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see colormaps."
  },
  {
    "objectID": "reference/scale_fill_cmap.html#parameter-attributes",
    "href": "reference/scale_fill_cmap.html#parameter-attributes",
    "title": " plotnine.scale_fill_cmap",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_fill_datetime.html",
    "href": "reference/scale_fill_datetime.html",
    "title": " plotnine.scale_fill_datetime",
    "section": "",
    "text": "scale_fill_datetime(\n    cmap_name=\"viridis\",\n    date_breaks=None,\n    date_labels=None,\n    date_minor_breaks=None,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"datetime\"\n)"
  },
  {
    "objectID": "reference/scale_fill_datetime.html#init-parameters",
    "href": "reference/scale_fill_datetime.html#init-parameters",
    "title": " plotnine.scale_fill_datetime",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ncmap_name: str = 'viridis'\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see colormaps.\n\ndate_breaks: str | None = None\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\ndate_labels: str | None = None\n\nFormat string for the labels. See strftime. If specified, date_labels takes precedence over labels.\n\ndate_minor_breaks: str | None = None\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks."
  },
  {
    "objectID": "reference/scale_fill_datetime.html#parameter-attributes",
    "href": "reference/scale_fill_datetime.html#parameter-attributes",
    "title": " plotnine.scale_fill_datetime",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"datetime\""
  },
  {
    "objectID": "reference/scale_fill_discrete.html",
    "href": "reference/scale_fill_discrete.html",
    "title": " plotnine.scale_fill_discrete",
    "section": "",
    "text": "scale_fill_discrete(\n    h=0.01,\n    l=0.6,\n    s=0.65,\n    color_space=\"hls\",\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_fill_discrete.html#init-parameters",
    "href": "reference/scale_fill_discrete.html#init-parameters",
    "title": " plotnine.scale_fill_discrete",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nh: float = 0.01\n\nHue. Must be in the range [0, 1]\n\nl: float = 0.6\n\nLightness. Must be in the range [0, 1]\n\ns: float = 0.65\n\nSaturation. Must be in the range [0, 1]\n\ncolor_space: Literal['hls', 'hsluv'] = 'hls'\n\nColor space to use. Should be one of hls or hsluv. https://www.hsluv.org/"
  },
  {
    "objectID": "reference/scale_fill_discrete.html#parameter-attributes",
    "href": "reference/scale_fill_discrete.html#parameter-attributes",
    "title": " plotnine.scale_fill_discrete",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_fill_gradient.html",
    "href": "reference/scale_fill_gradient.html",
    "title": " plotnine.scale_fill_gradient",
    "section": "",
    "text": "scale_fill_gradient(\n    low=\"#132B43\",\n    high=\"#56B1F7\",\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_fill_gradient.html#init-parameters",
    "href": "reference/scale_fill_gradient.html#init-parameters",
    "title": " plotnine.scale_fill_gradient",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nlow: str = '#132B43'\n\nLow color.\n\nhigh: str = '#56B1F7'\n\nHigh color."
  },
  {
    "objectID": "reference/scale_fill_gradient.html#parameter-attributes",
    "href": "reference/scale_fill_gradient.html#parameter-attributes",
    "title": " plotnine.scale_fill_gradient",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_fill_gradientn.html",
    "href": "reference/scale_fill_gradientn.html",
    "title": " plotnine.scale_fill_gradientn",
    "section": "",
    "text": "scale_fill_gradientn(\n    colors=\"#832424\",\n    values=None,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"colorbar\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_fill_gradientn.html#init-parameters",
    "href": "reference/scale_fill_gradientn.html#init-parameters",
    "title": " plotnine.scale_fill_gradientn",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ncolors: Sequence[str] = '#832424'\n\nList of colors\n\nvalues: Sequence[float] | None = None\n\nlist of points in the range [0, 1] at which to place each color. Must be the same size as colors. Default to evenly space the colors"
  },
  {
    "objectID": "reference/scale_fill_gradientn.html#parameter-attributes",
    "href": "reference/scale_fill_gradientn.html#parameter-attributes",
    "title": " plotnine.scale_fill_gradientn",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\", \"colorbar\"] | None = \"colorbar\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_fill_grey.html",
    "href": "reference/scale_fill_grey.html",
    "title": " plotnine.scale_fill_grey",
    "section": "",
    "text": "scale_fill_grey(\n    start=0.2,\n    end=0.8,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=\"#7F7F7F\",\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_fill_grey.html#init-parameters",
    "href": "reference/scale_fill_grey.html#init-parameters",
    "title": " plotnine.scale_fill_grey",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nstart: float = 0.2\n\nGrey value at low end of palette.\n\nend: float = 0.8\n\nGrey value at high end of palette"
  },
  {
    "objectID": "reference/scale_fill_grey.html#parameter-attributes",
    "href": "reference/scale_fill_grey.html#parameter-attributes",
    "title": " plotnine.scale_fill_grey",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: str = \"#7F7F7F\"\n\nColor of missing values.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_fill_identity.html",
    "href": "reference/scale_fill_identity.html",
    "title": " plotnine.scale_fill_identity",
    "section": "",
    "text": "scale_fill_identity(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_fill_identity.html#parameter-attributes",
    "href": "reference/scale_fill_identity.html#parameter-attributes",
    "title": " plotnine.scale_fill_identity",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_linetype.html",
    "href": "reference/scale_linetype.html",
    "title": " plotnine.scale_linetype",
    "section": "",
    "text": "scale_linetype(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_linetype.html#parameter-attributes",
    "href": "reference/scale_linetype.html#parameter-attributes",
    "title": " plotnine.scale_linetype",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_linetype.html#notes",
    "href": "reference/scale_linetype.html#notes",
    "title": " plotnine.scale_linetype",
    "section": "Notes",
    "text": "Notes\nThe available linetypes are 'solid', 'dashed', 'dashdot', 'dotted' If you need more custom linetypes, use scale_linetype_manual"
  },
  {
    "objectID": "reference/scale_linetype_identity.html",
    "href": "reference/scale_linetype_identity.html",
    "title": " plotnine.scale_linetype_identity",
    "section": "",
    "text": "scale_linetype_identity(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_linetype_identity.html#parameter-attributes",
    "href": "reference/scale_linetype_identity.html#parameter-attributes",
    "title": " plotnine.scale_linetype_identity",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_shape.html",
    "href": "reference/scale_shape.html",
    "title": " plotnine.scale_shape",
    "section": "",
    "text": "scale_shape(\n    unfilled=False,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_shape.html#init-parameters",
    "href": "reference/scale_shape.html#init-parameters",
    "title": " plotnine.scale_shape",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nunfilled: bool = False\n\nIf True, then all shapes will have no interiors that can be a filled."
  },
  {
    "objectID": "reference/scale_shape.html#parameter-attributes",
    "href": "reference/scale_shape.html#parameter-attributes",
    "title": " plotnine.scale_shape",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_shape_identity.html",
    "href": "reference/scale_shape_identity.html",
    "title": " plotnine.scale_shape_identity",
    "section": "",
    "text": "scale_shape_identity(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_shape_identity.html#parameter-attributes",
    "href": "reference/scale_shape_identity.html#parameter-attributes",
    "title": " plotnine.scale_shape_identity",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_size.html",
    "href": "reference/scale_size.html",
    "title": " plotnine.scale_size",
    "section": "",
    "text": "scale_size(\n    range=(1, 6),\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_size.html#init-parameters",
    "href": "reference/scale_size.html#init-parameters",
    "title": " plotnine.scale_size",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nrange: tuple[float, float] = (1, 6)\n\nRange ([Minimum, Maximum]) of the size."
  },
  {
    "objectID": "reference/scale_size.html#parameter-attributes",
    "href": "reference/scale_size.html#parameter-attributes",
    "title": " plotnine.scale_size",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_size_continuous.html",
    "href": "reference/scale_size_continuous.html",
    "title": " plotnine.scale_size_continuous",
    "section": "",
    "text": "scale_size_continuous(\n    range=(1, 6),\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_size_continuous.html#init-parameters",
    "href": "reference/scale_size_continuous.html#init-parameters",
    "title": " plotnine.scale_size_continuous",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nrange: tuple[float, float] = (1, 6)\n\nRange ([Minimum, Maximum]) of the size."
  },
  {
    "objectID": "reference/scale_size_continuous.html#parameter-attributes",
    "href": "reference/scale_size_continuous.html#parameter-attributes",
    "title": " plotnine.scale_size_continuous",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_size_discrete.html",
    "href": "reference/scale_size_discrete.html",
    "title": " plotnine.scale_size_discrete",
    "section": "",
    "text": "scale_size_discrete(\n    range=(2, 6),\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_size_discrete.html#init-parameters",
    "href": "reference/scale_size_discrete.html#init-parameters",
    "title": " plotnine.scale_size_discrete",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nrange: tuple[float, float] = (2, 6)\n\nRange ([Minimum, Maximum]) of the size."
  },
  {
    "objectID": "reference/scale_size_discrete.html#parameter-attributes",
    "href": "reference/scale_size_discrete.html#parameter-attributes",
    "title": " plotnine.scale_size_discrete",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_size_manual.html",
    "href": "reference/scale_size_manual.html",
    "title": " plotnine.scale_size_manual",
    "section": "",
    "text": "scale_size_manual(\n    values,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_size_manual.html#init-parameters",
    "href": "reference/scale_size_manual.html#init-parameters",
    "title": " plotnine.scale_size_manual",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\nvalues: Sequence[Any] | dict[Any, Any] \n\nSizes that make up the palette. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to sizes."
  },
  {
    "objectID": "reference/scale_size_manual.html#parameter-attributes",
    "href": "reference/scale_size_manual.html#parameter-attributes",
    "title": " plotnine.scale_size_manual",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_x_continuous.html",
    "href": "reference/scale_x_continuous.html",
    "title": " plotnine.scale_x_continuous",
    "section": "",
    "text": "scale_x_continuous(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=None\n)"
  },
  {
    "objectID": "reference/scale_x_continuous.html#parameter-attributes",
    "href": "reference/scale_x_continuous.html#parameter-attributes",
    "title": " plotnine.scale_x_continuous",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = None\n\nThe transformation of the scale. Either name of a trans function or a trans function. See mizani.transforms for possible options."
  },
  {
    "objectID": "reference/scale_x_datetime.html",
    "href": "reference/scale_x_datetime.html",
    "title": " plotnine.scale_x_datetime",
    "section": "",
    "text": "scale_x_datetime(\n    date_breaks=None,\n    date_labels=None,\n    date_minor_breaks=None,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"datetime\"\n)"
  },
  {
    "objectID": "reference/scale_x_datetime.html#init-parameters",
    "href": "reference/scale_x_datetime.html#init-parameters",
    "title": " plotnine.scale_x_datetime",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ndate_breaks: str | None = None\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\ndate_labels: str | None = None\n\nFormat string for the labels. See strftime. If specified, date_labels takes precedence over labels.\n\ndate_minor_breaks: str | None = None\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks."
  },
  {
    "objectID": "reference/scale_x_datetime.html#parameter-attributes",
    "href": "reference/scale_x_datetime.html#parameter-attributes",
    "title": " plotnine.scale_x_datetime",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"datetime\""
  },
  {
    "objectID": "reference/scale_x_log10.html",
    "href": "reference/scale_x_log10.html",
    "title": " plotnine.scale_x_log10",
    "section": "",
    "text": "scale_x_log10(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"log10\"\n)"
  },
  {
    "objectID": "reference/scale_x_log10.html#parameter-attributes",
    "href": "reference/scale_x_log10.html#parameter-attributes",
    "title": " plotnine.scale_x_log10",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"log10\""
  },
  {
    "objectID": "reference/scale_x_sqrt.html",
    "href": "reference/scale_x_sqrt.html",
    "title": " plotnine.scale_x_sqrt",
    "section": "",
    "text": "scale_x_sqrt(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"sqrt\"\n)"
  },
  {
    "objectID": "reference/scale_x_sqrt.html#parameter-attributes",
    "href": "reference/scale_x_sqrt.html#parameter-attributes",
    "title": " plotnine.scale_x_sqrt",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"sqrt\""
  },
  {
    "objectID": "reference/scale_x_timedelta.html",
    "href": "reference/scale_x_timedelta.html",
    "title": " plotnine.scale_x_timedelta",
    "section": "",
    "text": "scale_x_timedelta(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"pd_timedelta\"\n)"
  },
  {
    "objectID": "reference/scale_x_timedelta.html#parameter-attributes",
    "href": "reference/scale_x_timedelta.html#parameter-attributes",
    "title": " plotnine.scale_x_timedelta",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"pd_timedelta\""
  },
  {
    "objectID": "reference/scale_y_date.html",
    "href": "reference/scale_y_date.html",
    "title": " plotnine.scale_y_date",
    "section": "",
    "text": "scale_y_date(\n    date_breaks=None,\n    date_labels=None,\n    date_minor_breaks=None,\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"datetime\"\n)"
  },
  {
    "objectID": "reference/scale_y_date.html#init-parameters",
    "href": "reference/scale_y_date.html#init-parameters",
    "title": " plotnine.scale_y_date",
    "section": "Init Parameters",
    "text": "Init Parameters\n\n\ndate_breaks: str | None = None\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\ndate_labels: str | None = None\n\nFormat string for the labels. See strftime. If specified, date_labels takes precedence over labels.\n\ndate_minor_breaks: str | None = None\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks."
  },
  {
    "objectID": "reference/scale_y_date.html#parameter-attributes",
    "href": "reference/scale_y_date.html#parameter-attributes",
    "title": " plotnine.scale_y_date",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"datetime\""
  },
  {
    "objectID": "reference/scale_y_discrete.html",
    "href": "reference/scale_y_discrete.html",
    "title": " plotnine.scale_y_discrete",
    "section": "",
    "text": "scale_y_discrete(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=\"legend\",\n    na_value=np.nan,\n    aesthetics=list(),\n    drop=True,\n    na_translate=True\n)"
  },
  {
    "objectID": "reference/scale_y_discrete.html#parameter-attributes",
    "href": "reference/scale_y_discrete.html#parameter-attributes",
    "title": " plotnine.scale_y_discrete",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: DiscreteBreaksUser = True\n\nList of major break points. Or a callable that takes a tuple of limits and returns a list of breaks. If True, automatically calculate the breaks.\n\nlimits: DiscreteLimitsUser = None\n\nLimits of the scale. These are the categories (unique values) of the variables. If is only a subset of the values, those that are left out will be treated as missing data and represented with a na_value.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: Literal[\"legend\"] | None = \"legend\"\n\n\n\nna_value: Any = np.nan\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\ndrop: bool = True\n\nWhether to drop unused categories from the scale\n\nna_translate: bool = True\n\nIf True translate missing values and show them. If False remove missing values."
  },
  {
    "objectID": "reference/scale_y_reverse.html",
    "href": "reference/scale_y_reverse.html",
    "title": " plotnine.scale_y_reverse",
    "section": "",
    "text": "scale_y_reverse(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"reverse\"\n)"
  },
  {
    "objectID": "reference/scale_y_reverse.html#parameter-attributes",
    "href": "reference/scale_y_reverse.html#parameter-attributes",
    "title": " plotnine.scale_y_reverse",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"reverse\""
  },
  {
    "objectID": "reference/scale_y_symlog.html",
    "href": "reference/scale_y_symlog.html",
    "title": " plotnine.scale_y_symlog",
    "section": "",
    "text": "scale_y_symlog(\n    *,\n    name=None,\n    breaks=True,\n    limits=None,\n    labels=True,\n    expand=None,\n    guide=None,\n    na_value=np.nan,\n    aesthetics=list(),\n    rescaler=rescale,\n    oob=censor,\n    minor_breaks=True,\n    trans=\"symlog\"\n)"
  },
  {
    "objectID": "reference/scale_y_symlog.html#parameter-attributes",
    "href": "reference/scale_y_symlog.html#parameter-attributes",
    "title": " plotnine.scale_y_symlog",
    "section": "Parameter Attributes",
    "text": "Parameter Attributes\n\n\nname: str | None = None\n\nThe name of the scale. It is used as the label of the axis or the title of the guide. Suitable defaults are chosen depending on the type of scale.\n\nbreaks: ContinuousBreaksUser = True\n\nMajor breaks\n\nlimits: ContinuousLimitsUser = None\n\nLimits of the scale. Most commonly, these are the minimum & maximum values for the scale. If not specified they are derived from the data. It may also be a function that takes the derived limits and transforms them into the final limits.\n\nlabels: ScaleLabelsUser = True\n\nLabels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\nexpand: (    tuple[float, float]    | tuple[float, float, float, float]    | None) = None\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:\n(mul, add)\n(mul_low, add_low, mul_high, add_high)\nFor example,\n\n(0, 0) - Do not expand.\n(0, 1) - Expand lower and upper limits by 1 unit.\n(1, 0) - Expand lower and upper limits by 100%.\n(0, 0, 0, 0) - Do not expand, as (0, 0).\n(0, 0, 0, 1) - Expand upper limit by 1 unit.\n(0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%.\n(0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units.\n\nIf not specified, suitable defaults are chosen.\n\nguide: None = None\n\n\n\nna_value: Any = np.nan\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\naesthetics: list[ScaledAestheticsName] = field(default_factory=list)\n\nAesthetics affected by this scale. These are defined by each scale and the user should probably not change them. Have fun.\n\nrescaler: PRescale = rescale\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\noob: PCensor = censor\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\nminor_breaks: MinorBreaksUser = True\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\ntrans: TransUser = \"symlog\""
  },
  {
    "objectID": "reference/seals.html",
    "href": "reference/seals.html",
    "title": " plotnine.data.seals",
    "section": "",
    "text": "seals = pd.read_csv(DATA_DIR / \"seals.csv\")"
  },
  {
    "objectID": "reference/seals.html#description",
    "href": "reference/seals.html#description",
    "title": " plotnine.data.seals",
    "section": "Description",
    "text": "Description\nThis vector field was produced from the data described in Brillinger, D.R., Preisler, H.K., Ager, A.A. and Kie, J.G. “An exploratory data analysis (EDA) of the paths of moving animals”. J. Statistical Planning and Inference 122 (2004), 43-63, using the methods of Brillinger, D.R., “Learning a potential function from a trajectory”, Signal Processing Letters. December (2007)."
  },
  {
    "objectID": "reference/seals.html#format",
    "href": "reference/seals.html#format",
    "title": " plotnine.data.seals",
    "section": "Format",
    "text": "Format\nA data frame with 1155 rows and 4 variables\n\n\n\nColumn\nDescription\n\n\n\n\nlat\nLatitude\n\n\nlong\nLongitude\n\n\ndelta_long\nChange in Longitude\n\n\ndelta_lat\nChange in Latitude"
  },
  {
    "objectID": "reference/seals.html#references",
    "href": "reference/seals.html#references",
    "title": " plotnine.data.seals",
    "section": "References",
    "text": "References\nhttp://www.stat.berkeley.edu/~brill/Papers/jspifinal.pdf"
  },
  {
    "objectID": "reference/stage.html",
    "href": "reference/stage.html",
    "title": " plotnine.stage",
    "section": "",
    "text": "stage(start=None, after_stat=None, after_scale=None)"
  },
  {
    "objectID": "reference/stage.html#parameters",
    "href": "reference/stage.html#parameters",
    "title": " plotnine.stage",
    "section": "Parameters",
    "text": "Parameters\n\n\nstart : str | array_like | scalar = None\n\nAesthetic expression using primary variables from the layer data.\n\nafter_stat : str = None\n\nAesthetic expression using variables calculated by the stat.\n\nafter_scale : str = None\n\nAesthetic expression using aesthetics of the layer."
  },
  {
    "objectID": "reference/stat_bin.html",
    "href": "reference/stat_bin.html",
    "title": " plotnine.stat_bin",
    "section": "",
    "text": "stat_bin(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"histogram\",\n    position=\"stack\",\n    na_rm=False,\n    binwidth=None,\n    bins=None,\n    breaks=None,\n    center=None,\n    boundary=None,\n    closed=\"right\",\n    pad=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_bin.html#parameters",
    "href": "reference/stat_bin.html#parameters",
    "title": " plotnine.stat_bin",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\nweight\nNone\n\n\ny\nafter_stat('count')\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"count\"    # number of points in bin\n\"density\"  # density of points in bin, scaled to integrate to 1\n\"ncount\"   # count, scaled to maximum of 1\n\"ndensity\" # density, scaled to maximum of 1\n\"ngroup\"   # number of points in group\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"histogram\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"stack\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\nbinwidth : float = None\n\nThe width of the bins. The default is to use bins bins that cover the range of the data. You should always override this value, exploring multiple widths to find the best to illustrate the stories in your data.\n\nbins : int = None\n\nNumber of bins. Overridden by binwidth. If None, a number is computed using the freedman-diaconis method.\n\nbreaks : array_like = None\n\nBin boundaries. This supersedes the binwidth, bins, center and boundary.\n\ncenter : float = None\n\nThe center of one of the bins. Note that if center is above or below the range of the data, things will be shifted by an appropriate number of widths. To center on integers, for example, use width=1 and center=0, even if 0 i s outside the range of the data. At most one of center and boundary may be specified.\n\nboundary : float = None\n\nA boundary between two bins. As with center, things are shifted when boundary is outside the range of the data. For example, to center on integers, use width=1 and boundary=0.5, even if 1 is outside the range of the data. At most one of center and boundary may be specified.\n\nclosed : Literal[left, right] = \"right\"\n\nWhich edge of the bins is included.\n\npad : bool = False\n\nIf True, adds empty bins at either side of x. This ensures that frequency polygons touch 0.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_bindot.html",
    "href": "reference/stat_bindot.html",
    "title": " plotnine.stat_bindot",
    "section": "",
    "text": "stat_bindot(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"dotplot\",\n    position=\"identity\",\n    na_rm=False,\n    bins=None,\n    binwidth=None,\n    origin=None,\n    width=0.9,\n    binaxis=\"x\",\n    method=\"dotdensity\",\n    binpositions=\"bygroup\",\n    drop=False,\n    right=True,\n    breaks=None,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_bindot.html#parameters",
    "href": "reference/stat_bindot.html#parameters",
    "title": " plotnine.stat_bindot",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\nafter_stat('count')\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"count\"    # number of points in bin\n\"density\"  # density of points in bin, scaled to integrate to 1\n\"ncount\"   # count, scaled to maximum of 1\n\"ndensity\" # density, scaled to maximum of 1\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"dotplot\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\nbins : int = None\n\nNumber of bins. Overridden by binwidth. If None, a number is computed using the freedman-diaconis method.\n\nbinwidth : float = None\n\nWhen method=\"dotdensity\", this specifies the maximum binwidth. When method=\"histodot\", this specifies the binwidth. This supersedes the bins.\n\norigin : float = None\n\nWhen method=\"histodot\", origin of the first bin.\n\nwidth : float = 0.9\n\nWhen binaxis=\"y\", the spacing of the dotstacks for dodging.\n\nbinaxis : Literal[\"x\", \"y\"] = \"x\"\n\nAxis to bin along.\n\nmethod : Literal[\"dotdensity\", \"histodot\"] = \"dotdensity\"\n\nWhether to do dot-density binning or fixed widths binning.\n\nbinpositions : Literal[\"all\", \"bygroup\"] = \"bygroup\"\n\nPosition of the bins when method=\"dotdensity\". The value - bygroup - positions of the bins for each group are determined separately. - all - positions of the bins are determined with all data taken together. This aligns the dots stacks across multiple groups.\n\ndrop : bool = False\n\nIf True, remove all bins with zero counts.\n\nright : bool = True\n\nWhen method=\"histodot\", True means include right edge of the bins and if False the left edge is included.\n\nbreaks : FloatArray = None\n\nBin boundaries for method=\"histodot\". This supersedes the binwidth and bins.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_bindot.html#see-also",
    "href": "reference/stat_bindot.html#see-also",
    "title": " plotnine.stat_bindot",
    "section": "See Also",
    "text": "See Also\n\nstat_bin"
  },
  {
    "objectID": "reference/stat_count.html",
    "href": "reference/stat_count.html",
    "title": " plotnine.stat_count",
    "section": "",
    "text": "stat_count(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"histogram\",\n    position=\"stack\",\n    na_rm=False,\n    width=None,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_count.html#parameters",
    "href": "reference/stat_count.html#parameters",
    "title": " plotnine.stat_count",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\nafter_stat('count')\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"count\"  # Number of observations at a position\n\"prop\"   # Ratio of points in the panel at a position\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"histogram\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"stack\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\nwidth : float = None\n\nBar width. If None, set to 90% of the resolution of the data.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_count.html#see-also",
    "href": "reference/stat_count.html#see-also",
    "title": " plotnine.stat_count",
    "section": "See Also",
    "text": "See Also\n\nstat_bin"
  },
  {
    "objectID": "reference/stat_density_2d.html",
    "href": "reference/stat_density_2d.html",
    "title": " plotnine.stat_density_2d",
    "section": "",
    "text": "stat_density_2d(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"density_2d\",\n    position=\"identity\",\n    na_rm=False,\n    contour=True,\n    package=\"statsmodels\",\n    kde_params=None,\n    n=64,\n    levels=5,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_density_2d.html#parameters",
    "href": "reference/stat_density_2d.html#parameters",
    "title": " plotnine.stat_density_2d",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"level\"     # density level of a contour\n\"density\"   # Computed density at a point\n\"piece\"     # Numeric id of a contour in a given group\nlevel is only relevant when contours are computed. density is available only when no contours are computed. piece is largely irrelevant.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"density_2d\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ncontour : bool = True\n\nWhether to create contours of the 2d density estimate.\n\nn : int = 64\n\nNumber of equally spaced points at which the density is to be estimated. For efficient computation, it should be a power of two.\n\nlevels : int | array_like = 5\n\nContour levels. If an integer, it specifies the maximum number of levels, if array_like it is the levels themselves.\n\npackage : Literal[statsmodels, scipy, sklearn] = \"statsmodels\"\n\nPackage whose kernel density estimation to use.\n\nkde_params : dict\n\nKeyword arguments to pass on to the kde class.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_density_2d.html#see-also",
    "href": "reference/stat_density_2d.html#see-also",
    "title": " plotnine.stat_density_2d",
    "section": "See Also",
    "text": "See Also\n\nKDEMultivariate\n\n\n\ngaussian_kde\n\n\n\nKernelDensity"
  },
  {
    "objectID": "reference/stat_ellipse.html",
    "href": "reference/stat_ellipse.html",
    "title": " plotnine.stat_ellipse",
    "section": "",
    "text": "stat_ellipse(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"path\",\n    position=\"identity\",\n    na_rm=False,\n    type=\"t\",\n    level=0.95,\n    segments=51,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_ellipse.html#parameters",
    "href": "reference/stat_ellipse.html#parameters",
    "title": " plotnine.stat_ellipse",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"path\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ntype : Literal[\"t\", \"norm\", \"euclid\"] = \"t\"\n\nThe type of ellipse. t assumes a multivariate t-distribution. norm assumes a multivariate normal distribution. euclid draws a circle with the radius equal to level, representing the euclidean distance from the center.\n\nlevel : float = 0.95\n\nThe confidence level at which to draw the ellipse.\n\nsegments : int = 51\n\nNumber of segments to be used in drawing the ellipse.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_hull.html",
    "href": "reference/stat_hull.html",
    "title": " plotnine.stat_hull",
    "section": "",
    "text": "stat_hull(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"path\",\n    position=\"identity\",\n    na_rm=False,\n    qhull_options=None,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_hull.html#parameters",
    "href": "reference/stat_hull.html#parameters",
    "title": " plotnine.stat_hull",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"area\"  # Area of the convex hull\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"path\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\nqhull_options\n\nAdditional options to pass to Qhull. See Qhull &lt;http://www.qhull.org/&gt;__ documentation for details.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_hull.html#raises",
    "href": "reference/stat_hull.html#raises",
    "title": " plotnine.stat_hull",
    "section": "Raises",
    "text": "Raises\n\n\nscipy.spatial.QhullError\n\nRaised when Qhull encounters an error condition, such as geometrical degeneracy when options to resolve are not enabled."
  },
  {
    "objectID": "reference/stat_qq.html",
    "href": "reference/stat_qq.html",
    "title": " plotnine.stat_qq",
    "section": "",
    "text": "stat_qq(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"qq\",\n    position=\"identity\",\n    na_rm=False,\n    distribution=\"norm\",\n    dparams={},\n    quantiles=None,\n    alpha_beta=(0.375, 0.375),\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_qq.html#parameters",
    "href": "reference/stat_qq.html#parameters",
    "title": " plotnine.stat_qq",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nsample\n\n\n\nx\nafter_stat('theoretical')\n\n\ny\nafter_stat('sample')\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n'theoretical'  # theoretical quantiles\n'sample'       # sample quantiles\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"qq\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\ndistribution : str = \"norm\"\n\nDistribution or distribution function name. The default is norm for a normal probability plot. Objects that look enough like a stats.distributions instance (i.e. they have a ppf method) are also accepted. See scipy stats for available distributions.\n\ndparams : dict = None\n\nDistribution-specific shape parameters (shape parameters plus location and scale).\n\nquantiles : array_like = None\n\nProbability points at which to calculate the theoretical quantile values. If provided, must be the same number as as the sample data points. The default is to use calculated theoretical points, use to alpha_beta control how these points are generated.\n\nalpha_beta : tuple = (3/8, 3/8)\n\nParameter values to use when calculating the quantiles.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_qq.html#see-also",
    "href": "reference/stat_qq.html#see-also",
    "title": " plotnine.stat_qq",
    "section": "See Also",
    "text": "See Also\n\nplotting_positions\n\nUses alpha_beta to calculate the quantiles."
  },
  {
    "objectID": "reference/stat_quantile.html",
    "href": "reference/stat_quantile.html",
    "title": " plotnine.stat_quantile",
    "section": "",
    "text": "stat_quantile(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"quantile\",\n    position=\"identity\",\n    na_rm=False,\n    quantiles=(0.25, 0.5, 0.75),\n    formula=\"y ~ x\",\n    method_args={},\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_quantile.html#parameters",
    "href": "reference/stat_quantile.html#parameters",
    "title": " plotnine.stat_quantile",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"quantile\"  # quantile\n\"group\"     # group identifier\nCalculated aesthetics are accessed using the after_stat function. e.g. after_stat('quantile').\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"quantile\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\nquantiles : tuple = (0.25, 0.5, 0.75)\n\nQuantiles of y to compute\n\nformula : str = \"y ~ x\"\n\nFormula relating y variables to x variables\n\nmethod_args : dict = None\n\nExtra arguments passed on to the model fitting method, fit.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_quantile.html#see-also",
    "href": "reference/stat_quantile.html#see-also",
    "title": " plotnine.stat_quantile",
    "section": "See Also",
    "text": "See Also\n\nQuantReg\n\n\n\ngeom_quantile"
  },
  {
    "objectID": "reference/stat_smooth.html",
    "href": "reference/stat_smooth.html",
    "title": " plotnine.stat_smooth",
    "section": "",
    "text": "stat_smooth(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"smooth\",\n    position=\"identity\",\n    na_rm=False,\n    method=\"auto\",\n    se=True,\n    n=80,\n    formula=None,\n    fullrange=False,\n    level=0.95,\n    span=0.75,\n    method_args={},\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_smooth.html#parameters",
    "href": "reference/stat_smooth.html#parameters",
    "title": " plotnine.stat_smooth",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"se\"    # Standard error of points in bin\n\"ymin\"  # Lower confidence limit\n\"ymax\"  # Upper confidence limit\nCalculated aesthetics are accessed using the after_stat function. e.g. after_stat('se').\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"smooth\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\nmethod : str | callable = \"auto\"\n\nThe available methods are:\n\"auto\"       # Use loess if (n&lt;1000), glm otherwise\n\"lm\", \"ols\"  # Linear Model\n\"wls\"        # Weighted Linear Model\n\"rlm\"        # Robust Linear Model\n\"glm\"        # Generalized linear Model\n\"gls\"        # Generalized Least Squares\n\"lowess\"     # Locally Weighted Regression (simple)\n\"loess\"      # Locally Weighted Regression\n\"mavg\"       # Moving Average\n\"gpr\"        # Gaussian Process Regressor\nIf a callable is passed, it must have the signature:\ndef my_smoother(data, xseq, **params):\n    # * data - has the x and y values for the model\n    # * xseq - x values to be predicted\n    # * params - stat parameters\n    #\n    # It must return a new dataframe. Below is the\n    # template used internally by Plotnine\n\n    # Input data into the model\n    x, y = data[\"x\"], data[\"y\"]\n\n    # Create and fit a model\n    model = Model(x, y)\n    results = Model.fit()\n\n    # Create output data by getting predictions on\n    # the xseq values\n    data = pd.DataFrame({\n        \"x\": xseq,\n        \"y\": results.predict(xseq)})\n\n    # Compute confidence intervals, this depends on\n    # the model. However, given standard errors and the\n    # degrees of freedom we can compute the confidence\n    # intervals using the t-distribution.\n    #\n    # For an alternative, implement confidence intervals by\n    # the bootstrap method\n    if params[\"se\"]:\n        from plotnine.utils.smoothers import tdist_ci\n        y = data[\"y\"]            # The predicted value\n        df = 123                 # Degrees of freedom\n        stderr = results.stderr  # Standard error\n        level = params[\"level\"]  # The parameter value\n        low, high = tdist_ci(y, df, stderr, level)\n        data[\"se\"] = stderr\n        data[\"ymin\"] = low\n        data[\"ymax\"] = high\n\n    return data\nFor loess smoothing you must install the scikit-misc package. You can install it using with pip install scikit-misc or pip install plotnine[all].\n\nformula : formula_like = None\n\nAn object that can be used to construct a patsy design matrix. This is usually a string. You can only use a formula if method is one of lm, ols, wls, glm, rlm or gls, and in the formula you may refer to the x and y aesthetic variables.\n\nse : bool = True\n\nIf True draw confidence interval around the smooth line.\n\nn : int = 80\n\nNumber of points to evaluate the smoother at. Some smoothers like mavg do not support this.\n\nfullrange : bool = False\n\nIf True the fit will span the full range of the plot.\n\nlevel : float = 0.95\n\nLevel of confidence to use if se=True.\n\nspan : float = 2/3.\n\nControls the amount of smoothing for the loess smoother. Larger number means more smoothing. It should be in the (0, 1) range.\n\nmethod_args : dict = {}\n\nAdditional arguments passed on to the modelling method.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_smooth.html#see-also",
    "href": "reference/stat_smooth.html#see-also",
    "title": " plotnine.stat_smooth",
    "section": "See Also",
    "text": "See Also\n\nOLS\n\n\n\nWLS\n\n\n\nRLM\n\n\n\nGLM\n\n\n\nGLS\n\n\n\nlowess\n\n\n\nloess\n\n\n\nrolling\n\n\n\nGaussianProcessRegressor"
  },
  {
    "objectID": "reference/stat_smooth.html#notes",
    "href": "reference/stat_smooth.html#notes",
    "title": " plotnine.stat_smooth",
    "section": "Notes",
    "text": "Notes\ngeom_smooth and stat_smooth are effectively aliases, they both use the same arguments. Use geom_smooth unless you want to display the results with a non-standard geom."
  },
  {
    "objectID": "reference/stat_summary.html",
    "href": "reference/stat_summary.html",
    "title": " plotnine.stat_summary",
    "section": "",
    "text": "stat_summary(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"pointrange\",\n    position=\"identity\",\n    na_rm=False,\n    fun_data=\"mean_cl_boot\",\n    fun_y=None,\n    fun_ymin=None,\n    fun_ymax=None,\n    fun_args=None,\n    random_state=None,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_summary.html#parameters",
    "href": "reference/stat_summary.html#parameters",
    "title": " plotnine.stat_summary",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\nx\n\n\n\ny\n\n\n\n\nThe bold aesthetics are required.\nOptions for computed aesthetics\n\"ymin\"  # ymin computed by the summary function\n\"ymax\"  # ymax computed by the summary function\n\"n\"     # Number of observations at a position\nCalculated aesthetics are accessed using the after_stat function. e.g. after_stat('ymin').\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"pointrange\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\nfun_data : str | callable = \"mean_cl_boot\"\n\nIf string, it should be one of:\n# Bootstrapped mean, confidence interval\n# Arguments:\n#     n_samples - No. of samples to draw\n#     confidence_interval\n#     random_state\n\"mean_cl_boot\"\n\n# Mean, C.I. assuming normal distribution\n# Arguments:\n#     confidence_interval\n\"mean_cl_normal\"\n\n# Mean, standard deviation * constant\n# Arguments:\n#     mult - multiplication factor\n\"mean_sdl\"\n\n# Median, outlier quantiles with equal tail areas\n# Arguments:\n#     confidence_interval\n\"median_hilow\"\n\n# Mean, Standard Errors * constant\n# Arguments:\n#     mult - multiplication factor\n\"mean_se\"\nor any function that takes a array and returns a dataframe with three columns named y, ymin and ymax.\n\nfun_y : callable = None\n\nAny function that takes a array_like and returns a value\n\nfun_ymin : callable = None\n\nAny function that takes an array_like and returns a value\n\nfun_ymax : callable = None\n\nAny function that takes an array_like and returns a value\n\nfun_args : dict = None\n\nArguments to any of the functions. Provided the names of the arguments of the different functions are in not conflict, the arguments will be assigned to the right functions. If there is a conflict, create a wrapper function that resolves the ambiguity in the argument names.\n\nrandom_state : int | RandomState = None\n\nSeed or Random number generator to use. If None, then numpy global generator numpy.random is used.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/stat_summary.html#notes",
    "href": "reference/stat_summary.html#notes",
    "title": " plotnine.stat_summary",
    "section": "Notes",
    "text": "Notes\nIf any of fun_y, fun_ymin or fun_ymax are provided, the value of fun_data will be ignored."
  },
  {
    "objectID": "reference/stat_summary.html#see-also",
    "href": "reference/stat_summary.html#see-also",
    "title": " plotnine.stat_summary",
    "section": "See Also",
    "text": "See Also\n\ngeom_pointrange"
  },
  {
    "objectID": "reference/stat_unique.html",
    "href": "reference/stat_unique.html",
    "title": " plotnine.stat_unique",
    "section": "",
    "text": "stat_unique(\n    mapping=None,\n    data=None,\n    *,\n    geom=\"point\",\n    position=\"identity\",\n    na_rm=False,\n    **kwargs\n)"
  },
  {
    "objectID": "reference/stat_unique.html#parameters",
    "href": "reference/stat_unique.html#parameters",
    "title": " plotnine.stat_unique",
    "section": "Parameters",
    "text": "Parameters\n\n\nmapping : aes = None\n\nAesthetic mappings created with aes. If specified and inherit_aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\nAesthetic\nDefault value\n\n\n\n\n\n\n\n\n\nThe bold aesthetics are required.\n\ndata : DataFrame = None\n\nThe data to be displayed in this layer. If None, the data from from the ggplot() call is used. If specified, it overrides the data from the ggplot() call.\n\ngeom : str | geom = \"point\"\n\nThe statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine.\n\nposition : str | position = \"identity\"\n\nPosition adjustment. If it is a string, it must be registered and known to Plotnine.\n\nna_rm : bool = False\n\nIf False, removes missing values with a warning. If True silently removes missing values.\n\n**kwargs : Any = {}\n\nAesthetics or parameters used by the geom."
  },
  {
    "objectID": "reference/strip_align.html",
    "href": "reference/strip_align.html",
    "title": " plotnine.themes.themeable.strip_align",
    "section": "",
    "text": "strip_align(theme_element)"
  },
  {
    "objectID": "reference/strip_align.html#parameters",
    "href": "reference/strip_align.html#parameters",
    "title": " plotnine.themes.themeable.strip_align",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nValue as a proportion of the strip text size. A good value should be the range [-1, 0.5]. A negative value puts the strip inside the axes and a positive value creates a space between the strip and the axes."
  },
  {
    "objectID": "reference/strip_align_y.html",
    "href": "reference/strip_align_y.html",
    "title": " plotnine.themes.themeable.strip_align_y",
    "section": "",
    "text": "strip_align_y(theme_element)"
  },
  {
    "objectID": "reference/strip_align_y.html#parameters",
    "href": "reference/strip_align_y.html#parameters",
    "title": " plotnine.themes.themeable.strip_align_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : float\n\nValue as a proportion of the strip size. A good value should be the range [-1, 0.5]. A negative value puts the strip inside the axes. A positive value creates a margin between the strip and the axes. 0 puts the strip exactly beside the panels."
  },
  {
    "objectID": "reference/strip_background_x.html",
    "href": "reference/strip_background_x.html",
    "title": " plotnine.themes.themeable.strip_background_x",
    "section": "",
    "text": "strip_background_x(theme_element)"
  },
  {
    "objectID": "reference/strip_background_x.html#parameters",
    "href": "reference/strip_background_x.html#parameters",
    "title": " plotnine.themes.themeable.strip_background_x",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_rect"
  },
  {
    "objectID": "reference/strip_text.html",
    "href": "reference/strip_text.html",
    "title": " plotnine.themes.themeable.strip_text",
    "section": "",
    "text": "strip_text(theme_element)"
  },
  {
    "objectID": "reference/strip_text.html#parameters",
    "href": "reference/strip_text.html#parameters",
    "title": " plotnine.themes.themeable.strip_text",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/strip_text_y.html",
    "href": "reference/strip_text_y.html",
    "title": " plotnine.themes.themeable.strip_text_y",
    "section": "",
    "text": "strip_text_y(theme_element)"
  },
  {
    "objectID": "reference/strip_text_y.html#parameters",
    "href": "reference/strip_text_y.html#parameters",
    "title": " plotnine.themes.themeable.strip_text_y",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : element_text"
  },
  {
    "objectID": "reference/svg_usefonts.html",
    "href": "reference/svg_usefonts.html",
    "title": " plotnine.themes.themeable.svg_usefonts",
    "section": "",
    "text": "svg_usefonts(theme_element)"
  },
  {
    "objectID": "reference/svg_usefonts.html#parameters",
    "href": "reference/svg_usefonts.html#parameters",
    "title": " plotnine.themes.themeable.svg_usefonts",
    "section": "Parameters",
    "text": "Parameters\n\n\ntheme_element : bool\n\nIf True, assume fonts are installed on the machine where the SVG will be viewed.\nIf False, embed characters as paths; this is supported by most SVG renderers.\nYou should probably set this to True if you intend to edit the svg file."
  },
  {
    "objectID": "reference/theme.html",
    "href": "reference/theme.html",
    "title": " plotnine.theme",
    "section": "",
    "text": "theme(\n    complete=False,\n    axis_title_x=None,\n    axis_title_y=None,\n    axis_title=None,\n    legend_title=None,\n    legend_text_legend=None,\n    legend_text_colorbar=None,\n    legend_text=None,\n    plot_title=None,\n    plot_subtitle=None,\n    plot_caption=None,\n    strip_text_x=None,\n    strip_text_y=None,\n    strip_text=None,\n    title=None,\n    axis_text_x=None,\n    axis_text_y=None,\n    axis_text=None,\n    text=None,\n    axis_line_x=None,\n    axis_line_y=None,\n    axis_line=None,\n    axis_ticks_minor_x=None,\n    axis_ticks_minor_y=None,\n    axis_ticks_major_x=None,\n    axis_ticks_major_y=None,\n    axis_ticks_major=None,\n    axis_ticks_minor=None,\n    axis_ticks_x=None,\n    axis_ticks_y=None,\n    axis_ticks=None,\n    legend_ticks=None,\n    panel_grid_major_x=None,\n    panel_grid_major_y=None,\n    panel_grid_minor_x=None,\n    panel_grid_minor_y=None,\n    panel_grid_major=None,\n    panel_grid_minor=None,\n    panel_grid=None,\n    line=None,\n    legend_key=None,\n    legend_frame=None,\n    legend_background=None,\n    legend_box_background=None,\n    panel_background=None,\n    panel_border=None,\n    plot_background=None,\n    strip_background_x=None,\n    strip_background_y=None,\n    strip_background=None,\n    rect=None,\n    axis_ticks_length_major_x=None,\n    axis_ticks_length_major_y=None,\n    axis_ticks_length_major=None,\n    axis_ticks_length_minor_x=None,\n    axis_ticks_length_minor_y=None,\n    axis_ticks_length_minor=None,\n    axis_ticks_length=None,\n    axis_ticks_pad_major_x=None,\n    axis_ticks_pad_major_y=None,\n    axis_ticks_pad_major=None,\n    axis_ticks_pad_minor_x=None,\n    axis_ticks_pad_minor_y=None,\n    axis_ticks_pad_minor=None,\n    axis_ticks_pad=None,\n    panel_spacing_x=None,\n    panel_spacing_y=None,\n    panel_spacing=None,\n    plot_margin_left=None,\n    plot_margin_right=None,\n    plot_margin_top=None,\n    plot_margin_bottom=None,\n    plot_margin=None,\n    panel_ontop=None,\n    aspect_ratio=None,\n    dpi=None,\n    figure_size=None,\n    legend_box=None,\n    legend_box_margin=None,\n    legend_box_just=None,\n    legend_justification_right=None,\n    legend_justification_left=None,\n    legend_justification_top=None,\n    legend_justification_bottom=None,\n    legend_justification_inside=None,\n    legend_justification=None,\n    legend_direction=None,\n    legend_key_width=None,\n    legend_key_height=None,\n    legend_key_size=None,\n    legend_ticks_length=None,\n    legend_margin=None,\n    legend_box_spacing=None,\n    legend_spacing=None,\n    legend_position_inside=None,\n    legend_position=None,\n    legend_title_position=None,\n    legend_text_position=None,\n    legend_key_spacing_x=None,\n    legend_key_spacing_y=None,\n    legend_key_spacing=None,\n    strip_align_x=None,\n    strip_align_y=None,\n    strip_align=None,\n    svg_usefonts=None,\n    kwargs={}\n)"
  },
  {
    "objectID": "reference/theme.html#parameters",
    "href": "reference/theme.html#parameters",
    "title": " plotnine.theme",
    "section": "Parameters",
    "text": "Parameters\n\n\ncomplete : bool = False\n\nThemes that are complete will override any existing themes. themes that are not complete (ie. partial) will add to or override specific elements of the current theme. e.g:\ntheme_gray() + theme_xkcd()\nwill be completely determined by theme_xkcd, but:\ntheme_gray() + theme(axis_text_x=element_text(angle=45))\nwill only modify the x-axis text.\n\nkwargs = {}\n\nkwargs are themeables. The themeables are elements that are subclasses of themeable. Many themeables are defined using theme elements i.e\n\nelement_line\nelement_rect\nelement_text\n\nThese simply bind together all the aspects of a themeable that can be themed. See themeable."
  },
  {
    "objectID": "reference/theme.html#notes",
    "href": "reference/theme.html#notes",
    "title": " plotnine.theme",
    "section": "Notes",
    "text": "Notes\nWhen subclassing, make sure to call theme.__init__. After which you can customise self._rcParams within the __init__ method of the new theme. The rcParams should not be modified after that."
  },
  {
    "objectID": "reference/theme.html#methods",
    "href": "reference/theme.html#methods",
    "title": " plotnine.theme",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\nadd_theme\nAdd themes together\n\n\napply\nApply this theme, then apply additional modifications in order.\n\n\nsetup\nSetup theme for applying\n\n\nto_retina\nReturn a retina-sized version of this theme\n\n\n\n\n add_theme\n\nadd_theme(other)\n\n\nAdd themes together\nSubclasses should not override this method.\nThis will be called when adding two instances of class ‘theme’ together. A complete theme will annihilate any previous themes. Partial themes can be added together and can be added to a complete theme.\n\n\n\n apply\n\napply()\n\n\nApply this theme, then apply additional modifications in order.\nThis method will be called once after plot has completed. Subclasses that override this method should make sure that the base class method is called.\n\n\n\n setup\n\nsetup(plot)\n\n\nSetup theme for applying\nThis method will be called when the figure and axes have been created but before any plotting or other artists have been added to the figure. This method gives the theme and the elements references to the figure and/or axes.\nIt also initialises where the artists to be themed will be stored.\n\n\n\n to_retina\n\nto_retina()\n\n\nReturn a retina-sized version of this theme\nThe result is a theme that has double the dpi."
  },
  {
    "objectID": "reference/theme_bw.html",
    "href": "reference/theme_bw.html",
    "title": " plotnine.theme_bw",
    "section": "",
    "text": "theme_bw(base_size=11, base_family=None)"
  },
  {
    "objectID": "reference/theme_bw.html#parameters",
    "href": "reference/theme_bw.html#parameters",
    "title": " plotnine.theme_bw",
    "section": "Parameters",
    "text": "Parameters\n\n\nbase_size : int = 11\n\nBase font size. All text sizes are a scaled versions of the base font size.\n\nbase_family : str = None\n\nBase font family. If None, use plotnine.options.base_family."
  },
  {
    "objectID": "reference/theme_dark.html",
    "href": "reference/theme_dark.html",
    "title": " plotnine.theme_dark",
    "section": "",
    "text": "theme_dark(base_size=11, base_family=None)"
  },
  {
    "objectID": "reference/theme_dark.html#parameters",
    "href": "reference/theme_dark.html#parameters",
    "title": " plotnine.theme_dark",
    "section": "Parameters",
    "text": "Parameters\n\n\nbase_size : int = 11\n\nBase font size. All text sizes are a scaled versions of the base font size.\n\nbase_family : str = None\n\nBase font family. If None, use plotnine.options.base_family."
  },
  {
    "objectID": "reference/theme_gray.html",
    "href": "reference/theme_gray.html",
    "title": " plotnine.theme_gray",
    "section": "",
    "text": "theme_gray(base_size=11, base_family=None)"
  },
  {
    "objectID": "reference/theme_gray.html#parameters",
    "href": "reference/theme_gray.html#parameters",
    "title": " plotnine.theme_gray",
    "section": "Parameters",
    "text": "Parameters\n\n\nbase_size : int = 11\n\nBase font size. All text sizes are a scaled versions of the base font size.\n\nbase_family : str = None\n\nBase font family. If None, use plotnine.options.base_family."
  },
  {
    "objectID": "reference/theme_light.html",
    "href": "reference/theme_light.html",
    "title": " plotnine.theme_light",
    "section": "",
    "text": "theme_light(base_size=11, base_family=None)"
  },
  {
    "objectID": "reference/theme_light.html#parameters",
    "href": "reference/theme_light.html#parameters",
    "title": " plotnine.theme_light",
    "section": "Parameters",
    "text": "Parameters\n\n\nbase_size : int = 11\n\nBase font size. All text sizes are a scaled versions of the base font size.\n\nbase_family : str = None\n\nBase font family. If None, use plotnine.options.base_family."
  },
  {
    "objectID": "reference/theme_matplotlib.html",
    "href": "reference/theme_matplotlib.html",
    "title": " plotnine.theme_matplotlib",
    "section": "",
    "text": "theme_matplotlib(rc=None, fname=None, use_defaults=True)"
  },
  {
    "objectID": "reference/theme_matplotlib.html#parameters",
    "href": "reference/theme_matplotlib.html#parameters",
    "title": " plotnine.theme_matplotlib",
    "section": "Parameters",
    "text": "Parameters\n\n\nrc : dict = None\n\nrcParams which should be applied on top of mathplotlib default.\n\nfname : str = None\n\nFilename to a matplotlibrc file\n\nuse_defaults : bool = True\n\nIf True (the default) resets the plot setting to the (current) matplotlib.rcParams values"
  },
  {
    "objectID": "reference/theme_seaborn.html",
    "href": "reference/theme_seaborn.html",
    "title": " plotnine.theme_seaborn",
    "section": "",
    "text": "theme_seaborn(\n    style=\"darkgrid\", context=\"notebook\", font=\"sans-serif\", font_scale=1\n)"
  },
  {
    "objectID": "reference/theme_seaborn.html#parameters",
    "href": "reference/theme_seaborn.html#parameters",
    "title": " plotnine.theme_seaborn",
    "section": "Parameters",
    "text": "Parameters\n\n\nstyle = \"darkgrid\"\n\nStyle of axis background.\n\ncontext = \"notebook\"\n\nIntended context for resulting figures.\n\nfont : str = \"sans-serif\"\n\nFont family, see matplotlib font manager.\n\nfont_scale : float = 1\n\nSeparate scaling factor to independently scale the size of the font elements."
  },
  {
    "objectID": "reference/theme_tufte.html",
    "href": "reference/theme_tufte.html",
    "title": " plotnine.theme_tufte",
    "section": "",
    "text": "theme_tufte(base_size=11, base_family=None, ticks=True)"
  },
  {
    "objectID": "reference/theme_tufte.html#parameters",
    "href": "reference/theme_tufte.html#parameters",
    "title": " plotnine.theme_tufte",
    "section": "Parameters",
    "text": "Parameters\n\n\nbase_size : int = 11\n\nBase font size. All text sizes are a scaled versions of the base font size.\n\nbase_family : str = None\n\nBase font family. If None, use plotnine.options.base_family.\n\nticks = True\n\nWhether to show axis ticks."
  },
  {
    "objectID": "reference/theme_tufte.html#references",
    "href": "reference/theme_tufte.html#references",
    "title": " plotnine.theme_tufte",
    "section": "References",
    "text": "References\nTufte, Edward R. (2001) The Visual Display of Quantitative Information, Chapter 6.\nTranslated from the R ggthemes package by hyiltiz hyiltiz@gmail.com. Released under GNU GPL v2 license or later."
  },
  {
    "objectID": "reference/theme_void.html",
    "href": "reference/theme_void.html",
    "title": " plotnine.theme_void",
    "section": "",
    "text": "theme_void(base_size=11, base_family=None)"
  },
  {
    "objectID": "reference/theme_void.html#parameters",
    "href": "reference/theme_void.html#parameters",
    "title": " plotnine.theme_void",
    "section": "Parameters",
    "text": "Parameters\n\n\nbase_size : int = 11\n\nBase font size. All text sizes are a scaled versions of the base font size.\n\nbase_family : str = None\n\nBase font family."
  },
  {
    "objectID": "reference/themeable.html",
    "href": "reference/themeable.html",
    "title": " plotnine.themes.themeable.themeable",
    "section": "",
    "text": "themeable(theme_element)"
  },
  {
    "objectID": "reference/themeable.html#notes",
    "href": "reference/themeable.html#notes",
    "title": " plotnine.themes.themeable.themeable",
    "section": "Notes",
    "text": "Notes\nA user should never create instances of class Themeable or subclasses of it."
  },
  {
    "objectID": "reference/themeable.html#attributes",
    "href": "reference/themeable.html#attributes",
    "title": " plotnine.themes.themeable.themeable",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\nproperties\nReturn only the properties that can be applied\n\n\nrcParams\nReturn themeables rcparams to an rcparam dict before plotting.\n\n\n\n\n properties \n\nproperties\n\n\nReturn only the properties that can be applied\n\n\n\n rcParams \n\nrcParams : dict[str, Any]\n\n\nReturn themeables rcparams to an rcparam dict before plotting.\n\n\nReturns\n\n\ndict\n\nDictionary of legal matplotlib parameters.\n\nThis method should always call super(…).rcParams and\n\n\n\nupdate the dictionary that it returns with its own value, and\n\n\n\nreturn that dictionary.\n\n\n\nThis method is called before plotting. It tends to be more\n\n\n\nuseful for general themeables. Very specific themeables\n\n\n\noften cannot be be themed until they are created as a\n\n\n\nresult of the plotting process."
  },
  {
    "objectID": "reference/themeable.html#methods",
    "href": "reference/themeable.html#methods",
    "title": " plotnine.themes.themeable.themeable",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\napply\nCalled by the theme to apply the themeable\n\n\napply_ax\nCalled after a chart has been plotted.\n\n\napply_figure\nApply theme to the figure\n\n\nblank_ax\nBlank out theme elements\n\n\nblank_figure\nBlank out elements on the figure\n\n\nfrom_class_name\nCreate a themeable by name\n\n\nis_blank\nReturn True if theme_element is made of element_blank\n\n\nmerge\nMerge properties of other into self\n\n\n\n\n apply\n\napply(theme)\n\n\nCalled by the theme to apply the themeable\nSubclasses should not have to override this method\n\n\n\n apply_ax\n\napply_ax(ax)\n\n\nCalled after a chart has been plotted.\nSubclasses can override this method to customize the plot according to the theme.\nThis method should be implemented as super().apply_ax() followed by extracting the portion of the axes specific to this themeable then applying the properties.\n\n\nParameters\n\n\nax : matplotlib.axes.Axes\n\n\n\n\n\n\n\n\n apply_figure\n\napply_figure(figure, targets)\n\n\nApply theme to the figure\n\n\n\n blank_ax\n\nblank_ax(ax)\n\n\nBlank out theme elements\n\n\n\n blank_figure\n\nblank_figure(figure, targets)\n\n\nBlank out elements on the figure\n\n\n\n from_class_name \n\nfrom_class_name(name, theme_element)\n\n\nCreate a themeable by name\n\n\nParameters\n\n\nname : str\n\nClass name\n\ntheme_element : element object\n\nAn element of the type required by the theme. For lines, text and rects it should be one of: element_line, element_rect, element_text or element_blank\n\n\n\n\n\nReturns\n\n\nout : plotnine.themes.themeable.themeable\n\n\n\n\n\n\n\n\n is_blank\n\nis_blank()\n\n\nReturn True if theme_element is made of element_blank\n\n\n\n merge\n\nmerge(other)\n\n\nMerge properties of other into self\n\n\nRaises\n\n\nValueError\n\nIf any of the properties are blank"
  },
  {
    "objectID": "reference/txhousing.html",
    "href": "reference/txhousing.html",
    "title": " plotnine.data.txhousing",
    "section": "",
    "text": "txhousing = pd.read_csv(DATA_DIR / \"txhousing.csv\")"
  },
  {
    "objectID": "reference/txhousing.html#description",
    "href": "reference/txhousing.html#description",
    "title": " plotnine.data.txhousing",
    "section": "Description",
    "text": "Description\nInformation about the housing market in Texas provided by the TAMU real estate center, http://recenter.tamu.edu/."
  },
  {
    "objectID": "reference/txhousing.html#format",
    "href": "reference/txhousing.html#format",
    "title": " plotnine.data.txhousing",
    "section": "Format",
    "text": "Format\nA data frame with 8602 observations and 9 variables:\n\n\n\n\n\n\n\nColumn\nDescription\n\n\n\n\ncity\nName of MLS area\n\n\nyear\nYear\n\n\nmonth\nMonth\n\n\nsales\nNumber of sales\n\n\nvolume\nTotal value of sales\n\n\nmedian\nMedian sale price\n\n\nlistings\nTotal active listings\n\n\ninventory\n“Months inventory”: amount of time it would take to sell all current listings at current pace of sales.\n\n\ndate\nDate"
  },
  {
    "objectID": "reference/xlab.html",
    "href": "reference/xlab.html",
    "title": " plotnine.xlab",
    "section": "",
    "text": "xlab(label)"
  },
  {
    "objectID": "reference/xlab.html#parameters",
    "href": "reference/xlab.html#parameters",
    "title": " plotnine.xlab",
    "section": "Parameters",
    "text": "Parameters\n\n\nname\n\nx aesthetic label (x-axis)"
  },
  {
    "objectID": "reference/ylab.html",
    "href": "reference/ylab.html",
    "title": " plotnine.ylab",
    "section": "",
    "text": "ylab(label)"
  },
  {
    "objectID": "reference/ylab.html#parameters",
    "href": "reference/ylab.html#parameters",
    "title": " plotnine.ylab",
    "section": "Parameters",
    "text": "Parameters\n\n\nname\n\ny aesthetic label i.e. y-axis label"
  }
]